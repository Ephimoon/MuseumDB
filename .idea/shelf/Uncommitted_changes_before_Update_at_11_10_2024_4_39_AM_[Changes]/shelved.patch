Index: frontend/src/server.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const express = require('express');\r\nconst mysql = require('mysql2/promise');\r\nconst cors = require('cors');\r\nconst multer = require('multer');\r\nconst bcrypt = require('bcrypt');\r\nrequire('dotenv').config();\r\nconst app = express();\r\nconst port = 5000; // Change to 6000 when you push to GitHub\r\n\r\nconst allowedOrigins = [\r\n    'http://localhost:3000', // Local development frontend\r\n    'http://localhost:3002', // Updated localhost port if needed\r\n    'https://black-desert-0587dbd10.5.azurestaticapps.net/' // Replace with your Azure Static Web App URL\r\n];\r\n\r\napp.use(cors({\r\n    origin: function (origin, callback) {\r\n        if (!origin || allowedOrigins.includes(origin)) {\r\n            callback(null, true);\r\n        } else {\r\n            callback(new Error('Not allowed by CORS'));\r\n        }\r\n    },\r\n    credentials: true // Enables credentials if you plan on using them\r\n}));\r\n\r\napp.use(express.json());\r\napp.use(express.static('public')); // Allows access to the public folder for images\r\n\r\n// ----- DATABASE CONNECTION ----------------------------------------------------------------------\r\nconst db = mysql.createPool({ // We can add the env file later so this data is not exposed\r\n    host: process.env.DB_HOST,\r\n    user: process.env.DB_USER,\r\n    password: process.env.DB_PASS,\r\n    database: process.env.DB_NAME,\r\n    port: process.env.DB_PORT,\r\n    waitForConnections: true,\r\n    connectionLimit: 10,\r\n    queueLimit: 0,\r\n    decimalNumbers: true\r\n});\r\ndb.getConnection()\r\n    .then(() => console.log('Connected to the MySQL database'))\r\n    .catch((err) => console.error('Error connecting to the database:', err));\r\n// ------------------------------------------------------------------------------------------------\r\n\r\n// ----- MULTER: IMAGE UPLOAD ---------------------------------------------------------------------\r\nconst storage = multer.diskStorage({\r\n    destination: (req, file, cb) => {\r\n        cb(null, 'public/images');\r\n    },\r\n    filename: (req, file, cb) => {\r\n        const safeFileName = file.originalname.replace(/[^a-zA-Z0-9.-]/g, '_');\r\n        cb(null, safeFileName);\r\n    }\r\n});\r\nconst upload = multer({ storage });\r\n// ------------------------------------------------------------------------------------------------\r\n\r\n// ----- API CALLS --------------------------------------------------------------------------------\r\n\r\n// ----- (MELANIE) --------------------------------------------------------------------------------\r\n\r\n// Query artwork table\r\napp.get('/artwork', async (req, res) => {\r\n    const sql = 'SELECT * FROM artwork';\r\n    try {\r\n        const [result] = await db.query(sql);\r\n        res.json(result);\r\n    } catch (err) {\r\n        console.error('Error fetching artwork:', err);\r\n        res.status(500).json({ message: \"Error fetching artwork table\" });\r\n    }\r\n});\r\n\r\n// Query departments table\r\napp.get('/department', async (req, res) => {\r\n    const sql = 'SELECT * FROM department';\r\n    try {\r\n        const [result] = await db.query(sql);\r\n        res.json(result);\r\n    } catch (err) {\r\n        console.error('Error fetching department:', err);\r\n        res.status(500).json({ message: \"Error fetching department table\" });\r\n    }\r\n});\r\n\r\n// Query artist table\r\napp.get('/artist', async (req, res) => {\r\n    const sql = 'SELECT * FROM artist';\r\n    try {\r\n        const [result] = await db.query(sql);\r\n        res.json(result);\r\n    } catch (err) {\r\n        console.error('Error fetching artist:', err);\r\n        res.status(500).json({ message: \"Error fetching artist table\" });\r\n    }\r\n});\r\n\r\n// ----- (MELANIE DONE) ---------------------------------------------------------------------------\r\n\r\n// ----- (LEO) ------------------------------------------------------------------------------------\r\n\r\n// User registration\r\napp.post('/register', async (req, res) => {\r\n    const { firstName, lastName, dateOfBirth, username, password, email, roleId } = req.body;\r\n\r\n    const newErrors = {};\r\n    if (!firstName) newErrors.firstName = 'First name is required';\r\n    if (!lastName) newErrors.lastName = 'Last name is required';\r\n    if (!dateOfBirth) newErrors.dateOfBirth = 'Date of birth is required';\r\n    if (!username) newErrors.username = 'Username is required';\r\n    if (!password) newErrors.password = 'Password is required';\r\n    if (!email) newErrors.email = 'Email is required';\r\n\r\n    if (Object.keys(newErrors).length > 0) {\r\n        return res.status(400).json({ message: 'Validation error', errors: newErrors });\r\n    }\r\n\r\n    try {\r\n        const hashedPassword = await bcrypt.hash(password, 10);\r\n        const assignedRoleId = roleId || 3; // Default to role ID 3 if not provided\r\n        const sql = `\r\n            INSERT INTO users (first_name, last_name, date_of_birth, username, password, email, role_id)\r\n            VALUES (?, ?, ?, ?, ?, ?, ?)\r\n        `;\r\n        const values = [firstName, lastName, dateOfBirth, username, hashedPassword, email, assignedRoleId];\r\n\r\n        await db.query(sql, values);\r\n        res.status(201).json({ message: 'User registered successfully.' });\r\n    } catch (error) {\r\n        console.error('Error during registration:', error);\r\n        res.status(500).json({ message: 'Server error during registration.' });\r\n    }\r\n});\r\n\r\n// User login\r\napp.post('/login', async (req, res) => {\r\n    const { username, password } = req.body;\r\n\r\n    if (!username || !password) {\r\n        return res.status(400).json({ message: 'Username and password are required.' });\r\n    }\r\n\r\n    try {\r\n        const [user] = await db.query(`\r\n            SELECT users.*, roles.role_name\r\n            FROM users\r\n            JOIN roles ON users.role_id = roles.id\r\n            WHERE users.username = ?\r\n        `, [username]);\r\n\r\n        if (user.length === 0) {\r\n            return res.status(400).json({ message: 'Invalid username or password.' });\r\n        }\r\n\r\n        const passwordMatch = await bcrypt.compare(password, user[0].password);\r\n        if (!passwordMatch) {\r\n            return res.status(400).json({ message: 'Invalid username or password.' });\r\n        }\r\n\r\n        res.status(200).json({\r\n            message: 'Login successful!',\r\n            userId: user[0].user_id,\r\n            role: user[0].role_name,\r\n            username: user[0].username, // Include username in response if needed\r\n        });\r\n    } catch (error) {\r\n        console.error('Server error during login:', error);\r\n        res.status(500).json({ message: 'Server error.' });\r\n    }\r\n});\r\n\r\n// ----- AUTHENTICATION MIDDLEWARE -----\r\nfunction authenticateAdmin(req, res, next) {\r\n    const { role } = req.headers;\r\n    if (role === 'admin' || role === 'staff') {\r\n        next();\r\n    } else {\r\n        res.status(403).json({ message: 'Access denied. Admins only.' });\r\n    }\r\n}\r\n\r\n// Authenticate User Middleware\r\nfunction authenticateUser(req, res, next) {\r\n    const userId = req.headers['user-id'];\r\n    const role = req.headers['role'];\r\n\r\n    if (userId && role) {\r\n        req.userId = userId;\r\n        req.userRole = role;\r\n        next();\r\n    } else {\r\n        res.status(401).json({ message: 'Unauthorized access.' });\r\n    }\r\n}\r\n\r\n// ----- MULTER CONFIGURATION -----\r\nconst uploadMulter = multer({ storage: multer.memoryStorage() });\r\n\r\n// ----- GIFT SHOP ITEMS ENDPOINTS -----\r\n\r\n// Create item API\r\napp.post('/giftshopitems', upload.single('image'), async (req, res) => {\r\n    const { name_, category, price, quantity } = req.body;\r\n    const imageBlob = req.file ? req.file.buffer : null;\r\n\r\n    try {\r\n        const sql = `\r\n            INSERT INTO giftshopitem (name_, category, price, quantity, image)\r\n            VALUES (?, ?, ?, ?, ?)\r\n        `;\r\n        const values = [name_, category, parseFloat(price), quantity, imageBlob];\r\n\r\n        await db.query(sql, values);\r\n        res.status(201).json({ message: 'Item created successfully' });\r\n    } catch (error) {\r\n        console.error('Error creating gift shop item:', error);\r\n        res.status(500).json({ error: 'Failed to create gift shop item' });\r\n    }\r\n});\r\n\r\n// Get all gift shop items (non-deleted)\r\napp.get('/giftshopitems', async (req, res) => {\r\n    try {\r\n        const [rows] = await db.query('SELECT item_id, name_, category, price, quantity, is_deleted FROM giftshopitem WHERE is_deleted = 0');\r\n        res.json(rows);\r\n    } catch (error) {\r\n        console.error('Error fetching gift shop items:', error);\r\n        res.status(500).json({ message: 'Server error fetching gift shop items.' });\r\n    }\r\n});\r\n\r\n// Get all gift shop items (including deleted, admin only)\r\napp.get('/giftshopitemsall', async (req, res) => {\r\n    try {\r\n        const [rows] = await db.query('SELECT item_id, name_, category, price, quantity, is_deleted FROM giftshopitem');\r\n        res.json(rows);\r\n    } catch (error) {\r\n        console.error('Error fetching gift shop items:', error);\r\n        res.status(500).json({ message: 'Server error fetching gift shop items.' });\r\n    }\r\n});\r\n\r\n// Get image for a specific gift shop item\r\napp.get('/giftshopitems/:id/image', async (req, res) => {\r\n    const { id } = req.params;\r\n\r\n    try {\r\n        const [rows] = await db.query('SELECT image FROM giftshopitem WHERE item_id = ?', [id]);\r\n        if (rows.length === 0 || !rows[0].image) {\r\n            return res.status(404).json({ message: 'Image not found.' });\r\n        }\r\n\r\n        res.set('Content-Type', 'image/jpeg'); // Adjust content type as needed\r\n        res.send(rows[0].image);\r\n    } catch (error) {\r\n        console.error('Error fetching image:', error);\r\n        res.status(500).json({ message: 'Server error fetching image.' });\r\n    }\r\n});\r\n\r\n// Update item API\r\napp.put('/giftshopitems/:id', upload.single('image'), async (req, res) => {\r\n    const { id } = req.params;\r\n    const { name_, category, price, quantity } = req.body;\r\n    const imageBlob = req.file ? req.file.buffer : null;\r\n\r\n    try {\r\n        const sql = `\r\n            UPDATE giftshopitem\r\n            SET name_ = ?,\r\n                category = ?,\r\n                price = ?,\r\n                quantity = ?,\r\n                image = ?\r\n            WHERE item_id = ?\r\n              AND is_deleted = 0\r\n        `;\r\n        const values = [name_, category, parseFloat(price), quantity, imageBlob, id];\r\n\r\n        const [result] = await db.query(sql, values);\r\n        if (result.affectedRows === 0) {\r\n            return res.status(404).json({ message: 'Item not found or already deleted.' });\r\n        }\r\n        res.status(200).json({ message: 'Item updated successfully' });\r\n    } catch (error) {\r\n        console.error('Error updating gift shop item:', error);\r\n        res.status(500).json({ error: 'Failed to update gift shop item' });\r\n    }\r\n});\r\n\r\n// Hard delete a gift shop item (Admin only)\r\napp.delete('/giftshopitems/:id/hard-delete', authenticateAdmin, async (req, res) => {\r\n    const { id } = req.params;\r\n\r\n    try {\r\n        const sql = 'DELETE FROM giftshopitem WHERE item_id = ?';\r\n        const [result] = await db.query(sql, [id]);\r\n\r\n        if (result.affectedRows === 0) {\r\n            return res.status(404).json({ message: 'Item not found or already deleted.' });\r\n        }\r\n\r\n        res.status(200).json({ message: 'Gift shop item permanently deleted.' });\r\n    } catch (error) {\r\n        console.error('Error hard deleting gift shop item:', error);\r\n        res.status(500).json({ message: 'Server error during hard delete.' });\r\n    }\r\n});\r\n\r\n// Soft delete a gift shop item (Admin only)\r\napp.put('/giftshopitems/:id/soft-delete', authenticateAdmin, async (req, res) => {\r\n    const { id } = req.params;\r\n\r\n    try {\r\n        const sql = 'UPDATE giftshopitem SET is_deleted = 1 WHERE item_id = ?';\r\n        await db.query(sql, [id]);\r\n        res.status(200).json({ message: 'Gift shop item marked as deleted.' });\r\n    } catch (error) {\r\n        console.error('Error soft deleting gift shop item:', error);\r\n        res.status(500).json({ message: 'Server error soft deleting gift shop item.' });\r\n    }\r\n});\r\n\r\n// Restore a gift shop item (Admin only)\r\napp.put('/giftshopitems/:id/restore', authenticateAdmin, async (req, res) => {\r\n    const { id } = req.params;\r\n\r\n    try {\r\n        const sql = 'UPDATE giftshopitem SET is_deleted = 0 WHERE item_id = ?';\r\n        await db.query(sql, [id]);\r\n        res.status(200).json({ message: 'Gift shop item restored successfully.' });\r\n    } catch (error) {\r\n        console.error('Error restoring gift shop item:', error);\r\n        res.status(500).json({ message: 'Server error restoring gift shop item.' });\r\n    }\r\n});\r\n\r\n// Get user profile\r\napp.get('/users/:id', authenticateUser, async (req, res) => {\r\n    const { id } = req.params;\r\n\r\n    // Ensure the user can only access their own profile or admin can access any\r\n    if (req.userId !== id && req.userRole !== 'admin') {\r\n        return res.status(403).json({ message: 'Access denied.' });\r\n    }\r\n\r\n    try {\r\n        const [rows] = await db.query(`\r\n            SELECT first_name AS firstName, last_name AS lastName, date_of_birth AS dateOfBirth, username, email\r\n            FROM users\r\n            WHERE user_id = ?\r\n        `, [id]);\r\n\r\n        if (rows.length === 0) {\r\n            return res.status(404).json({ message: 'User not found.' });\r\n        }\r\n\r\n        res.json(rows[0]);\r\n    } catch (error) {\r\n        console.error('Error fetching user data:', error);\r\n        res.status(500).json({ message: 'Server error fetching user data.' });\r\n    }\r\n});\r\n\r\n// Update user profile\r\napp.put('/users/:id', authenticateUser, async (req, res) => {\r\n    const { id } = req.params;\r\n    const { firstName, lastName, dateOfBirth, email } = req.body;\r\n\r\n    // Ensure the user can only update their own profile or admin can update any\r\n    if (req.userId !== id && req.userRole !== 'admin') {\r\n        return res.status(403).json({ message: 'Access denied.' });\r\n    }\r\n\r\n    try {\r\n        const sql = `\r\n            UPDATE users\r\n            SET first_name = ?,\r\n                last_name = ?,\r\n                date_of_birth = ?,\r\n                email = ?\r\n            WHERE user_id = ?\r\n        `;\r\n        const values = [firstName, lastName, dateOfBirth, email, id];\r\n\r\n        await db.query(sql, values);\r\n        res.status(200).json({ message: 'Profile updated successfully.' });\r\n    } catch (error) {\r\n        console.error('Error updating user profile:', error);\r\n        res.status(500).json({ message: 'Server error updating user profile.' });\r\n    }\r\n});\r\n\r\n// ----- CHECKOUT ENDPOINT ------------------------------------------------------------------------\r\n\r\napp.post('/checkout', authenticateUser, async (req, res) => {\r\n    const { payment_method, items } = req.body;\r\n    const user_id = req.userId; // Retrieved from the authenticateUser middleware\r\n\r\n    // Input Validation\r\n    if (!payment_method || !items || !Array.isArray(items) || items.length === 0) {\r\n        return res.status(400).json({ message: 'Invalid request. payment_method and items are required.' });\r\n    }\r\n\r\n    for (let item of items) {\r\n        if (!item.item_id || !item.quantity || item.quantity <= 0) {\r\n            return res.status(400).json({ message: 'Each item must have a valid item_id and quantity greater than 0.' });\r\n        }\r\n    }\r\n\r\n    const connection = await db.getConnection();\r\n    try {\r\n        await connection.beginTransaction();\r\n\r\n        // Fetch item details with row locking to prevent race conditions\r\n        const itemIds = items.map(item => item.item_id);\r\n        const [dbItems] = await connection.query(\r\n            `SELECT item_id, price, quantity\r\n             FROM giftshopitem\r\n             WHERE item_id IN (?) AND is_deleted = 0\r\n                 FOR UPDATE`,\r\n            [itemIds]\r\n        );\r\n\r\n        // Check if all items exist\r\n        if (dbItems.length !== items.length) {\r\n            throw new Error('One or more items do not exist or have been deleted.');\r\n        }\r\n\r\n        // Check for sufficient inventory and prepare transaction items\r\n        let calculatedSubtotal = 0;\r\n        const transactionItems = [];\r\n\r\n        for (let cartItem of items) {\r\n            const dbItem = dbItems.find(item => item.item_id === cartItem.item_id);\r\n            if (dbItem.quantity < cartItem.quantity) {\r\n                throw new Error(`Insufficient quantity for item '${dbItem.item_id}'. Available: ${dbItem.quantity}, Requested: ${cartItem.quantity}.`);\r\n            }\r\n            const itemSubtotal = parseFloat((cartItem.quantity * dbItem.price).toFixed(2));\r\n            calculatedSubtotal += itemSubtotal;\r\n            transactionItems.push({\r\n                item_id: cartItem.item_id,\r\n                quantity: cartItem.quantity,\r\n                price_at_purchase: dbItem.price,\r\n                subtotal: itemSubtotal\r\n            });\r\n        }\r\n\r\n        calculatedSubtotal = parseFloat(calculatedSubtotal.toFixed(2));\r\n        const taxRate = 0.0825; // 8.25% tax\r\n        const calculatedTax = parseFloat((calculatedSubtotal * taxRate).toFixed(2));\r\n        const calculatedTotal = parseFloat((calculatedSubtotal + calculatedTax).toFixed(2));\r\n\r\n        // Insert into transaction table\r\n        const [transactionResult] = await connection.query(\r\n            `INSERT INTO \\`transaction\\` (transaction_date, subtotal, tax, total_amount, transaction_type, user_id, payment_status)\r\n             VALUES (NOW(), ?, ?, ?, ?, ?, ?)`,\r\n            [calculatedSubtotal, calculatedTax, calculatedTotal, payment_method, user_id, 'completed']\r\n        );\r\n        const transactionId = transactionResult.insertId;\r\n\r\n        // Insert into transaction_giftshopitem table\r\n        const transactionItemsValues = transactionItems.map(item => [\r\n            transactionId,\r\n            item.item_id,\r\n            item.quantity,\r\n            item.price_at_purchase\r\n        ]);\r\n\r\n        await connection.query(\r\n            `INSERT INTO \\`transaction_giftshopitem\\` (transaction_id, item_id, quantity, price_at_purchase)\r\n             VALUES ?`,\r\n            [transactionItemsValues]\r\n        );\r\n\r\n        // Update giftshopitem quantities\r\n        for (let cartItem of items) {\r\n            await connection.query(\r\n                `UPDATE giftshopitem\r\n                 SET quantity = quantity - ?\r\n                 WHERE item_id = ?`,\r\n                [cartItem.quantity, cartItem.item_id]\r\n            );\r\n        }\r\n\r\n        // Commit the transaction\r\n        await connection.commit();\r\n\r\n        res.status(201).json({\r\n            success: true,\r\n            message: 'Checkout successful.',\r\n            transaction_id: transactionId,\r\n            total_amount: calculatedTotal\r\n        });\r\n\r\n    } catch (error) {\r\n        await connection.rollback();\r\n        console.error('Checkout Error:', error.message);\r\n        res.status(400).json({ success: false, message: error.message });\r\n    } finally {\r\n        connection.release();\r\n    }\r\n});\r\n\r\n// Reports Endpoint\r\napp.post('/reports', authenticateAdmin, async (req, res) => {\r\n    const {\r\n        report_category,\r\n        report_type,\r\n        report_period_type, // 'date_range', 'month', or 'year'\r\n        start_date,\r\n        end_date,\r\n        selected_month,\r\n        selected_year, // New field for 'year' report\r\n        item_category,\r\n        payment_method,\r\n        item_id,\r\n    } = req.body;\r\n\r\n    console.log('Received /reports request with body:', req.body); // Debug log\r\n\r\n    // Input Validation\r\n    if (!report_category || !report_type || !report_period_type) {\r\n        console.error('Validation Error: Missing required fields.');\r\n        return res.status(400).json({\r\n            message:\r\n                'report_category, report_type, and report_period_type are required.',\r\n        });\r\n    }\r\n\r\n    // Validate report_period_type and corresponding fields\r\n    if (report_period_type === 'date_range') {\r\n        if (!start_date || !end_date) {\r\n            console.error('Validation Error: Start date and end date are required.');\r\n            return res.status(400).json({\r\n                message: 'Start date and end date are required for date range reports.',\r\n            });\r\n        }\r\n        if (new Date(start_date) > new Date(end_date)) {\r\n            console.error('Validation Error: Start date is after end date.');\r\n            return res.status(400).json({ message: 'Start date cannot be after end date.' });\r\n        }\r\n    } else if (report_period_type === 'month') {\r\n        if (!selected_month) {\r\n            console.error('Validation Error: Selected month is required.');\r\n            return res.status(400).json({\r\n                message: 'Selected month is required for monthly reports.',\r\n            });\r\n        }\r\n    } else if (report_period_type === 'year') {\r\n        if (!selected_year) {\r\n            console.error('Validation Error: Selected year is required.');\r\n            return res.status(400).json({\r\n                message: 'Selected year is required for yearly reports.',\r\n            });\r\n        }\r\n    } else {\r\n        console.error('Invalid report_period_type:', report_period_type);\r\n        return res.status(400).json({ message: 'Invalid report period type.' });\r\n    }\r\n\r\n    try {\r\n        let reportData;\r\n        if (report_category === 'GiftShopReport') {\r\n            switch (report_type) {\r\n                case 'revenue':\r\n                    console.log('Generating Gift Shop Revenue Report');\r\n                    reportData = await generateGiftShopRevenueReport(\r\n                        report_period_type,\r\n                        start_date,\r\n                        end_date,\r\n                        selected_month,\r\n                        selected_year,\r\n                        item_category,\r\n                        payment_method,\r\n                        item_id\r\n                    );\r\n                    console.log('Report Data:', reportData); // Debug log\r\n                    break;\r\n                // Add other report types if needed\r\n                default:\r\n                    console.error('Invalid report type:', report_type);\r\n                    return res.status(400).json({ message: 'Invalid report type.' });\r\n            }\r\n        } else {\r\n            console.error('Invalid report category:', report_category);\r\n            return res.status(400).json({ message: 'Invalid report category.' });\r\n        }\r\n\r\n        res.status(200).json({ reportData });\r\n    } catch (error) {\r\n        console.error('Error generating report:', error); // Debug log with error details\r\n        res.status(500).json({ message: 'Server error generating report.' });\r\n    }\r\n});\r\n\r\n// Updated Function to generate Gift Shop Revenue Report with filters\r\nasync function generateGiftShopRevenueReport(\r\n    reportPeriodType,\r\n    startDate,\r\n    endDate,\r\n    selectedMonth,\r\n    selectedYear,\r\n    itemCategory,\r\n    paymentMethod,\r\n    itemId\r\n) {\r\n    let query = '';\r\n    let params = [];\r\n\r\n    if (reportPeriodType === 'date_range') {\r\n        // SQL query for date range\r\n        query = `\r\n            SELECT DATE(t.transaction_date) AS date, SUM(tgi.quantity * tgi.price_at_purchase) AS total_revenue\r\n            FROM \\`transaction\\` t\r\n                JOIN transaction_giftshopitem tgi ON t.transaction_id = tgi.transaction_id\r\n                JOIN giftshopitem gsi ON tgi.item_id = gsi.item_id\r\n            WHERE t.transaction_date >= ? AND t.transaction_date < DATE_ADD(?, INTERVAL 1 DAY)\r\n        `;\r\n        params = [startDate, endDate];\r\n    } else if (reportPeriodType === 'month') {\r\n        // SQL query for month - daily data within the selected month\r\n        query = `\r\n            SELECT DATE(t.transaction_date) AS date, SUM(tgi.quantity * tgi.price_at_purchase) AS total_revenue\r\n            FROM \\`transaction\\` t\r\n                JOIN transaction_giftshopitem tgi ON t.transaction_id = tgi.transaction_id\r\n                JOIN giftshopitem gsi ON tgi.item_id = gsi.item_id\r\n            WHERE DATE_FORMAT(t.transaction_date, '%Y-%m') = ?\r\n        `;\r\n        params = [selectedMonth];\r\n    } else if (reportPeriodType === 'year') {\r\n        // SQL query for year - monthly data within the selected year\r\n        query = `\r\n            SELECT DATE_FORMAT(t.transaction_date, '%Y-%m') AS date, SUM(tgi.quantity * tgi.price_at_purchase) AS total_revenue\r\n            FROM \\`transaction\\` t\r\n                JOIN transaction_giftshopitem tgi ON t.transaction_id = tgi.transaction_id\r\n                JOIN giftshopitem gsi ON tgi.item_id = gsi.item_id\r\n            WHERE YEAR(t.transaction_date) = ?\r\n        `;\r\n        params = [selectedYear];\r\n    } else {\r\n        throw new Error('Invalid report period type.');\r\n    }\r\n\r\n    // Apply filters if provided\r\n    if (paymentMethod) {\r\n        query += ' AND t.transaction_type = ?';\r\n        params.push(paymentMethod);\r\n    }\r\n    if (itemCategory) {\r\n        query += ' AND gsi.category = ?';\r\n        params.push(itemCategory);\r\n    }\r\n    if (itemId) {\r\n        query += ' AND tgi.item_id = ?';\r\n        params.push(itemId);\r\n    }\r\n\r\n    // Group by appropriate time period\r\n    if (reportPeriodType === 'date_range' || reportPeriodType === 'month') {\r\n        query += `\r\n            GROUP BY DATE(t.transaction_date)\r\n            ORDER BY DATE(t.transaction_date)\r\n        `;\r\n    } else if (reportPeriodType === 'year') {\r\n        query += `\r\n            GROUP BY DATE_FORMAT(t.transaction_date, '%Y-%m')\r\n            ORDER BY DATE_FORMAT(t.transaction_date, '%Y-%m')\r\n        `;\r\n    }\r\n\r\n    console.log('Executing SQL Query for Revenue Report:', query); // Debug log\r\n    console.log('With Parameters:', params); // Debug log\r\n\r\n    try {\r\n        const [rows] = await db.query(query, params);\r\n        console.log('Revenue Report Query Result:', rows); // Debug log\r\n        return rows;\r\n    } catch (error) {\r\n        console.error('Error in generateGiftShopRevenueReport:', error); // Debug log with error details\r\n        throw error;\r\n    }\r\n}\r\n// Endpoint to get all gift shop items\r\napp.get('/giftshopitems', async (req, res) => {\r\n    try {\r\n        const [rows] = await db.query('SELECT item_id, name_ FROM giftshopitem WHERE is_deleted = 0');\r\n        res.status(200).json(rows);\r\n    } catch (error) {\r\n        console.error('Error fetching gift shop items:', error);\r\n        res.status(500).json({ message: 'Server error fetching gift shop items.' });\r\n    }\r\n});\r\n\r\n// Endpoint to get all gift shop categories\r\napp.get('/giftshopcategories', async (req, res) => {\r\n    try {\r\n        const [rows] = await db.query('SELECT DISTINCT category FROM giftshopitem WHERE is_deleted = 0');\r\n        res.status(200).json(rows);\r\n    } catch (error) {\r\n        console.error('Error fetching item categories:', error);\r\n        res.status(500).json({ message: 'Server error fetching item categories.' });\r\n    }\r\n});\r\n\r\n// Endpoint to get all payment methods used in transactions\r\napp.get('/paymentmethods', async (req, res) => {\r\n    try {\r\n        const [rows] = await db.query('SELECT DISTINCT transaction_type FROM `transaction`');\r\n        res.status(200).json(rows);\r\n    } catch (error) {\r\n        console.error('Error fetching payment methods:', error);\r\n        res.status(500).json({ message: 'Server error fetching payment methods.' });\r\n    }\r\n});\r\n\r\n// ------------------------------------------------------------------------------------------------\r\n\r\n// ----- (LEO DONE) --------------------------------------------------------------------------------\r\n\r\n// ----- (MUNA) ------------------------------------------------------------------------------------\r\n\r\n// (Assuming MUNA's endpoints are already correctly implemented)\r\n// ----- (MUNA DONE) ------------------------------------------------------------------------------\r\n\r\n// ----- (TYLER) ----------------------------------------------------------------------------------\r\n\r\n// Add a new event\r\napp.post('/api/events', async (req, res) => {\r\n    const { name, description, location, status } = req.body;\r\n    try {\r\n        const [result] = await db.query(\r\n            'INSERT INTO event_ (name_, description_, location, status) VALUES (?, ?, ?, ?)',\r\n            [name, description, location, status]\r\n        )\r\n        res.json({ id: result.insertId, message: 'Event added successfully.' });\r\n    } catch (error) {\r\n        console.error('Error adding event:', error);\r\n        res.status(500).json({ message: 'Server error adding event.' });\r\n    }\r\n});\r\n\r\n// Update event information\r\napp.put('/api/events/:id', async (req, res) => {\r\n    const { id } = req.params;\r\n    const { name, description, location, status } = req.body;\r\n\r\n    const allowedStatuses = ['upcoming', 'ongoing', 'completed'];\r\n    if (!allowedStatuses.includes(status)) {\r\n        return res.status(400).json({ message: 'Invalid status value.' });\r\n    }\r\n\r\n    try {\r\n        const [result] = await db.query(\r\n            'UPDATE event_ SET name_ = ?, description_ = ?, location = ?, status = ? WHERE event_id = ?',\r\n            [name, description, location, status, id]\r\n        );\r\n\r\n        if (result.affectedRows === 0) {\r\n            return res.status(404).json({ message: 'Event not found.' });\r\n        }\r\n        res.json({ message: 'Event updated successfully.' });\r\n    }\r\n    catch (error) {\r\n        console.error('Error updating event:', error);\r\n        res.status(500).json({ message: 'Server error updating event.' });\r\n    }\r\n})\r\n\r\n// Soft delete an event\r\napp.delete('/api/events/:id', async (req, res) => {\r\n    const eventId = req.params.id;\r\n    try {\r\n        const [result] = await db.query('UPDATE event_ SET is_deleted = TRUE WHERE event_id = ?', [eventId]);\r\n        if (result.affectedRows === 0) {\r\n            return res.status(404).json({ message: 'Event not found.' });\r\n        }\r\n        res.json({ message: 'Event deleted successfully.' });\r\n    } catch (error) {\r\n        console.error('Error deleting event:', error);\r\n        res.status(500).json({ message: 'Server error deleting event.' });\r\n    }\r\n})\r\n\r\n// Fetch all non-deleted events from the database\r\napp.get('/api/events', async (req, res) => {\r\n    try {\r\n        const [result] = await db.query('SELECT * FROM event_ WHERE is_deleted = FALSE');\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error('Error fetching events:', error);\r\n        res.status(500).json({ message: 'Server error fetching events.' });\r\n    }\r\n})\r\n\r\n// Fetch the total number of members that signed up for an event\r\napp.get('/api/events/:id/members', async (req, res) => {\r\n    const eventId = req.params.id;\r\n    try {\r\n        const [result] = await db.query('SELECT * FROM membership WHERE event_id = ?', [eventId]);\r\n        res.json(result);\r\n    } catch (error) {\r\n        console.error('Error fetching members:', error);\r\n        res.status(500).json({ message: 'Server error fetching members.' });\r\n    }\r\n});\r\n\r\n// ----- (TYLER DONE) ---------------------------------------------------------------------------------\r\n\r\n// ----- (DENNIS) ---------------------------------------------------------------------------------\r\n\r\n// (Assuming DENNIS's endpoints are already correctly implemented)\r\n// ----- (DENNIS DONE) ----------------------------------------------------------------------------\r\n\r\n// Start the server\r\napp.listen(port, () => {\r\n    console.log(`Server Running on http://localhost:${port}`);\r\n});\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/server.js b/frontend/src/server.js
--- a/frontend/src/server.js	(revision 7808d082d47a93f903920b35e241664b040f1086)
+++ b/frontend/src/server.js	(date 1731235140000)
@@ -684,7 +684,7 @@
     }
 }
 // Endpoint to get all gift shop items
-app.get('/giftshopitems', async (req, res) => {
+app.get('/giftshopitemsreport', async (req, res) => {
     try {
         const [rows] = await db.query('SELECT item_id, name_ FROM giftshopitem WHERE is_deleted = 0');
         res.status(200).json(rows);
Index: frontend/src/pages/Dashboards/EventDashboard.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport '../../css/event_director.css';\r\nimport logo from '../../assets/LOGO.png';\r\nimport axios from 'axios';\r\n\r\nconst EventDirectorDashboard = () => {\r\n    const [eventCards, setEventCards] = useState([]);\r\n    const [activeTab, setActiveTab] = useState('dashboard');\r\n    const [userName, setUserName] = useState('User');\r\n    const [selectedEventId, setSelectedEventId] = useState('');\r\n    const [reportData, setReportData] = useState(null); // State to store report data\r\n    const [membersList, setMembersList] = useState([]); // State to store members list\r\n    const [isMembersModalOpen, setIsMembersModalOpen] = useState(false); // State to control members modal\r\n    const [isEventModalOpen, setIsEventModalOpen] = useState(false); // State to control event modal\r\n    const [selectedEvent, setSelectedEvent] = useState({ id: '', name: '', description: '', location: '', status: 'upcoming' }); // State to store selected event for editing\r\n\r\n    useEffect(() => {\r\n        // Fetch event data\r\n        const fetchEventData = async () => {\r\n            try {\r\n                const response = await axios.get('${process.env.REACT_APP_API_URL}/api/events'); // replace with http://${process.env.REACT_APP_API_URL}/api/events\r\n                if (response.status === 200) {\r\n                    const formattedEvents = response.data.map(event => ({\r\n                        id: event.event_id,\r\n                        name: event.name_,\r\n                        description: event.description_,\r\n                        location: event.location,\r\n                        status: event.status,\r\n                        date: event.date\r\n                    }));\r\n                    setEventCards(formattedEvents);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching events: ', error);\r\n            }\r\n        };\r\n        fetchEventData();\r\n    }, []);\r\n\r\n    const addEventCard = () => {\r\n        setSelectedEvent({ id: '', name: '', description: '', location: '', status: 'upcoming' });\r\n        setIsEventModalOpen(true);\r\n    };\r\n\r\n    const openEditModal = (event) => {\r\n        setSelectedEvent(event);\r\n        setIsEventModalOpen(true);\r\n    };\r\n\r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setSelectedEvent({ ...selectedEvent, [name]: value });\r\n    };\r\n\r\n    const saveEventChanges = async () => {\r\n        try {\r\n            if (selectedEvent.id) {\r\n                // Update existing event\r\n                //const response = await axios.put(`http://${process.env.REACT_APP_API_URL}/api/events/${selectedEvent.id}`, selectedEvent);\r\n                const response = await axios.put(`${process.env.REACT_APP_API_URL}/api/events/${selectedEvent.id}`, selectedEvent);\r\n                if (response.status === 200) {\r\n                    setEventCards(eventCards.map(event => event.id === selectedEvent.id ? selectedEvent : event));\r\n                } else {\r\n                    console.error('Failed to update event');\r\n                }\r\n            } else {\r\n                // Add new event\r\n                //const response = await axios.post('http://${process.env.REACT_APP_API_URL}/api/events', selectedEvent);\r\n                const response = await axios.post('${process.env.REACT_APP_API_URL}/api/events', selectedEvent);\r\n                if (response.status === 200) {\r\n                    setEventCards([...eventCards, { ...selectedEvent, id: response.data.id }]);\r\n                } else {\r\n                    console.error('Failed to add event');\r\n                }\r\n            }\r\n            setSelectedEvent({ id: '', name: '', description: '', location: '', status: 'upcoming' });\r\n            setIsEventModalOpen(false);\r\n        } catch (error) {\r\n            console.error('Error saving event: ', error);\r\n        }\r\n    };\r\n\r\n    const removeEventCard = async (id) => {\r\n        try {\r\n            const response = await axios.delete(`${process.env.REACT_APP_API_URL}/api/events/${id}`); // replace with http://${process.env.REACT_APP_API_URL}/api/events/${id}\r\n            if (response.status === 200) {\r\n                setEventCards(eventCards.filter(event => event.id !== id));\r\n            }\r\n            else {\r\n                console.error('Failed to delete event');\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.error('Error deleting event: ', error);\r\n        }\r\n    };\r\n\r\n    const handleTabClick = (tab) => {\r\n        setActiveTab(tab);\r\n    };\r\n\r\n    const viewMembers = async (eventId) => {\r\n        try {\r\n            //const response = await axios.get(`http://${process.env.REACT_APP_API_URL}/api/events/${eventId}/members`);\r\n            const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/events/${eventId}/members`);\r\n            if (response.status === 200) {\r\n                setMembersList(response.data);\r\n            } else {\r\n                console.error('Failed to fetch members');\r\n                setMembersList([]);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching members: ', error);\r\n            setMembersList([]);\r\n        } finally {\r\n            setIsMembersModalOpen(true);\r\n        }\r\n    };\r\n\r\n    const handleCloseMembersModal = () => {\r\n        setIsMembersModalOpen(false);\r\n        setMembersList([]);\r\n    };\r\n\r\n    // Get current date\r\n    const currentDate = new Date();\r\n\r\n    // Separate active and archived events\r\n    const activeEvents = eventCards.filter(event => new Date(event.date) >= currentDate);\r\n    const archivedEvents = eventCards.filter(event => new Date(event.date) < currentDate);\r\n\r\n    // Handle event selection for reports\r\n    const handleEventSelection = (e) => {\r\n        setSelectedEventId(e.target.value);\r\n    };\r\n\r\n    // Simulate fetching report data for a specific event\r\n    const fetchReport = (eventId) => {\r\n        if (!eventId) {\r\n            alert('Please select an event.');\r\n            return;\r\n        }\r\n\r\n        // Dummy report data\r\n        const dummyReportData = {\r\n            totalMembers: Math.floor(Math.random() * 100),\r\n            totalRevenue: (Math.random() * 10000).toFixed(2)\r\n        };\r\n\r\n        // Simulate report data fetching\r\n        setReportData(dummyReportData);\r\n    };\r\n\r\n    return (\r\n        <div className=\"dashboard-container\">\r\n            {/* Sidebar */}\r\n            <div className=\"sidebar\">\r\n                <a href=\"/\" className=\"logo\">\r\n                    <img src={logo} alt=\"logo\" />\r\n                </a>\r\n\r\n                <a\r\n                    href=\"#\"\r\n                    className={`dashboard ${activeTab === 'dashboard' ? 'active' : ''}`}\r\n                    onClick={() => handleTabClick('dashboard')}\r\n                >\r\n                    Events\r\n                </a>\r\n                <a\r\n                    href=\"#\"\r\n                    className={`reports ${activeTab === 'reports' ? 'active' : ''}`}\r\n                    onClick={() => handleTabClick('reports')}\r\n                >\r\n                    Event Reports\r\n                </a>\r\n                <a\r\n                    href=\"/\"\r\n                    className={`logout ${activeTab === 'logout' ? 'active' : ''}`}\r\n                    onClick={() => handleTabClick('logout')}\r\n                >\r\n                    Logout\r\n                </a>\r\n            </div>\r\n\r\n            {/* Main Content */}\r\n            <div className=\"main-content\">\r\n                {/* Greeting Section */}\r\n                <div className=\"greeting-container\">\r\n                    <div className=\"greeting\">\r\n                        Hello, {userName}\r\n                    </div>\r\n                </div>\r\n\r\n                {activeTab === 'dashboard' && (\r\n                    <div className=\"events\">\r\n                        <h3>Active Events</h3>\r\n                        <button className=\"add_event\" onClick={addEventCard}>Add Event</button>\r\n\r\n                        {/* Event Cards */}\r\n                        <div className=\"event-cards-container\">\r\n                            {eventCards.map((event) => (\r\n                                <div key={event.id} className=\"event-card\">\r\n                                    <p>{event.name}</p>\r\n                                    <button onClick={() => openEditModal(event)}>Edit</button>\r\n                                    <button onClick={() => removeEventCard(event.id)} className=\"Remove\">Remove</button>\r\n                                    <button onClick={() => viewMembers(event.id)}>View Members</button>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n\r\n                        {/* Event Modal */}\r\n                        {isEventModalOpen && (\r\n                            <div className=\"modal\">\r\n                                <div className=\"modal-content\">\r\n                                    <h3>{selectedEvent.id ? 'Edit Event' : 'Add Event'}</h3>\r\n                                    <label>\r\n                                        Name:\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            name=\"name\"\r\n                                            value={selectedEvent.name || ''}\r\n                                            onChange={handleInputChange}\r\n                                        />\r\n                                    </label>\r\n                                    <label>\r\n                                        Description:\r\n                                        <textarea\r\n                                            name=\"description\"\r\n                                            value={selectedEvent.description || ''}\r\n                                            onChange={handleInputChange}\r\n                                        />\r\n                                    </label>\r\n                                    <label>\r\n                                        Location:\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            name=\"location\"\r\n                                            value={selectedEvent.location || ''}\r\n                                            onChange={handleInputChange}\r\n                                        />\r\n                                    </label>\r\n                                    <label>\r\n                                        Status:\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            name=\"status\"\r\n                                            value={selectedEvent.status || ''}\r\n                                            onChange={handleInputChange}\r\n                                        />\r\n                                    </label>\r\n                                    <button onClick={saveEventChanges}>{selectedEvent.id ? 'Save Changes' : 'Submit'}</button>\r\n                                    <button onClick={() => setIsEventModalOpen(false)}>Cancel</button>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n\r\n                        {/* Archive Section */}\r\n                        <div className=\"archive\">\r\n                            <h3>Archived Events</h3>\r\n                            <div className=\"event-cards-container\">\r\n                                {archivedEvents.map((event) => (\r\n                                    <div key={event.id} className=\"event-card\">\r\n                                        <p>Archived Event Date: {new Date(event.date).toDateString()}</p>\r\n                                        <button onClick={() => removeEventCard(event.id)} className=\"Remove\">Remove</button>\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n                {/* Members Modal */}\r\n                {isMembersModalOpen && (\r\n                    <div className=\"modal\">\r\n                        <div className=\"modal-content\">\r\n                            <h3>Members Signed Up for Event</h3>\r\n                            <ul>\r\n                                {membersList.length > 0 ? (\r\n                                    membersList.map(member => (\r\n                                        <li key={member.id}>{member.name}</li>\r\n                                    ))\r\n                                ) : (\r\n                                    <p>No members signed up.</p>\r\n                                )}\r\n                            </ul>\r\n                            <button onClick={handleCloseMembersModal}>Close</button>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n                {activeTab === 'reports' && (\r\n                    <div className=\"reports-section\">\r\n                        <h3>Generate Event Reports</h3>\r\n\r\n                        {/* Dropdown to select an event */}\r\n                        <label htmlFor=\"eventSelect\">Select Event:</label>\r\n                        <select id=\"eventSelect\" value={selectedEventId} onChange={handleEventSelection}>\r\n                            <option value=\"\">-- Select an Event --</option>\r\n                            {eventCards.map(event => (\r\n                                <option key={event.id} value={event.id}>\r\n                                    {event.name} (Date: {new Date(event.date).toDateString()})\r\n                                </option>\r\n                            ))}\r\n                        </select>\r\n\r\n                        {/* Button to generate the report */}\r\n                        <button onClick={() => fetchReport(selectedEventId)}>Generate Report</button>\r\n\r\n                        {/* Display the report */}\r\n                        {reportData && (\r\n                            <div className=\"report\">\r\n                                <h4>Report for Event:</h4>\r\n                                <p><strong>Total Members Signed Up:</strong> {reportData.totalMembers}</p>\r\n                                <p><strong>Total Revenue Generated:</strong> ${reportData.totalRevenue}</p>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EventDirectorDashboard;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/pages/Dashboards/EventDashboard.jsx b/frontend/src/pages/Dashboards/EventDashboard.jsx
--- a/frontend/src/pages/Dashboards/EventDashboard.jsx	(revision 7808d082d47a93f903920b35e241664b040f1086)
+++ b/frontend/src/pages/Dashboards/EventDashboard.jsx	(date 1731235140000)
@@ -1,4 +1,4 @@
-import React, { useState, useEffect } from 'react';
+import React, {useState, useEffect} from 'react';
 import '../../css/event_director.css';
 import logo from '../../assets/LOGO.png';
 import axios from 'axios';
@@ -12,13 +12,19 @@
     const [membersList, setMembersList] = useState([]); // State to store members list
     const [isMembersModalOpen, setIsMembersModalOpen] = useState(false); // State to control members modal
     const [isEventModalOpen, setIsEventModalOpen] = useState(false); // State to control event modal
-    const [selectedEvent, setSelectedEvent] = useState({ id: '', name: '', description: '', location: '', status: 'upcoming' }); // State to store selected event for editing
+    const [selectedEvent, setSelectedEvent] = useState({
+        id: '',
+        name: '',
+        description: '',
+        location: '',
+        status: 'upcoming'
+    }); // State to store selected event for editing
 
     useEffect(() => {
         // Fetch event data
         const fetchEventData = async () => {
             try {
-                const response = await axios.get('${process.env.REACT_APP_API_URL}/api/events'); // replace with http://${process.env.REACT_APP_API_URL}/api/events
+                const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/events`); // replace with http://${process.env.REACT_APP_API_URL}/api/events
                 if (response.status === 200) {
                     const formattedEvents = response.data.map(event => ({
                         id: event.event_id,
@@ -38,7 +44,7 @@
     }, []);
 
     const addEventCard = () => {
-        setSelectedEvent({ id: '', name: '', description: '', location: '', status: 'upcoming' });
+        setSelectedEvent({id: '', name: '', description: '', location: '', status: 'upcoming'});
         setIsEventModalOpen(true);
     };
 
@@ -48,16 +54,17 @@
     };
 
     const handleInputChange = (e) => {
-        const { name, value } = e.target;
-        setSelectedEvent({ ...selectedEvent, [name]: value });
+        const {name, value} = e.target;
+        setSelectedEvent({...selectedEvent, [name]: value});
     };
 
     const saveEventChanges = async () => {
         try {
+            let response; // Declare the variable once
+
             if (selectedEvent.id) {
                 // Update existing event
-                //const response = await axios.put(`http://${process.env.REACT_APP_API_URL}/api/events/${selectedEvent.id}`, selectedEvent);
-                const response = await axios.put(`${process.env.REACT_APP_API_URL}/api/events/${selectedEvent.id}`, selectedEvent);
+                response = await axios.put(`${process.env.REACT_APP_API_URL}/api/events/${selectedEvent.id}`, selectedEvent);
                 if (response.status === 200) {
                     setEventCards(eventCards.map(event => event.id === selectedEvent.id ? selectedEvent : event));
                 } else {
@@ -65,15 +72,15 @@
                 }
             } else {
                 // Add new event
-                //const response = await axios.post('http://${process.env.REACT_APP_API_URL}/api/events', selectedEvent);
-                const response = await axios.post('${process.env.REACT_APP_API_URL}/api/events', selectedEvent);
+                response = await axios.post(`${process.env.REACT_APP_API_URL}/api/events`, selectedEvent);
                 if (response.status === 200) {
-                    setEventCards([...eventCards, { ...selectedEvent, id: response.data.id }]);
+                    setEventCards([...eventCards, {...selectedEvent, id: response.data.id}]);
                 } else {
                     console.error('Failed to add event');
                 }
             }
-            setSelectedEvent({ id: '', name: '', description: '', location: '', status: 'upcoming' });
+
+            setSelectedEvent({id: '', name: '', description: '', location: '', status: 'upcoming'});
             setIsEventModalOpen(false);
         } catch (error) {
             console.error('Error saving event: ', error);
@@ -85,12 +92,10 @@
             const response = await axios.delete(`${process.env.REACT_APP_API_URL}/api/events/${id}`); // replace with http://${process.env.REACT_APP_API_URL}/api/events/${id}
             if (response.status === 200) {
                 setEventCards(eventCards.filter(event => event.id !== id));
-            }
-            else {
+            } else {
                 console.error('Failed to delete event');
             }
-        }
-        catch (error) {
+        } catch (error) {
             console.error('Error deleting event: ', error);
         }
     };
@@ -156,7 +161,7 @@
             {/* Sidebar */}
             <div className="sidebar">
                 <a href="/" className="logo">
-                    <img src={logo} alt="logo" />
+                    <img src={logo} alt="logo"/>
                 </a>
 
                 <a
@@ -248,7 +253,8 @@
                                             onChange={handleInputChange}
                                         />
                                     </label>
-                                    <button onClick={saveEventChanges}>{selectedEvent.id ? 'Save Changes' : 'Submit'}</button>
+                                    <button
+                                        onClick={saveEventChanges}>{selectedEvent.id ? 'Save Changes' : 'Submit'}</button>
                                     <button onClick={() => setIsEventModalOpen(false)}>Cancel</button>
                                 </div>
                             </div>
@@ -261,7 +267,8 @@
                                 {archivedEvents.map((event) => (
                                     <div key={event.id} className="event-card">
                                         <p>Archived Event Date: {new Date(event.date).toDateString()}</p>
-                                        <button onClick={() => removeEventCard(event.id)} className="Remove">Remove</button>
+                                        <button onClick={() => removeEventCard(event.id)} className="Remove">Remove
+                                        </button>
                                     </div>
                                 ))}
                             </div>
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"3f424dd9-3ec0-47f1-b65a-6f298c371623\" name=\"Changes\" comment=\"Update api url\">\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/components/GiftShopAdmin.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/components/GiftShopAdmin.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/components/GiftShopForm.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/components/GiftShopForm.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/components/Login.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/components/Login.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/components/MFAShopCard.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/components/MFAShopCard.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/components/MFAShopModalUser.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/components/MFAShopModalUser.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/components/Register.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/components/Register.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/components/Verify.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/components/Verify.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/pages/Checkout.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/pages/Checkout.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/pages/Dashboards/AdminDashboard.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/pages/Dashboards/AdminDashboard.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/pages/Dashboards/EventDashboard.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/pages/Dashboards/EventDashboard.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/pages/MFAShop.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/pages/MFAShop.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/pages/ProfilePage.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/pages/ProfilePage.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/pages/Report.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/pages/Report.jsx\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"JavaScript File\" />\r\n        <option value=\"TypeScript JSX File\" />\r\n        <option value=\"JSX File\" />\r\n        <option value=\"CSS File\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;leo2971998&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/Ephimoon/MuseumDB.git&quot;,\r\n    &quot;accountId&quot;: &quot;00f8a867-6507-43b0-82ad-48f342da4666&quot;\r\n  },\r\n  &quot;recentNewPullRequestHead&quot;: {\r\n    &quot;server&quot;: {\r\n      &quot;useHttp&quot;: false,\r\n      &quot;host&quot;: &quot;github.com&quot;,\r\n      &quot;port&quot;: null,\r\n      &quot;suffix&quot;: null\r\n    },\r\n    &quot;owner&quot;: &quot;Ephimoon&quot;,\r\n    &quot;repository&quot;: &quot;MuseumDB&quot;\r\n  }\r\n}</component>\r\n  <component name=\"PackageJsonUpdateNotifier\">\r\n    <dismissed value=\"$PROJECT_DIR$/frontend/package.json\" />\r\n    <dismissed value=\"$PROJECT_DIR$/package.json\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 5\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2ngMmHmv86bcVYIUFLyKS9H1wUv\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;ASKED_SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;Node.js.HomeNavBar.jsx.executor&quot;: &quot;Run&quot;,\r\n    &quot;Node.js.Register.jsx.executor&quot;: &quot;Run&quot;,\r\n    &quot;Node.js.server.js.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\r\n    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,\r\n    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;E:/Projects/MuseumDB/frontend/package.json&quot;,\r\n    &quot;list.type.of.created.stylesheet&quot;: &quot;CSS&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;npm.npm start.executor&quot;: &quot;Run&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.lookFeel&quot;,\r\n    &quot;ts.external.directory.path&quot;: &quot;C:\\\\Program Files\\\\JetBrains\\\\IntelliJ IDEA 2023.2.2\\\\plugins\\\\javascript-plugin\\\\jsLanguageServicesImpl\\\\external&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"E:\\Projects\\MuseumDB\\frontend\\\" />\r\n      <recent name=\"E:\\Projects\\MuseumDB\\frontend\\src\\pages\\\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Node.js.server.js\">\r\n    <configuration default=\"true\" type=\"AZURE_FUNCTION_SUPPORT\" factoryName=\"Run Functions\">\r\n      <option name=\"appName\" />\r\n      <option name=\"appServicePlanName\" />\r\n      <option name=\"appServicePlanResourceGroup\" />\r\n      <option name=\"appSettingsKey\" value=\"3ac96a00-1fd8-4bfb-ab7b-e01d81a35e58\" />\r\n      <option name=\"artifact\" />\r\n      <option name=\"debugOptions\" />\r\n      <option name=\"deployment\" />\r\n      <option name=\"deploymentStagingDirectoryPath\" />\r\n      <option name=\"funcPath\" />\r\n      <option name=\"functionHostArguments\" />\r\n      <option name=\"hostJsonPath\" />\r\n      <option name=\"insightsName\" />\r\n      <option name=\"instrumentationKey\" />\r\n      <option name=\"javaVersion\" />\r\n      <option name=\"localSettingsJsonPath\" />\r\n      <option name=\"moduleName\" />\r\n      <option name=\"os\" />\r\n      <option name=\"pricingTier\" />\r\n      <option name=\"providerMap\">\r\n        <map />\r\n      </option>\r\n      <option name=\"region\" />\r\n      <option name=\"resourceGroup\" />\r\n      <option name=\"stagingFolder\" />\r\n      <option name=\"subscription\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Compound.Run server + client\" />\r\n      <item itemvalue=\"Node.js.server.js\" />\r\n      <item itemvalue=\"npm.npm start\" />\r\n    </list>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-jdk-9823dce3aa75-28b599e66164-intellij.indexing.shared.core-IU-242.23339.11\" />\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-5c90d61e3bab-JavaScript-IU-242.23339.11\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"3f424dd9-3ec0-47f1-b65a-6f298c371623\" name=\"Changes\" comment=\"\" />\r\n      <created>1729390425622</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1729390425622</updated>\r\n      <workItem from=\"1729390431772\" duration=\"4928000\" />\r\n      <workItem from=\"1729721588846\" duration=\"1031000\" />\r\n      <workItem from=\"1729981775513\" duration=\"30000\" />\r\n      <workItem from=\"1729981831779\" duration=\"6833000\" />\r\n      <workItem from=\"1730013036729\" duration=\"4227000\" />\r\n      <workItem from=\"1730064938056\" duration=\"16596000\" />\r\n      <workItem from=\"1730154909867\" duration=\"2462000\" />\r\n      <workItem from=\"1730173828488\" duration=\"12189000\" />\r\n      <workItem from=\"1730232149375\" duration=\"3398000\" />\r\n      <workItem from=\"1730257006877\" duration=\"4239000\" />\r\n      <workItem from=\"1730329647832\" duration=\"1764000\" />\r\n      <workItem from=\"1730412608407\" duration=\"145000\" />\r\n      <workItem from=\"1730606829651\" duration=\"1712000\" />\r\n      <workItem from=\"1730609990511\" duration=\"13250000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Updated server.js\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730190575521</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730190575521</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Update api url\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730261657195</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730261657195</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"3\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Updated server.js\" />\r\n    <MESSAGE value=\"Update api url\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Update api url\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" type=\"javascript\">\r\n          <url>file://$PROJECT_DIR$/frontend/src/components/Logout.jsx</url>\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 7808d082d47a93f903920b35e241664b040f1086)
+++ b/.idea/workspace.xml	(date 1731235140000)
@@ -5,19 +5,9 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="3f424dd9-3ec0-47f1-b65a-6f298c371623" name="Changes" comment="Update api url">
-      <change beforePath="$PROJECT_DIR$/frontend/src/components/GiftShopAdmin.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/components/GiftShopAdmin.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/components/GiftShopForm.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/components/GiftShopForm.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/components/Login.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/components/Login.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/components/MFAShopCard.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/components/MFAShopCard.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/components/MFAShopModalUser.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/components/MFAShopModalUser.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/components/Register.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/components/Register.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/components/Verify.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/components/Verify.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/pages/Checkout.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/pages/Checkout.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/pages/Dashboards/AdminDashboard.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/pages/Dashboards/AdminDashboard.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/frontend/src/pages/Dashboards/EventDashboard.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/pages/Dashboards/EventDashboard.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/pages/MFAShop.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/pages/MFAShop.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/pages/ProfilePage.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/pages/ProfilePage.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/pages/Report.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/pages/Report.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/frontend/src/server.js" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/server.js" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -170,6 +160,7 @@
       <workItem from="1730412608407" duration="145000" />
       <workItem from="1730606829651" duration="1712000" />
       <workItem from="1730609990511" duration="13250000" />
+      <workItem from="1730686100162" duration="8000" />
     </task>
     <task id="LOCAL-00001" summary="Updated server.js">
       <option name="closed" value="true" />
