Index: frontend/src/css/event_director.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>    .dashboard-container {\r\n        display: flex;\r\n        font-family: Arial, sans-serif;\r\n        margin: 0;\r\n        padding: 0;\r\n        background-color: white;\r\n    }\r\n      \r\n\r\n    /* Styling for the sidebar */\r\n    .sidebar {\r\n        display: flex;             \r\n        flex-direction: column;   \r\n        height: 100vh;               \r\n        width: 250px;    \r\n        background-color: black;     \r\n        padding: 20px;\r\n        align-items: center;\r\n        box-sizing: border-box;           \r\n    }\r\n\r\n\r\n    .sidebar a {\r\n        text-decoration: none;\r\n        color: white;\r\n        margin-bottom: 20px;\r\n        font-size: 18px;\r\n        text-align: center;\r\n        font-weight: bold;\r\n    }\r\n\r\n    .sidebar a.active {\r\n        text-decoration: underline;\r\n        color: white;\r\n    }\r\n\r\n    .sidebar a:hover {\r\n        color: #d34a4a;\r\n    }\r\n\r\n    /* Styling for the logout button */\r\n    .logout {\r\n        /*\r\n        text-decoration: none;\r\n        color: white;\r\n        font-size: 18px;\r\n        padding: 10px 15px;\r\n        background-color: #e74c3c;     \r\n        text-align: center;\r\n        border-radius: 5px;\r\n        */\r\n        margin-top: auto;\r\n    }\r\n\r\n    .main-content {\r\n        padding: 20px;\r\n        overflow: auto;\r\n        height: 100vh;\r\n        box-sizing: border-box;\r\n        width: 100%;\r\n       /* max-width: calc(100%-250px) */\r\n    }\r\n\r\n   .greeting-container {\r\n        display: flex;\r\n        justify-content: flex-end;\r\n        width: 100%;\r\n    }\r\n\r\n    .greeting {\r\n        font-size: 18px;\r\n        font-weight: bold;\r\n    }\r\n\r\n    .event-cards-container {\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n        overflow: hidden;\r\n        gap: 35px;\r\n    }\r\n\r\n    .add_event {\r\n        color: white;\r\n        background-color: rgb(158, 227, 54);\r\n        border-radius: 5px;\r\n        font-size: 15px;\r\n        border: none;\r\n        padding-top: 5px;\r\n        padding-bottom: 5px;\r\n        padding-left: 25px;\r\n        padding-right: 25px;\r\n        margin-bottom: 10px;\r\n    }\r\n\r\n    .event-card {\r\n        border: 1px solid black;\r\n        padding: 20px;\r\n        display: inline-block;\r\n        width: 225px;\r\n        height: 225px;\r\n        margin-right: 20px;\r\n        margin-bottom: 20px;\r\n        border-radius: 5px;\r\n        display: flex;\r\n        flex-direction: row;\r\n        align-items: flex-end;\r\n    }\r\n\r\n    .event-card button {\r\n        display: block;\r\n        margin: 10px;\r\n        border: none;\r\n        border-radius: 5px;\r\n        background-color: white;\r\n        text-decoration: underline;\r\n    }\r\n\r\n    .Remove {\r\n        color: red;\r\n    }\r\n\r\n    button {\r\n        cursor: pointer;\r\n    }\r\n    \r\n    .modal {\r\n        position: fixed;\r\n        top: 0;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 100%;\r\n        background-color: rgba(0, 0, 0, 0.5);\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n    }\r\n\r\n    .modal-content {\r\n        background-color: white;\r\n        padding: 20px;\r\n        border-radius: 5px;\r\n        height: 400px;\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n\r\n    .modal-content h3 {\r\n        margin-bottom: 20px;\r\n    }\r\n\r\n    .modal-content label {\r\n        display: inline-block;\r\n        width: 45%;\r\n        margin-bottom: 10px;\r\n        vertical-align: top;\r\n    }\r\n\r\n    .modal-content input,\r\n    .modal-content textarea {\r\n        width: 100%;\r\n        padding: 5px;\r\n        box-sizing: border-box;\r\n        margin-bottom: 10px;\r\n    }\r\n\r\n    .modal-content button {\r\n        background-color: rgb(158, 227, 54);\r\n        color: white;\r\n        border: none;\r\n        border-radius: 5px;\r\n        padding: 5px;\r\n        cursor: pointer;\r\n        margin: 5px;\r\n    }\r\n\r\n    /* Make the cancel button white*/\r\n    .modal-content button:nth-last-child(1) {\r\n        background-color: white;\r\n        color: black;\r\n    }
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/css/event_director.css b/frontend/src/css/event_director.css
--- a/frontend/src/css/event_director.css	(revision be7a189a6dd3991950fbb26c832d8f9769c55e80)
+++ b/frontend/src/css/event_director.css	(date 1731386536000)
@@ -1,180 +1,187 @@
-    .dashboard-container {
-        display: flex;
-        font-family: Arial, sans-serif;
-        margin: 0;
-        padding: 0;
-        background-color: white;
-    }
-      
+.dashboard-container {
+    display: flex;
+    font-family: Arial, sans-serif;
+    margin: 0;
+    padding: 0;
+    background-color: white;
+}
+
 
-    /* Styling for the sidebar */
-    .sidebar {
-        display: flex;             
-        flex-direction: column;   
-        height: 100vh;               
-        width: 250px;    
-        background-color: black;     
-        padding: 20px;
-        align-items: center;
-        box-sizing: border-box;           
-    }
+/* Styling for the sidebar */
+.sidebar {
+    display: flex;
+    flex-direction: column;
+    height: 100vh;
+    width: 250px;
+    background-color: black;
+    padding: 20px;
+    align-items: center;
+    box-sizing: border-box;
+}
 
 
-    .sidebar a {
-        text-decoration: none;
-        color: white;
-        margin-bottom: 20px;
-        font-size: 18px;
-        text-align: center;
-        font-weight: bold;
-    }
+.sidebar a {
+    text-decoration: none;
+    color: white;
+    margin-bottom: 20px;
+    font-size: 18px;
+    text-align: center;
+    font-weight: bold;
+}
 
-    .sidebar a.active {
-        text-decoration: underline;
-        color: white;
-    }
+.sidebar a.active {
+    text-decoration: underline;
+    color: white;
+}
 
-    .sidebar a:hover {
-        color: #d34a4a;
-    }
+.sidebar a:hover {
+    color: #d34a4a;
+}
 
-    /* Styling for the logout button */
-    .logout {
-        /*
-        text-decoration: none;
-        color: white;
-        font-size: 18px;
-        padding: 10px 15px;
-        background-color: #e74c3c;     
-        text-align: center;
-        border-radius: 5px;
-        */
-        margin-top: auto;
-    }
+/* Styling for the logout button */
+.logout {
+    /*
+    text-decoration: none;
+    color: white;
+    font-size: 18px;
+    padding: 10px 15px;
+    background-color: #e74c3c;
+    text-align: center;
+    border-radius: 5px;
+    */
+    margin-top: auto;
+}
 
-    .main-content {
-        padding: 20px;
-        overflow: auto;
-        height: 100vh;
-        box-sizing: border-box;
-        width: 100%;
-       /* max-width: calc(100%-250px) */
-    }
+.main-content {
+    padding: 20px;
+    overflow: auto;
+    height: 100vh;
+    box-sizing: border-box;
+    width: 100%;
+    /* max-width: calc(100%-250px) */
+}
 
-   .greeting-container {
-        display: flex;
-        justify-content: flex-end;
-        width: 100%;
-    }
+.greeting-container {
+    display: flex;
+    justify-content: flex-end;
+    width: 100%;
+}
 
-    .greeting {
-        font-size: 18px;
-        font-weight: bold;
-    }
+.greeting {
+    font-size: 18px;
+    font-weight: bold;
+}
 
-    .event-cards-container {
-        display: flex;
-        flex-wrap: wrap;
-        overflow: hidden;
-        gap: 35px;
-    }
+.event-cards-container {
+    display: flex;
+    flex-wrap: wrap;
+    overflow: hidden;
+    gap: 35px;
+}
 
-    .add_event {
-        color: white;
-        background-color: rgb(158, 227, 54);
-        border-radius: 5px;
-        font-size: 15px;
-        border: none;
-        padding-top: 5px;
-        padding-bottom: 5px;
-        padding-left: 25px;
-        padding-right: 25px;
-        margin-bottom: 10px;
-    }
+.add_event {
+    color: white;
+    background-color: rgb(158, 227, 54);
+    border-radius: 5px;
+    font-size: 15px;
+    border: none;
+    padding-top: 5px;
+    padding-bottom: 5px;
+    padding-left: 25px;
+    padding-right: 25px;
+    margin-bottom: 10px;
+}
 
-    .event-card {
-        border: 1px solid black;
-        padding: 20px;
-        display: inline-block;
-        width: 225px;
-        height: 225px;
-        margin-right: 20px;
-        margin-bottom: 20px;
-        border-radius: 5px;
-        display: flex;
-        flex-direction: row;
-        align-items: flex-end;
-    }
+.event-card {
+    border: 1px solid black;
+    padding: 20px;
+    display: inline-block;
+    width: 225px;
+    height: 225px;
+    margin-right: 20px;
+    margin-bottom: 20px;
+    border-radius: 5px;
+    display: flex;
+    flex-direction: column;
+    align-items: space-between;
+}
+
+.event-card .event-name {
+    font-weight: bold;
+    margin-bottom: auto;
+}
 
-    .event-card button {
-        display: block;
-        margin: 10px;
-        border: none;
-        border-radius: 5px;
-        background-color: white;
-        text-decoration: underline;
-    }
+.event-card button {
+    display: flex;
+    flex-direction: column;
+    align-items: flex-start;
+    margin: 10px;
+    border: none;
+    border-radius: 5px;
+    background-color: white;
+    text-decoration: underline;
+}
 
-    .Remove {
-        color: red;
-    }
+.Remove {
+    color: red;
+}
 
-    button {
-        cursor: pointer;
-    }
-    
-    .modal {
-        position: fixed;
-        top: 0;
-        left: 0;
-        width: 100%;
-        height: 100%;
-        background-color: rgba(0, 0, 0, 0.5);
-        display: flex;
-        align-items: center;
-        justify-content: center;
-    }
+button {
+    cursor: pointer;
+}
+
+.modal {
+    position: fixed;
+    top: 0;
+    left: 0;
+    width: 100%;
+    height: 100%;
+    background-color: rgba(0, 0, 0, 0.5);
+    display: flex;
+    align-items: center;
+    justify-content: center;
+}
 
-    .modal-content {
-        background-color: white;
-        padding: 20px;
-        border-radius: 5px;
-        height: 400px;
-        display: flex;
-        flex-direction: column;
-    }
+.modal-content {
+    background-color: white;
+    padding: 20px;
+    border-radius: 5px;
+    height: 400px;
+    display: flex;
+    flex-direction: column;
+}
 
-    .modal-content h3 {
-        margin-bottom: 20px;
-    }
+.modal-content h3 {
+    margin-bottom: 20px;
+}
 
-    .modal-content label {
-        display: inline-block;
-        width: 45%;
-        margin-bottom: 10px;
-        vertical-align: top;
-    }
+.modal-content label {
+    display: inline-block;
+    width: 45%;
+    margin-bottom: 10px;
+    vertical-align: top;
+}
 
-    .modal-content input,
-    .modal-content textarea {
-        width: 100%;
-        padding: 5px;
-        box-sizing: border-box;
-        margin-bottom: 10px;
-    }
+.modal-content input,
+.modal-content textarea {
+    width: 100%;
+    padding: 5px;
+    box-sizing: border-box;
+    margin-bottom: 10px;
+}
 
-    .modal-content button {
-        background-color: rgb(158, 227, 54);
-        color: white;
-        border: none;
-        border-radius: 5px;
-        padding: 5px;
-        cursor: pointer;
-        margin: 5px;
-    }
+.modal-content button {
+    background-color: rgb(158, 227, 54);
+    color: white;
+    border: none;
+    border-radius: 5px;
+    padding: 5px;
+    cursor: pointer;
+    margin: 5px;
+}
 
-    /* Make the cancel button white*/
-    .modal-content button:nth-last-child(1) {
-        background-color: white;
-        color: black;
-    }
\ No newline at end of file
+/* Make the cancel button white*/
+.modal-content button:nth-last-child(1) {
+    background-color: white;
+    color: black;
+}
Index: frontend/src/pages/ExhibitionsAndEvents.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport HomeNavBar from '../components/HomeNavBar';\r\nimport ExhibitionImage from '../assets/exhibitions.png';\r\nimport { ExhibitionsCardUser, ExhibitionModalUser } from '../components/ExhibitionsCardUser.jsx'; // Importing both components\r\nimport '../css/ExhibitionsAndEvents.css';\r\nimport axios from 'axios';\r\n\r\nconst ExhibitionsAndEvents = () => {\r\n\r\n    const exhibitions = [\r\n        /*{\r\n            id: 1,\r\n            image: \"https://placehold.jp/500x500.png\",\r\n            name: 'Hockney-Van Gogh: The Joy of Nature',\r\n            date_start: 'Oct 26, 2021',\r\n            date_end: 'Jan 2, 2022',\r\n            description: 'Discover the unexpected resonances between the work of Vincent van Gogh and David Hockney, two artists from different centuries who share a deep connection to nature.'\r\n        },\r\n        {\r\n            id: 2,\r\n            image: \"https://placehold.jp/500x500.png\",\r\n            name: 'Event name 2',\r\n            date_start: 'Oct 1, 2023',\r\n            date_end: 'Feb 5, 2024',\r\n            description: 'Discover more about this exhibition.'\r\n        },\r\n        {\r\n            id: 3,\r\n            image: \"https://placehold.jp/500x500.png\",\r\n            name: 'Event name 3',\r\n            date_start: 'Oct 1, 2023',\r\n            date_end: 'Feb 5, 2024',\r\n            description: 'Discover more about this exhibition.'\r\n        },\r\n        /*{\r\n            id: 4,\r\n            image: \"https://placehold.jp/500x500.png\",\r\n            name: 'Modern Art Exhibition',\r\n            date_start: 'Nov 25, 2021',\r\n            date_end: 'Jan 7, 2022',\r\n            description: 'Explore contemporary artworks from emerging artists around the globe. Features paintings, sculptures, and digital installations.'\r\n        },\r\n        {\r\n            id: 5,\r\n            image: \"https://placehold.jp/500x500.png\",\r\n            name: 'Renaissance Masters',\r\n            date_start: 'Nov 1, 2023',\r\n            date_end: 'Feb 5, 2024',\r\n            description: 'A curated collection of Renaissance masterpieces, featuring works from Italian and Northern European artists.'\r\n        },\r\n        {\r\n            id: 6,\r\n            image: \"https://placehold.jp/500x500.png\",\r\n            name: 'Ancient Civilizations',\r\n            date_start: 'June 1, 2023',\r\n            date_end: 'Feb 5, 2024',\r\n            description: 'Journey through time with artifacts from ancient Egypt, Greece, and Rome. Interactive displays and guided tours available.'\r\n        },*/\r\n    ];\r\n\r\n    const [event, setSelectedEvent] = useState([]);\r\n    const [selectedExhibition, setSelectedExhibition] = useState(null);\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n    useEffect(() => {\r\n        // Fetch event data\r\n        const fetchEventData = async () => {\r\n            try {\r\n                const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/events`);\r\n                if (response.status === 200) {\r\n                    const formattedEvents = response.data.map(event => ({\r\n                        id: event.event_id,\r\n                        name: event.name_,\r\n                        image: \"https://placehold.jp/500x500.png\",\r\n                        date_start: event.start_date,\r\n                        date_end: event.end_date,\r\n                        description: event.description_\r\n                    }));\r\n                    setSelectedEvent(formattedEvents);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching events: ', error);\r\n            }\r\n        };\r\n        fetchEventData();\r\n    }, []);\r\n\r\n\r\n    const handleExploreClick = (exhibition) => {\r\n        setSelectedExhibition(exhibition);\r\n        setIsModalOpen(true);\r\n    };\r\n\r\n    const closeModal = () => {\r\n        setIsModalOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div style={{ marginTop: '100px' }}>\r\n            <HomeNavBar />\r\n            <div className=\"container\">\r\n                <img src={ExhibitionImage} alt=\"Exhibitions\" className=\"HalfBackgroundImage\" />\r\n                <div className=\"overlay\">\r\n                    <h1 className=\"title\">Exhibitions & Events</h1>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"exhibitions-container\">\r\n                {exhibitions.map((exhibition) => (\r\n                    <ExhibitionsCardUser\r\n                        key={exhibition.id}\r\n                        exhibition={exhibition}\r\n                        onExploreClick={handleExploreClick}\r\n                    />\r\n                ))}\r\n                {event.map((exhibition) => (\r\n                    <ExhibitionsCardUser\r\n                        key={exhibition.id}\r\n                        exhibition={exhibition}\r\n                        onExploreClick={handleExploreClick}\r\n                    />\r\n                ))}\r\n            </div>\r\n\r\n            {isModalOpen && (\r\n                <ExhibitionModalUser exhibition={selectedExhibition} onClose={closeModal} />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ExhibitionsAndEvents;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/pages/ExhibitionsAndEvents.jsx b/frontend/src/pages/ExhibitionsAndEvents.jsx
--- a/frontend/src/pages/ExhibitionsAndEvents.jsx	(revision be7a189a6dd3991950fbb26c832d8f9769c55e80)
+++ b/frontend/src/pages/ExhibitionsAndEvents.jsx	(date 1731386630000)
@@ -66,7 +66,7 @@
         // Fetch event data
         const fetchEventData = async () => {
             try {
-                const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/events`);
+                const response = await axios.get(`http://localhost:5000/api/events`);
                 if (response.status === 200) {
                     const formattedEvents = response.data.map(event => ({
                         id: event.event_id,
Index: frontend/src/pages/Dashboards/EventDashboard.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport '../../css/event_director.css';\r\nimport logo from '../../assets/LOGO.png';\r\nimport axios from 'axios';\r\n\r\nconst EventDirectorDashboard = () => {\r\n    const [eventCards, setEventCards] = useState([]);\r\n    const [activeTab, setActiveTab] = useState('dashboard');\r\n    const [userName, setUserName] = useState('User');\r\n    const [selectedEventId, setSelectedEventId] = useState('');\r\n    const [reportData, setReportData] = useState(null); // State to store report data\r\n    const [membersList, setMembersList] = useState([]); // State to store members list\r\n    const [isMembersModalOpen, setIsMembersModalOpen] = useState(false); // State to control members modal\r\n    const [isEventModalOpen, setIsEventModalOpen] = useState(false); // State to control event modal\r\n    const [selectedEvent, setSelectedEvent] = useState({ id: '', name: '', description: '', location: '', status: 'upcoming', start_date: '', end_date: ''}); // State to store selected event for editing\r\n\r\n    useEffect(() => {\r\n        // Fetch event data\r\n        const fetchEventData = async () => {\r\n            try {\r\n                const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/events`);\r\n                if (response.status === 200) {\r\n                    const formattedEvents = response.data.map(event => ({\r\n                        id: event.event_id,\r\n                        name: event.name_,\r\n                        description: event.description_,\r\n                        location: event.location,\r\n                        status: event.status,\r\n                        start_date: event.start_date,\r\n                        end_date: event.end_date\r\n                    }));\r\n                    setEventCards(formattedEvents);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching events: ', error);\r\n            }\r\n        };\r\n        fetchEventData();\r\n    }, []);\r\n\r\n    const addEventCard = () => {\r\n        setSelectedEvent({ id: '', name: '', description: '', location: '', status: 'upcoming', start_date: '', end_date: '' });\r\n        setIsEventModalOpen(true);\r\n    };\r\n\r\n    const openEditModal = (event) => {\r\n        setSelectedEvent(event);\r\n        setIsEventModalOpen(true);\r\n    };\r\n\r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setSelectedEvent({ ...selectedEvent, [name]: value });\r\n    };\r\n\r\n    const saveEventChanges = async () => {\r\n        try {\r\n            if (selectedEvent.id) {\r\n                // Update existing event\r\n                //const response = await axios.put(`http://${process.env.REACT_APP_API_URL}/api/events/${selectedEvent.id}`, selectedEvent);\r\n                const response = await axios.put(`${process.env.REACT_APP_API_URL}/api/events/${selectedEvent.id}`, selectedEvent);\r\n                if (response.status === 200) {\r\n                    setEventCards(eventCards.map(event => event.id === selectedEvent.id ? selectedEvent : event));\r\n                } else {\r\n                    console.error('Failed to update event');\r\n                }\r\n            } else {\r\n                // Add new event\r\n                //const response = await axios.post('http://${process.env.REACT_APP_API_URL}/api/events', selectedEvent);\r\n                const response = await axios.post(`${process.env.REACT_APP_API_URL}/api/events`, selectedEvent);\r\n                if (response.status === 200) {\r\n                    setEventCards([...eventCards, { ...selectedEvent, id: response.data.id }]);\r\n                } else {\r\n                    console.error('Failed to add event');\r\n                }\r\n            }\r\n            setSelectedEvent({ id: '', name: '', description: '', location: '', status: 'upcoming', start_date: '', end_date: '' });\r\n            setIsEventModalOpen(false);\r\n        } catch (error) {\r\n            console.error('Error saving event: ', error);\r\n        }\r\n    };\r\n\r\n    const removeEventCard = async (id) => {\r\n        try {\r\n            const response = await axios.delete(`${process.env.REACT_APP_API_URL}/api/events/${id}`); // replace with http://${process.env.REACT_APP_API_URL}/api/events/${id}\r\n            if (response.status === 200) {\r\n                setEventCards(eventCards.filter(event => event.id !== id));\r\n            }\r\n            else {\r\n                console.error('Failed to delete event');\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.error('Error deleting event: ', error);\r\n        }\r\n    };\r\n\r\n    const handleTabClick = (tab) => {\r\n        setActiveTab(tab);\r\n    };\r\n\r\n    const viewMembers = async (eventId) => {\r\n        try {\r\n            //const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/events/${eventId}/members`);\r\n            const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/events/${eventId}/members`);\r\n            if (response.status === 200) {\r\n                console.log('Members: ', response.data);\r\n                setMembersList(response.data);\r\n            } else {\r\n                console.error('Failed to fetch members');\r\n                setMembersList([]);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching members: ', error);\r\n            setMembersList([]);\r\n        } finally {\r\n            setIsMembersModalOpen(true);\r\n        }\r\n    };\r\n\r\n    const handleCloseMembersModal = () => {\r\n        setIsMembersModalOpen(false);\r\n        setMembersList([]);\r\n    };\r\n\r\n    // Handle event selection for reports\r\n    const handleEventSelection = (e) => {\r\n        setSelectedEventId(e.target.value);\r\n    };\r\n\r\n    // Simulate fetching report data for a specific event\r\n    const fetchReport = async (eventId) => {\r\n        if (!eventId) {\r\n            alert('Please select an event.');\r\n            return;\r\n        }\r\n        console.log('Fetching report for event: ', eventId);\r\n        setReportData(null);\r\n\r\n        try {\r\n            const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/events/${eventId}/report`);\r\n            if (response.status === 200) {\r\n                setReportData(response.data);\r\n            } else {\r\n                console.error('Failed to fetch report');\r\n                setReportData({totalMembersSignedUp: 0, totalRevenue: 0});\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching report: ', error);\r\n            setReportData({totalMembersSignedUp: 0, totalRevenue: 0});\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"dashboard-container\">\r\n            {/* Sidebar */}\r\n            <div className=\"sidebar\">\r\n                <a href=\"/\" className=\"logo\">\r\n                    <img src={logo} alt=\"logo\" />\r\n                </a>\r\n\r\n                <a\r\n                    href=\"#\"\r\n                    className={`dashboard ${activeTab === 'dashboard' ? 'active' : ''}`}\r\n                    onClick={() => handleTabClick('dashboard')}\r\n                >\r\n                    Events\r\n                </a>\r\n                <a\r\n                    href=\"#\"\r\n                    className={`reports ${activeTab === 'reports' ? 'active' : ''}`}\r\n                    onClick={() => handleTabClick('reports')}\r\n                >\r\n                    Event Reports\r\n                </a>\r\n                <a\r\n                    href=\"/\"\r\n                    className={`logout ${activeTab === 'logout' ? 'active' : ''}`}\r\n                    onClick={() => handleTabClick('logout')}\r\n                >\r\n                    Logout\r\n                </a>\r\n            </div>\r\n\r\n            {/* Main Content */}\r\n            <div className=\"main-content\">\r\n                {/* Greeting Section */}\r\n                <div className=\"greeting-container\">\r\n                    <div className=\"greeting\">\r\n                        Hello, {userName}\r\n                    </div>\r\n                </div>\r\n\r\n                {activeTab === 'dashboard' && (\r\n                    <div className=\"events\">\r\n                        <h3>Active Events</h3>\r\n                        <button className=\"add_event\" onClick={addEventCard}>Add Event</button>\r\n\r\n                        {/* Event Cards */}\r\n                        <div className=\"event-cards-container\">\r\n                            {eventCards.map((event) => (\r\n                                <div key={event.id} className=\"event-card\">\r\n                                    <div className='event-name'>\r\n                                        <p>{event.name}</p>\r\n                                    </div>\r\n                                    <button onClick={() => openEditModal(event)}>Edit</button>\r\n                                    <button onClick={() => removeEventCard(event.id)} className=\"Remove\">Remove</button>\r\n                                    <button onClick={() => viewMembers(event.id)}>View Members</button>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n\r\n                        {/* Event Modal */}\r\n                        {isEventModalOpen && (\r\n                            <div className=\"modal\">\r\n                                <div className=\"modal-content\">\r\n                                    <h3>{selectedEvent.id ? 'Edit Event' : 'Add Event'}</h3>\r\n                                    <label>\r\n                                        Name:\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            name=\"name\"\r\n                                            value={selectedEvent.name || ''}\r\n                                            onChange={handleInputChange}\r\n                                        />\r\n                                    </label>\r\n                                    <label>\r\n                                        Description:\r\n                                        <textarea\r\n                                            name=\"description\"\r\n                                            value={selectedEvent.description || ''}\r\n                                            onChange={handleInputChange}\r\n                                        />\r\n                                    </label>\r\n                                    <label>\r\n                                        Location:\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            name=\"location\"\r\n                                            value={selectedEvent.location || ''}\r\n                                            onChange={handleInputChange}\r\n                                        />\r\n                                    </label>\r\n                                    <label>\r\n                                        Status:\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            name=\"status\"\r\n                                            value={selectedEvent.status || ''}\r\n                                            onChange={handleInputChange}\r\n                                        />\r\n                                    </label>\r\n                                    <label>\r\n                                        Start Date:\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            name=\"start_date\"\r\n                                            value={selectedEvent.start_date || ''}\r\n                                            onChange={handleInputChange}\r\n                                        />\r\n                                    </label>\r\n                                    <label>\r\n                                        End Date:\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            name=\"end_date\"\r\n                                            value={selectedEvent.end_date || ''}\r\n                                            onChange={handleInputChange}\r\n                                        />\r\n                                    </label>\r\n                                    <button onClick={saveEventChanges}>{selectedEvent.id ? 'Save Changes' : 'Submit'}</button>\r\n                                    <button onClick={() => setIsEventModalOpen(false)}>Cancel</button>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )}\r\n\r\n                {/* Members Modal */}\r\n                {isMembersModalOpen && (\r\n                    <div className=\"modal\">\r\n                        <div className=\"modal-content\">\r\n                            <h3>Members Signed Up for Event</h3>\r\n                            <ul>\r\n                                {membersList.length > 0 ? (\r\n                                    membersList.map(member => (\r\n                                        <li key={member.id}>{member.fname} {member.lname}</li>\r\n                                    ))\r\n                                ) : (\r\n                                    <p>No members signed up.</p>\r\n                                )}\r\n                            </ul>\r\n                            <button onClick={handleCloseMembersModal}>Close</button>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n                {activeTab === 'reports' && (\r\n                    <div className=\"reports-section\">\r\n                        <h3>Generate Event Reports</h3>\r\n\r\n                        {/* Dropdown to select an event */}\r\n                        <label htmlFor=\"eventSelect\">Select Event:</label>\r\n                        <select id=\"eventSelect\" value={selectedEventId} onChange={handleEventSelection}>\r\n                            <option value=\"\">-- Select an Event --</option>\r\n                            {eventCards.map(event => (\r\n                                <option key={event.id} value={event.id}>\r\n                                    {event.name}\r\n                                </option>\r\n                            ))}\r\n                        </select>\r\n\r\n                        {/* Button to generate the report */}\r\n                        <button onClick={() => fetchReport(selectedEventId)}>Generate Report</button>\r\n\r\n                        {/* Display the report */}\r\n                        {reportData && (\r\n                            <div className=\"report\">\r\n                                <h4>Report for Event:</h4>\r\n                                <p><strong>Total Members Signed Up:</strong> {reportData.totalMembersSignedUp}</p>\r\n                                <p><strong>Total Revenue Generated:</strong> ${reportData.totalRevenue}</p>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EventDirectorDashboard;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/pages/Dashboards/EventDashboard.jsx b/frontend/src/pages/Dashboards/EventDashboard.jsx
--- a/frontend/src/pages/Dashboards/EventDashboard.jsx	(revision be7a189a6dd3991950fbb26c832d8f9769c55e80)
+++ b/frontend/src/pages/Dashboards/EventDashboard.jsx	(date 1731386630000)
@@ -18,7 +18,7 @@
         // Fetch event data
         const fetchEventData = async () => {
             try {
-                const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/events`);
+                const response = await axios.get(`http://localhost:5000/api/events`);
                 if (response.status === 200) {
                     const formattedEvents = response.data.map(event => ({
                         id: event.event_id,
@@ -57,8 +57,8 @@
         try {
             if (selectedEvent.id) {
                 // Update existing event
-                //const response = await axios.put(`http://${process.env.REACT_APP_API_URL}/api/events/${selectedEvent.id}`, selectedEvent);
-                const response = await axios.put(`${process.env.REACT_APP_API_URL}/api/events/${selectedEvent.id}`, selectedEvent);
+                //const response = await axios.put(`http://http://localhost:5000/api/events/${selectedEvent.id}`, selectedEvent);
+                const response = await axios.put(`http://localhost:5000/api/events/${selectedEvent.id}`, selectedEvent);
                 if (response.status === 200) {
                     setEventCards(eventCards.map(event => event.id === selectedEvent.id ? selectedEvent : event));
                 } else {
@@ -66,8 +66,8 @@
                 }
             } else {
                 // Add new event
-                //const response = await axios.post('http://${process.env.REACT_APP_API_URL}/api/events', selectedEvent);
-                const response = await axios.post(`${process.env.REACT_APP_API_URL}/api/events`, selectedEvent);
+                //const response = await axios.post('http://http://localhost:5000/api/events', selectedEvent);
+                const response = await axios.post(`http://localhost:5000/api/events`, selectedEvent);
                 if (response.status === 200) {
                     setEventCards([...eventCards, { ...selectedEvent, id: response.data.id }]);
                 } else {
@@ -83,7 +83,7 @@
 
     const removeEventCard = async (id) => {
         try {
-            const response = await axios.delete(`${process.env.REACT_APP_API_URL}/api/events/${id}`); // replace with http://${process.env.REACT_APP_API_URL}/api/events/${id}
+            const response = await axios.delete(`http://localhost:5000/api/events/${id}`); // replace with http://http://localhost:5000/api/events/${id}
             if (response.status === 200) {
                 setEventCards(eventCards.filter(event => event.id !== id));
             }
@@ -102,8 +102,8 @@
 
     const viewMembers = async (eventId) => {
         try {
-            //const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/events/${eventId}/members`);
-            const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/events/${eventId}/members`);
+            //const response = await axios.get(`http://localhost:5000/api/events/${eventId}/members`);
+            const response = await axios.get(`http://localhost:5000/api/events/${eventId}/members`);
             if (response.status === 200) {
                 console.log('Members: ', response.data);
                 setMembersList(response.data);
@@ -139,7 +139,7 @@
         setReportData(null);
 
         try {
-            const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/events/${eventId}/report`);
+            const response = await axios.get(`http://localhost:5000/api/events/${eventId}/report`);
             if (response.status === 200) {
                 setReportData(response.data);
             } else {
Index: frontend/src/pages/MFAShop.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/pages/MFAShop.jsx\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport {\r\n    Box,\r\n    FormControl,\r\n    Grid,\r\n    InputLabel,\r\n    MenuItem,\r\n    Select,\r\n    TextField,\r\n    Typography,\r\n} from '@mui/material';\r\nimport HomeNavBar from '../components/HomeNavBar';\r\nimport MFAShopCard from '../components/MFAShopCard';\r\nimport MFAShopModalUser from '../components/MFAShopModalUser';\r\n\r\nconst MFAShop = () => {\r\n    const [shopItems, setShopItems] = useState([]);\r\n    const [query, setQuery] = useState('');\r\n    const [selectedCategory, setSelectedCategory] = useState('');\r\n    const [sortOption, setSortOption] = useState('name_asc');\r\n    const [selectedItem, setSelectedItem] = useState(null);\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    // Pagination state variables\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const itemsPerPage = 9; // Adjust the number of items per page as needed\r\n\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        fetch(`${process.env.REACT_APP_API_URL}/giftshopitems`)\r\n            .then((response) => {\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch shop items');\r\n                }\r\n                return response.json();\r\n            })\r\n            .then((data) => {\r\n                // Map 'quantity' to 'stock' for clarity\r\n                const mappedData = data.map(item => ({ ...item, stock: item.quantity }));\r\n                console.log('Mapped shop items:', mappedData); // For debugging\r\n                setShopItems(mappedData);\r\n                setLoading(false);\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error fetching shop items:', error);\r\n                setError(error.message);\r\n                setLoading(false);\r\n            });\r\n    }, []);\r\n\r\n    // Handle card click to show modal\r\n    const handleCardClick = (item) => {\r\n        if (item.stock > 0) {\r\n            setSelectedItem(item);\r\n            setIsModalOpen(true);\r\n        }\r\n    };\r\n\r\n    const closeModal = () => {\r\n        setIsModalOpen(false);\r\n    };\r\n\r\n    // Filter shop items\r\n    const filteredItems = shopItems.filter((item) => {\r\n        return (\r\n            item.name_.toLowerCase().includes(query.toLowerCase()) &&\r\n            (!selectedCategory || item.category === selectedCategory)\r\n        );\r\n    });\r\n\r\n    // Sort shop items\r\n    const sortedItems = filteredItems.sort((a, b) => {\r\n        switch (sortOption) {\r\n            case 'name_asc':\r\n                return a.name_.localeCompare(b.name_);\r\n            case 'name_desc':\r\n                return b.name_.localeCompare(a.name_);\r\n            case 'price_asc':\r\n                return parseFloat(a.price) - parseFloat(b.price);\r\n            case 'price_desc':\r\n                return parseFloat(b.price) - parseFloat(a.price);\r\n            default:\r\n                return 0;\r\n        }\r\n    });\r\n\r\n    // Calculate total pages and current items\r\n    const totalPages = Math.ceil(sortedItems.length / itemsPerPage);\r\n    const indexOfLastItem = currentPage * itemsPerPage;\r\n    const indexOfFirstItem = indexOfLastItem - itemsPerPage;\r\n    const currentItems = sortedItems.slice(indexOfFirstItem, indexOfLastItem);\r\n\r\n    // Reset current page when filters or sorting options change\r\n    useEffect(() => {\r\n        setCurrentPage(1);\r\n    }, [query, selectedCategory, sortOption]);\r\n\r\n    // Get unique category options\r\n    const categoryOptions = [...new Set(shopItems.map((item) => item.category))];\r\n\r\n    return (\r\n        <div>\r\n            <HomeNavBar />\r\n            <Box sx={{ paddingTop: '100px', minHeight: '100vh', backgroundColor: '#fcfcfc' }}>\r\n                <Typography\r\n                    variant=\"h3\"\r\n                    component=\"h1\"\r\n                    gutterBottom\r\n                    align=\"center\"\r\n                    sx={{\r\n                        fontFamily: 'Rosarivo, serif',\r\n                        fontStyle: 'italic',\r\n                        fontWeight: 400,\r\n                        color: '#352F36',\r\n                    }}\r\n                >\r\n                    MFA Shop\r\n                </Typography>\r\n\r\n                {/* Main Content Layout */}\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        flexWrap: 'wrap',\r\n                        maxWidth: '1200px',\r\n                        width: '100%',\r\n                        margin: '0 auto',\r\n                        marginTop: '20px',\r\n                    }}\r\n                >\r\n                    {/* Sidebar Filter Section */}\r\n                    <Box\r\n                        sx={{\r\n                            flex: '1 1 250px',\r\n                            padding: '20px',\r\n                            backgroundColor: '#fcfcfc',\r\n                            borderRadius: '8px',\r\n                            boxSizing: 'border-box',\r\n                            marginRight: { xs: 0, md: '20px' },\r\n                            marginBottom: { xs: '20px', md: 0 },\r\n                        }}\r\n                    >\r\n                        <Typography variant=\"h6\" gutterBottom>\r\n                            Filter By\r\n                        </Typography>\r\n                        <FormControl fullWidth margin=\"normal\">\r\n                            <InputLabel>Category</InputLabel>\r\n                            <Select\r\n                                value={selectedCategory}\r\n                                label=\"Category\"\r\n                                onChange={(e) => setSelectedCategory(e.target.value)}\r\n                            >\r\n                                <MenuItem value=\"\">All Categories</MenuItem>\r\n                                {categoryOptions.map((option) => (\r\n                                    <MenuItem key={option} value={option}>\r\n                                        {option}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </FormControl>\r\n                        <TextField\r\n                            label=\"Search items...\"\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            value={query}\r\n                            onChange={(e) => setQuery(e.target.value)}\r\n                            margin=\"normal\"\r\n                        />\r\n                    </Box>\r\n\r\n                    {/* Right Side: Sort and Shop Items */}\r\n                    <Box\r\n                        sx={{\r\n                            flex: '3 1 700px',\r\n                            display: 'flex',\r\n                            flexDirection: 'column',\r\n                            alignItems: 'stretch',\r\n                            boxSizing: 'border-box',\r\n                        }}\r\n                    >\r\n                        <Box\r\n                            sx={{\r\n                                display: 'flex',\r\n                                alignItems: 'center',\r\n                                justifyContent: 'space-between',\r\n                                marginBottom: '15px',\r\n                                flexWrap: 'wrap',\r\n                            }}\r\n                        >\r\n                            <Typography variant=\"h6\">Shop Items</Typography>\r\n                            <FormControl sx={{ minWidth: 200 }} margin=\"normal\">\r\n                                <InputLabel>Sort By</InputLabel>\r\n                                <Select\r\n                                    value={sortOption}\r\n                                    label=\"Sort By\"\r\n                                    onChange={(e) => setSortOption(e.target.value)}\r\n                                >\r\n                                    <MenuItem value=\"name_asc\">Name A-Z</MenuItem>\r\n                                    <MenuItem value=\"name_desc\">Name Z-A</MenuItem>\r\n                                    <MenuItem value=\"price_asc\">Price Low to High</MenuItem>\r\n                                    <MenuItem value=\"price_desc\">Price High to Low</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Box>\r\n\r\n                        {/* Grid Container */}\r\n                        <Grid container spacing={2} alignItems=\"stretch\">\r\n                            {loading ? (\r\n                                <Typography>Loading items...</Typography>\r\n                            ) : error ? (\r\n                                <Typography>Error: {error}</Typography>\r\n                            ) : currentItems.length > 0 ? (\r\n                                currentItems.map((item) => (\r\n                                    <Grid item xs={12} sm={6} md={4} key={item.item_id}>\r\n                                        <MFAShopCard item={item} onCardClick={handleCardClick} />\r\n                                    </Grid>\r\n                                ))\r\n                            ) : (\r\n                                <Typography>No items found matching your query.</Typography>\r\n                            )}\r\n                        </Grid>\r\n\r\n                        {/* Pagination Controls */}\r\n                        <Box sx={{ display: 'flex', justifyContent: 'center', marginTop: '20px' }}>\r\n                            {Array.from({ length: totalPages }, (_, index) => (\r\n                                <Box\r\n                                    key={index}\r\n                                    sx={{\r\n                                        padding: '8px 12px',\r\n                                        margin: '0 4px',\r\n                                        borderRadius: '4px',\r\n                                        backgroundColor:\r\n                                            currentPage === index + 1 ? '#BD2859' : '#D7D5D7',\r\n                                        color: '#FFFFFF',\r\n                                        cursor: 'pointer',\r\n                                    }}\r\n                                    onClick={() => setCurrentPage(index + 1)}\r\n                                >\r\n                                    {index + 1}\r\n                                </Box>\r\n                            ))}\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n\r\n                {/* Modal for item details */}\r\n                {isModalOpen && selectedItem && (\r\n                    <MFAShopModalUser item={selectedItem} onClose={closeModal} />\r\n                )}\r\n            </Box>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MFAShop;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/pages/MFAShop.jsx b/frontend/src/pages/MFAShop.jsx
--- a/frontend/src/pages/MFAShop.jsx	(revision be7a189a6dd3991950fbb26c832d8f9769c55e80)
+++ b/frontend/src/pages/MFAShop.jsx	(date 1731386630000)
@@ -32,7 +32,7 @@
 
     useEffect(() => {
         setLoading(true);
-        fetch(`${process.env.REACT_APP_API_URL}/giftshopitems`)
+        fetch(`http://localhost:5000/giftshopitems`)
             .then((response) => {
                 if (!response.ok) {
                     throw new Error('Failed to fetch shop items');
Index: frontend/src/components/GiftShopForm.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/components/GiftShopFormModal.jsx\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport styles from '../css/GiftShopForm.module.css';\r\n\r\n// Import React FilePond\r\nimport { FilePond, registerPlugin } from 'react-filepond';\r\n\r\n// Import FilePond styles\r\nimport 'filepond/dist/filepond.min.css';\r\nimport 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css';\r\n\r\n// Import the Image Preview plugin\r\nimport FilePondPluginImagePreview from 'filepond-plugin-image-preview';\r\n\r\n// Register the plugin\r\nregisterPlugin(FilePondPluginImagePreview);\r\n\r\nconst GiftShopFormModal = ({ item = {}, onClose }) => {\r\n    const [formData, setFormData] = useState({\r\n        name_: '',\r\n        category: '',\r\n        price: '',\r\n        quantity: '',\r\n    });\r\n    const [imageFile, setImageFile] = useState([]);\r\n    const [showDeleteModal, setShowDeleteModal] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (item && item.item_id) {\r\n            // Set form data\r\n            setFormData({\r\n                name_: item.name_ || '',\r\n                category: item.category || '',\r\n                price: item.price || '',\r\n                quantity: item.quantity || '',\r\n            });\r\n\r\n            // Set the image file using the URL\r\n            setImageFile([\r\n                {\r\n                    source: `${process.env.REACT_APP_API_URL}/giftshopitems/${item.item_id}/image`,\r\n                    options: {\r\n                        type: 'remote', // Indicate that the source is a remote URL\r\n                    },\r\n                },\r\n            ]);\r\n        } else {\r\n            // Reset form data\r\n            setFormData({\r\n                name_: '',\r\n                category: '',\r\n                price: '',\r\n                quantity: '',\r\n            });\r\n            setImageFile([]);\r\n        }\r\n    }, [item]);\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setFormData({ ...formData, [name]: value });\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        const data = new FormData();\r\n        data.append('name_', formData.name_);\r\n        data.append('category', formData.category);\r\n        data.append('price', parseFloat(formData.price)); // Convert to float\r\n        data.append('quantity', formData.quantity);\r\n\r\n        if (imageFile.length > 0 && imageFile[0].file instanceof File) {\r\n            data.append('image', imageFile[0].file);\r\n        }\r\n\r\n        const role = localStorage.getItem('role');\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data',\r\n                'user-id': localStorage.getItem('userId'),\r\n                'role': role,\r\n            },\r\n        };\r\n\r\n        if (item && item.item_id) {\r\n            // Update existing item\r\n            axios\r\n                .put(`${process.env.REACT_APP_API_URL}/giftshopitems/${item.item_id}`, data, config)\r\n                .then(() => {\r\n                    onClose(); // Close the modal\r\n                    window.location.reload(); // Refresh the page\r\n                })\r\n                .catch((error) => console.error('Error updating item:', error));\r\n        } else {\r\n            // Create new item\r\n            axios\r\n                .post(`${process.env.REACT_APP_API_URL}/giftshopitems`, data, config)\r\n                .then(() => {\r\n                    onClose(); // Close the modal\r\n                    window.location.reload(); // Refresh the page\r\n                })\r\n                .catch((error) => console.error('Error creating item:', error));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={styles.modal}>\r\n            <div className={styles.modal_content}>\r\n                <span className={styles.close_button} onClick={onClose}>\r\n                    &times;\r\n                </span>\r\n                <form onSubmit={handleSubmit} className={styles.formContainer}>\r\n                    <h2>{item && item.item_id ? 'Edit Item' : 'Add New Item'}</h2>\r\n                    <label>\r\n                        Name:\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"name_\"\r\n                            value={formData.name_}\r\n                            onChange={handleChange}\r\n                            required\r\n                        />\r\n                    </label>\r\n                    <label>\r\n                        Category:\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"category\"\r\n                            value={formData.category}\r\n                            onChange={handleChange}\r\n                        />\r\n                    </label>\r\n                    <label>\r\n                        Price:\r\n                        <input\r\n                            type=\"number\"\r\n                            name=\"price\"\r\n                            step=\"0.01\"\r\n                            value={formData.price}\r\n                            onChange={handleChange}\r\n                            required\r\n                        />\r\n                    </label>\r\n                    <label>\r\n                        Quantity:\r\n                        <input\r\n                            type=\"number\"\r\n                            name=\"quantity\"\r\n                            value={formData.quantity}\r\n                            onChange={handleChange}\r\n                            required\r\n                        />\r\n                    </label>\r\n                    <label>\r\n                        Image:\r\n                        <FilePond\r\n                            files={imageFile}\r\n                            onupdatefiles={setImageFile}\r\n                            allowMultiple={false}\r\n                            acceptedFileTypes={['image/*']}\r\n                            labelIdle='Drag & Drop your image or <span class=\"filepond--label-action\">Browse</span>'\r\n                        />\r\n                    </label>\r\n                    <div className={styles.buttonGroup}>\r\n                        <button type=\"submit\" className={styles.formButton}>\r\n                            {item && item.item_id ? 'Update' : 'Create'}\r\n                        </button>\r\n                        <button type=\"button\" className={styles.formButton} onClick={onClose}>\r\n                            Cancel\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GiftShopFormModal;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/GiftShopForm.jsx b/frontend/src/components/GiftShopForm.jsx
--- a/frontend/src/components/GiftShopForm.jsx	(revision be7a189a6dd3991950fbb26c832d8f9769c55e80)
+++ b/frontend/src/components/GiftShopForm.jsx	(date 1731386552000)
@@ -40,7 +40,7 @@
             // Set the image file using the URL
             setImageFile([
                 {
-                    source: `${process.env.REACT_APP_API_URL}/giftshopitems/${item.item_id}/image`,
+                    source: `http://localhost:5000/giftshopitems/${item.item_id}/image`,
                     options: {
                         type: 'remote', // Indicate that the source is a remote URL
                     },
@@ -88,7 +88,7 @@
         if (item && item.item_id) {
             // Update existing item
             axios
-                .put(`${process.env.REACT_APP_API_URL}/giftshopitems/${item.item_id}`, data, config)
+                .put(`http://localhost:5000/giftshopitems/${item.item_id}`, data, config)
                 .then(() => {
                     onClose(); // Close the modal
                     window.location.reload(); // Refresh the page
@@ -97,7 +97,7 @@
         } else {
             // Create new item
             axios
-                .post(`${process.env.REACT_APP_API_URL}/giftshopitems`, data, config)
+                .post(`http://localhost:5000/giftshopitems`, data, config)
                 .then(() => {
                     onClose(); // Close the modal
                     window.location.reload(); // Refresh the page
Index: frontend/src/components/Register.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState } from 'react';\r\nimport {\r\n    Box,\r\n    Button,\r\n    TextField,\r\n    Typography,\r\n    InputAdornment,\r\n    CssBaseline,\r\n    Select,\r\n    MenuItem,\r\n    FormControl,\r\n    InputLabel\r\n} from '@mui/material';\r\nimport { useNavigate, Link } from 'react-router-dom';\r\nimport PersonAddIcon from '@mui/icons-material/PersonAdd';\r\nimport EmailIcon from '@mui/icons-material/Email';\r\nimport AccountIcon from '@mui/icons-material/AccountBox'; // Import AccountIcon\r\nimport LockIcon from '@mui/icons-material/Lock'; // Import LockIcon\r\nimport HomeNavBar from '../components/HomeNavBar';\r\nimport '../css/Auth.module.css';\r\nimport TicketBackground from '../assets/TicketsBackground.png';\r\nimport { toast } from 'react-toastify'; // Import toast\r\n// config\r\n\r\nconst Register = () => {\r\n    const [formData, setFormData] = useState({\r\n        firstName: '',\r\n        lastName: '',\r\n        dateOfBirth: '',\r\n        username: '',\r\n        password: '',\r\n        email: '',\r\n        roleId: 3, // Default to 'customer'\r\n    });\r\n    const [errors, setErrors] = useState({});\r\n    const navigate = useNavigate();\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setFormData({ ...formData, [name]: value });\r\n    };\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        const newErrors = {};\r\n        if (!formData.firstName) newErrors.firstName = 'First name is required';\r\n        if (!formData.lastName) newErrors.lastName = 'Last name is required';\r\n        if (!formData.dateOfBirth) newErrors.dateOfBirth = 'Date of birth is required';\r\n        if (!formData.username) newErrors.username = 'Username is required';\r\n        if (!formData.password) newErrors.password = 'Password is required';\r\n        if (!formData.email) newErrors.email = 'Email is required';\r\n        setErrors(newErrors);\r\n\r\n        if (Object.keys(newErrors).length > 0) {\r\n            // Display validation errors using toast\r\n            Object.values(newErrors).forEach((error) => toast.error(error));\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_API_URL}/register`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(formData),\r\n            });\r\n\r\n            if (response.ok) {\r\n                const data = await response.json();\r\n                toast.success(data.message);\r\n                navigate('/login');\r\n            } else {\r\n                const errorData = await response.json();\r\n                if (errorData.errors) {\r\n                    // Display field-specific errors\r\n                    Object.values(errorData.errors).forEach((error) => toast.error(error));\r\n                } else {\r\n                    // Display general error message\r\n                    toast.error(errorData.message || 'Error registering user.');\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('Error registering:', error);\r\n            toast.error('Error registering user.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className=\"tickets-container\"\r\n            style={{\r\n                backgroundImage: `linear-gradient(rgba(220, 74, 56, 0.2), rgba(220, 74, 56, 0.2)), url(${TicketBackground})`,\r\n                backgroundSize: 'cover',\r\n                backgroundPosition: 'center',\r\n                backgroundRepeat: 'no-repeat',\r\n            }}\r\n        >\r\n            <HomeNavBar />\r\n            <div className=\"tickets-content\">\r\n                <CssBaseline />\r\n                <Typography component=\"h1\" variant=\"h5\" className=\"tickets-title\">\r\n                    Register\r\n                </Typography>\r\n                <Box component=\"form\" onSubmit={handleSubmit} noValidate sx={{ mt: 2 }}>\r\n                    <TextField\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"firstName\"\r\n                        label=\"First Name\"\r\n                        name=\"firstName\"\r\n                        error={!!errors.firstName}\r\n                        helperText={errors.firstName}\r\n                        value={formData.firstName}\r\n                        onChange={handleChange}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <PersonAddIcon />\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                    <TextField\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"lastName\"\r\n                        label=\"Last Name\"\r\n                        name=\"lastName\"\r\n                        error={!!errors.lastName}\r\n                        helperText={errors.lastName}\r\n                        value={formData.lastName}\r\n                        onChange={handleChange}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <PersonAddIcon />\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                    <TextField\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"dateOfBirth\"\r\n                        label=\"Date of Birth\"\r\n                        type=\"date\"\r\n                        name=\"dateOfBirth\"\r\n                        value={formData.dateOfBirth}\r\n                        onChange={handleChange}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        error={!!errors.dateOfBirth}\r\n                        helperText={errors.dateOfBirth}\r\n                    />\r\n                    <TextField\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"username\"\r\n                        label=\"Username\"\r\n                        name=\"username\"\r\n                        error={!!errors.username}\r\n                        helperText={errors.username}\r\n                        value={formData.username}\r\n                        onChange={handleChange}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <AccountIcon />\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                    <TextField\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"password\"\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        error={!!errors.password}\r\n                        helperText={errors.password}\r\n                        value={formData.password}\r\n                        onChange={handleChange}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <LockIcon />\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                    <TextField\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"email\"\r\n                        label=\"Email\"\r\n                        type=\"email\"\r\n                        name=\"email\"\r\n                        error={!!errors.email}\r\n                        helperText={errors.email}\r\n                        value={formData.email}\r\n                        onChange={handleChange}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <EmailIcon />\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                    {/* Optionally, allow admins to select role during registration */}\r\n                    {/* Uncomment the following block if needed */}\r\n                    {/*\r\n                    <FormControl fullWidth margin=\"normal\">\r\n                        <InputLabel id=\"role-label\">Role</InputLabel>\r\n                        <Select\r\n                            labelId=\"role-label\"\r\n                            id=\"roleId\"\r\n                            name=\"roleId\"\r\n                            value={formData.roleId}\r\n                            label=\"Role\"\r\n                            onChange={handleChange}\r\n                        >\r\n                            <MenuItem value={1}>Admin</MenuItem>\r\n                            <MenuItem value={2}>Staff</MenuItem>\r\n                            <MenuItem value={3}>Customer</MenuItem>\r\n                            <MenuItem value={4}>Member</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                    */}\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        className=\"purchase-button\"\r\n                        sx={{ mt: 3, mb: 2 }}\r\n                    >\r\n                        Register\r\n                    </Button>\r\n                    <Typography variant=\"body2\" sx={{ mt: 2, textAlign: 'center' }}>\r\n                        Already have an account? <Link to=\"/login\">Login here</Link>\r\n                    </Typography>\r\n                </Box>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Register;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/Register.jsx b/frontend/src/components/Register.jsx
--- a/frontend/src/components/Register.jsx	(revision be7a189a6dd3991950fbb26c832d8f9769c55e80)
+++ b/frontend/src/components/Register.jsx	(date 1731386552000)
@@ -59,7 +59,7 @@
         }
 
         try {
-            const response = await fetch(`${process.env.REACT_APP_API_URL}/register`, {
+            const response = await fetch(`http://localhost:5000/register`, {
                 method: 'POST',
                 headers: { 'Content-Type': 'application/json' },
                 body: JSON.stringify(formData),
Index: frontend/src/pages/ProfilePage.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/pages/ProfilePage.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n    Box, Button, Container, CssBaseline, TextField, Typography\r\n} from '@mui/material';\r\nimport HomeNavBar from '../components/HomeNavBar';\r\nimport TicketBackground from '../assets/TicketsBackground.png';\r\nimport '../css/ProfilePage.css';\r\nimport dayjs from 'dayjs';\r\nimport ChangePasswordModal from '../components/ChangePasswordModal';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst ProfilePage = () => {\r\n    const [userData, setUserData] = useState({\r\n        firstName: '',\r\n        lastName: '',\r\n        dateOfBirth: '',\r\n        username: '',\r\n        email: '',\r\n    });\r\n    const [errors, setErrors] = useState({});\r\n    const [isPasswordModalOpen, setIsPasswordModalOpen] = useState(false);\r\n\r\n    const userId = localStorage.getItem('userId');\r\n    const role = localStorage.getItem('role');\r\n\r\n    useEffect(() => {\r\n        axios\r\n            .get(`${process.env.REACT_APP_API_URL}/users/${userId}`, {\r\n                headers: { 'user-id': userId, role },\r\n            })\r\n            .then((response) => {\r\n                const data = response.data;\r\n                setUserData({\r\n                    ...data,\r\n                    dateOfBirth: dayjs(data.dateOfBirth).format('YYYY-MM-DD'),\r\n                });\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error fetching user data:', error);\r\n                toast.error('Error fetching user data.');\r\n            });\r\n    }, [userId, role]);\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setUserData({ ...userData, [name]: value });\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        // Validation\r\n        const newErrors = {};\r\n        if (!userData.firstName) newErrors.firstName = 'First name is required';\r\n        if (!userData.lastName) newErrors.lastName = 'Last name is required';\r\n        if (!userData.dateOfBirth) newErrors.dateOfBirth = 'Date of birth is required';\r\n        if (!userData.email) newErrors.email = 'Email is required';\r\n\r\n        setErrors(newErrors);\r\n\r\n        if (Object.keys(newErrors).length > 0) {\r\n            Object.values(newErrors).forEach((error) => toast.error(error));\r\n            return;\r\n        }\r\n\r\n        axios\r\n            .put(`${process.env.REACT_APP_API_URL}/users/${userId}`, userData, {\r\n                headers: { 'user-id': userId, role },\r\n            })\r\n            .then(() => {\r\n                toast.success('Profile updated successfully!');\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error updating profile:', error);\r\n                toast.error('Error updating profile.');\r\n            });\r\n    };\r\n\r\n    const handleOpenPasswordModal = () => {\r\n        setIsPasswordModalOpen(true);\r\n    };\r\n\r\n    const handleClosePasswordModal = () => {\r\n        setIsPasswordModalOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className=\"auth-container\"\r\n            style={{\r\n                backgroundImage: `url(${TicketBackground})`,\r\n                backgroundSize: 'cover',\r\n                backgroundPosition: 'center',\r\n                backgroundRepeat: 'no-repeat',\r\n                minHeight: '100vh',\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n            }}\r\n        >\r\n            <HomeNavBar />\r\n            <Container component=\"main\" maxWidth=\"xs\" className=\"auth-content\">\r\n                <CssBaseline />\r\n                <Box\r\n                    sx={{\r\n                        marginTop: 4,\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        alignItems: 'center',\r\n                        backgroundColor: 'rgba(255, 255, 255, 0.9)',\r\n                        padding: '24px',\r\n                        borderRadius: '8px',\r\n                        boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)',\r\n                    }}\r\n                >\r\n                    <Typography component=\"h1\" variant=\"h5\" className=\"auth-title\">\r\n                        Your Profile\r\n                    </Typography>\r\n                    <Box component=\"form\" onSubmit={handleSubmit} noValidate sx={{ mt: 2 }}>\r\n                        <TextField\r\n                            margin=\"normal\"\r\n                            fullWidth\r\n                            id=\"username\"\r\n                            label=\"Username\"\r\n                            name=\"username\"\r\n                            value={userData.username}\r\n                            InputProps={{ readOnly: true }}\r\n                            className=\"read-only-input\"\r\n                        />\r\n                        <TextField\r\n                            margin=\"normal\"\r\n                            fullWidth\r\n                            id=\"firstName\"\r\n                            label=\"First Name\"\r\n                            name=\"firstName\"\r\n                            value={userData.firstName}\r\n                            onChange={handleChange}\r\n                            required\r\n                            error={!!errors.firstName}\r\n                            helperText={errors.firstName}\r\n                        />\r\n                        <TextField\r\n                            margin=\"normal\"\r\n                            fullWidth\r\n                            id=\"lastName\"\r\n                            label=\"Last Name\"\r\n                            name=\"lastName\"\r\n                            value={userData.lastName}\r\n                            onChange={handleChange}\r\n                            required\r\n                            error={!!errors.lastName}\r\n                            helperText={errors.lastName}\r\n                        />\r\n                        <TextField\r\n                            margin=\"normal\"\r\n                            fullWidth\r\n                            id=\"dateOfBirth\"\r\n                            label=\"Date of Birth\"\r\n                            type=\"date\"\r\n                            name=\"dateOfBirth\"\r\n                            value={userData.dateOfBirth}\r\n                            onChange={handleChange}\r\n                            required\r\n                            InputLabelProps={{ shrink: true }}\r\n                            error={!!errors.dateOfBirth}\r\n                            helperText={errors.dateOfBirth}\r\n                        />\r\n                        <TextField\r\n                            margin=\"normal\"\r\n                            fullWidth\r\n                            id=\"email\"\r\n                            label=\"Email\"\r\n                            name=\"email\"\r\n                            value={userData.email}\r\n                            onChange={handleChange}\r\n                            required\r\n                            error={!!errors.email}\r\n                            helperText={errors.email}\r\n                        />\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            sx={{ mt: 3, mb: 2 }}\r\n                            className=\"auth-button\"\r\n                        >\r\n                            Update Profile\r\n                        </Button>\r\n                        <Button\r\n                            fullWidth\r\n                            variant=\"outlined\"\r\n                            color=\"secondary\"\r\n                            onClick={handleOpenPasswordModal}\r\n                            sx={{ mb: 2 }}\r\n                        >\r\n                            Change Password\r\n                        </Button>\r\n                    </Box>\r\n                </Box>\r\n            </Container>\r\n\r\n            {/* Change Password Modal */}\r\n            <ChangePasswordModal\r\n                open={isPasswordModalOpen}\r\n                onClose={handleClosePasswordModal}\r\n                userId={userId}\r\n                role={role}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfilePage;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/pages/ProfilePage.jsx b/frontend/src/pages/ProfilePage.jsx
--- a/frontend/src/pages/ProfilePage.jsx	(revision be7a189a6dd3991950fbb26c832d8f9769c55e80)
+++ b/frontend/src/pages/ProfilePage.jsx	(date 1731386630000)
@@ -27,7 +27,7 @@
 
     useEffect(() => {
         axios
-            .get(`${process.env.REACT_APP_API_URL}/users/${userId}`, {
+            .get(`http://localhost:5000/users/${userId}`, {
                 headers: { 'user-id': userId, role },
             })
             .then((response) => {
@@ -66,7 +66,7 @@
         }
 
         axios
-            .put(`${process.env.REACT_APP_API_URL}/users/${userId}`, userData, {
+            .put(`http://localhost:5000/users/${userId}`, userData, {
                 headers: { 'user-id': userId, role },
             })
             .then(() => {
Index: frontend/src/components/MFAShopCard.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/components/MFAShopCard.jsx\r\nimport React, { useContext } from 'react';\r\nimport {\r\n    Card,\r\n    CardActionArea,\r\n    CardMedia,\r\n    CardContent,\r\n    Typography,\r\n    Button,\r\n    CardActions,\r\n    Box,\r\n    Tooltip,\r\n} from '@mui/material';\r\nimport { styled } from '@mui/system';\r\nimport { CartContext } from './CartContext';\r\n\r\nconst LOW_STOCK_THRESHOLD = 10;\r\n\r\nconst StyledButton = styled(Button)(({ disabled }) => ({\r\n    padding: '8px 12px',\r\n    marginRight: '5px',\r\n    fontSize: '14px',\r\n    color: '#FFFFFF',\r\n    background: 'linear-gradient(90deg, #BD2859 0%, #D22D36 100%)',\r\n    border: 'none',\r\n    borderRadius: '5px',\r\n    cursor: disabled ? 'not-allowed' : 'pointer',\r\n    transition: 'background 0.3s ease, opacity 0.3s ease',\r\n    opacity: disabled ? 0.6 : 1,\r\n    width: '100%',\r\n    '&:hover': {\r\n        background: disabled\r\n            ? 'linear-gradient(90deg, #BD2859 0%, #D22D36 100%)'\r\n            : 'linear-gradient(90deg, #D22D36 0%, #BD2859 100%)',\r\n    },\r\n}));\r\n\r\nconst StyledCard = styled(Card)(({ isOutOfStock }) => ({\r\n    opacity: isOutOfStock ? 0.6 : 1,\r\n    filter: isOutOfStock ? 'grayscale(100%)' : 'none',\r\n    transition: 'opacity 0.3s ease, filter 0.3s ease',\r\n    height: '100%',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n}));\r\n\r\nconst MFAShopCard = ({ item, onCardClick }) => {\r\n    const { addToCart } = useContext(CartContext);\r\n\r\n    const getImageUrl = (itemId) => {\r\n        return `${process.env.REACT_APP_API_URL}/giftshopitems/${itemId}/image`;\r\n    };\r\n\r\n    const isOutOfStock = item.quantity === 0;\r\n    const isLowStock = item.quantity > 0 && item.quantity < LOW_STOCK_THRESHOLD;\r\n\r\n    return (\r\n        <StyledCard isOutOfStock={isOutOfStock}>\r\n            <CardActionArea\r\n                onClick={() => onCardClick(item)}\r\n                sx={{\r\n                    flexGrow: 1,\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                    position: 'relative',\r\n                }}\r\n            >\r\n                {isOutOfStock && (\r\n                    <Box\r\n                        sx={{\r\n                            position: 'absolute',\r\n                            top: 0,\r\n                            left: 0,\r\n                            width: '100%',\r\n                            height: '100%',\r\n                            backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            justifyContent: 'center',\r\n                            color: '#FFFFFF',\r\n                            fontSize: '1.2rem',\r\n                            borderRadius: '4px',\r\n                            zIndex: 1,\r\n                        }}\r\n                    >\r\n                        Out of Stock\r\n                    </Box>\r\n                )}\r\n                <Box sx={{ width: '100%', aspectRatio: '1 / 1', overflow: 'hidden' }}>\r\n                    <CardMedia\r\n                        component=\"img\"\r\n                        image={getImageUrl(item.item_id)}\r\n                        alt={item.name_}\r\n                        sx={{\r\n                            width: '100%',\r\n                            height: '100%',\r\n                            objectFit: 'cover',\r\n                            borderRadius: '4px 4px 0 0',\r\n                        }}\r\n                    />\r\n                </Box>\r\n                <CardContent\r\n                    sx={{\r\n                        flexGrow: 1,\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        alignItems: 'stretch',\r\n                        justifyContent: 'flex-start',\r\n                        padding: '16px',\r\n                    }}\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            width: '100%',\r\n                            minHeight: '50px',\r\n                            marginBottom: '8px',\r\n                            display: 'flex',\r\n                            flexDirection: 'column',\r\n                            justifyContent: 'flex-start',\r\n                        }}\r\n                    >\r\n                        <Typography\r\n                            variant=\"h6\"\r\n                            component=\"div\"\r\n                            sx={{\r\n                                textAlign: 'left',\r\n                                display: '-webkit-box',\r\n                                WebkitLineClamp: 2,\r\n                                WebkitBoxOrient: 'vertical',\r\n                                overflow: 'hidden',\r\n                            }}\r\n                        >\r\n                            {item.name_}\r\n                        </Typography>\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            width: '100%',\r\n                            minHeight: '20px',\r\n                            marginBottom: '8px',\r\n                            display: 'flex',\r\n                            flexDirection: 'column',\r\n                            justifyContent: 'flex-start',\r\n                        }}\r\n                    >\r\n                        <Typography\r\n                            variant=\"body2\"\r\n                            color=\"text.secondary\"\r\n                            sx={{ textAlign: 'left' }}\r\n                        >\r\n                            ${parseFloat(item.price).toFixed(2)}\r\n                        </Typography>\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            width: '100%',\r\n                            display: 'flex',\r\n                            flexDirection: 'column',\r\n                            justifyContent: 'flex-start',\r\n                        }}\r\n                    >\r\n                        {isLowStock && (\r\n                            <Typography\r\n                                variant=\"body2\"\r\n                                sx={{\r\n                                    color: '#dc3545',\r\n                                    fontWeight: 'bold',\r\n                                    textAlign: 'left',\r\n                                }}\r\n                            >\r\n                                Only {item.quantity} left in stock!\r\n                            </Typography>\r\n                        )}\r\n                        {isOutOfStock && (\r\n                            <Typography\r\n                                variant=\"body2\"\r\n                                sx={{\r\n                                    color: '#dc3545',\r\n                                    fontWeight: 'bold',\r\n                                    textAlign: 'left',\r\n                                }}\r\n                            >\r\n                                Out of Stock\r\n                            </Typography>\r\n                        )}\r\n                    </Box>\r\n                </CardContent>\r\n            </CardActionArea>\r\n            <CardActions>\r\n                <Tooltip\r\n                    title={\r\n                        isOutOfStock\r\n                            ? 'This item is currently out of stock.'\r\n                            : 'Add this item to your cart.'\r\n                    }\r\n                    placement=\"top\"\r\n                    arrow\r\n                >\r\n                    <span style={{ width: '100%' }}>\r\n                        <StyledButton\r\n                            fullWidth\r\n                            disabled={isOutOfStock}\r\n                            onClick={(e) => {\r\n                                e.stopPropagation();\r\n                                if (!isOutOfStock) {\r\n                                    addToCart(item);\r\n                                }\r\n                            }}\r\n                        >\r\n                            Add to Cart\r\n                        </StyledButton>\r\n                    </span>\r\n                </Tooltip>\r\n            </CardActions>\r\n        </StyledCard>\r\n    );\r\n};\r\n\r\nexport default MFAShopCard;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/MFAShopCard.jsx b/frontend/src/components/MFAShopCard.jsx
--- a/frontend/src/components/MFAShopCard.jsx	(revision be7a189a6dd3991950fbb26c832d8f9769c55e80)
+++ b/frontend/src/components/MFAShopCard.jsx	(date 1731386552000)
@@ -48,7 +48,7 @@
     const { addToCart } = useContext(CartContext);
 
     const getImageUrl = (itemId) => {
-        return `${process.env.REACT_APP_API_URL}/giftshopitems/${itemId}/image`;
+        return `http://localhost:5000/giftshopitems/${itemId}/image`;
     };
 
     const isOutOfStock = item.quantity === 0;
Index: frontend/src/components/MFAShopModalUser.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/components/MFAShopModalUser.jsx\r\nimport React, { useState, useContext } from 'react';\r\nimport { Modal, Box, Typography, Button, TextField, InputLabel, Select, MenuItem } from '@mui/material';\r\nimport { styled } from '@mui/system';\r\nimport { CartContext } from './CartContext';\r\nimport axios from 'axios';\r\n\r\nconst StyledButton = styled(Button)({\r\n    padding: '8px 12px',\r\n    marginRight: '5px',\r\n    fontSize: '14px',\r\n    color: '#FFFFFF',\r\n    background: 'linear-gradient(90deg, #BD2859 0%, #D22D36 100%)',\r\n    border: 'none',\r\n    borderRadius: '5px',\r\n    cursor: 'pointer',\r\n    transition: 'background 0.3s ease',\r\n    '&:hover': {\r\n        background: 'linear-gradient(90deg, #D22D36 0%, #BD2859 100%)',\r\n    },\r\n});\r\n\r\nconst MFAShopModalUser = ({ item, onClose, isEditing }) => {\r\n    const { addToCart } = useContext(CartContext);\r\n    const [itemData, setItemData] = useState({\r\n        name_: item ? item.name_ : '',\r\n        category: item ? item.category : '',\r\n        price: item ? item.price : '',\r\n        quantity: item ? item.quantity : '',\r\n    });\r\n    const [imageFile, setImageFile] = useState(null);\r\n\r\n    const getImageUrl = (itemId) => {\r\n        return `${process.env.REACT_APP_API_URL}/giftshopitems/${itemId}/image`;\r\n    };\r\n\r\n    const handleInputChange = (e) => {\r\n        setItemData({ ...itemData, [e.target.name]: e.target.value });\r\n    };\r\n\r\n    const handleFileChange = (e) => {\r\n        setImageFile(e.target.files[0]);\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        // Create a FormData object to send form data including the file\r\n        const formData = new FormData();\r\n        formData.append('name_', itemData.name_);\r\n        formData.append('category', itemData.category);\r\n        formData.append('price', itemData.price);\r\n        formData.append('quantity', itemData.quantity);\r\n        if (imageFile) {\r\n            formData.append('image', imageFile);\r\n        }\r\n\r\n        try {\r\n            if (item && isEditing) {\r\n                // Update existing item\r\n                await axios.put(`${process.env.REACT_APP_API_URL}/giftshopitems/${item.item_id}`, formData, {\r\n                    headers: {\r\n                        'Content-Type': 'multipart/form-data',\r\n                    },\r\n                });\r\n            } else {\r\n                // Create new item\r\n                await axios.post(`${process.env.REACT_APP_API_URL}/giftshopitems`, formData, {\r\n                    headers: {\r\n                        'Content-Type': 'multipart/form-data',\r\n                    },\r\n                });\r\n            }\r\n            // Handle success (e.g., show a success message, refresh items)\r\n            onClose();\r\n        } catch (error) {\r\n            console.error('Error uploading item:', error);\r\n            // Handle error (e.g., show an error message)\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Modal open={true} onClose={onClose}>\r\n            <Box sx={modalStyle}>\r\n                {isEditing ? (\r\n                    <form onSubmit={handleSubmit}>\r\n                        <Typography variant=\"h5\" gutterBottom>\r\n                            {item ? 'Edit Item' : 'Add New Item'}\r\n                        </Typography>\r\n\r\n                        <TextField\r\n                            fullWidth\r\n                            label=\"Item Name\"\r\n                            name=\"name_\"\r\n                            value={itemData.name_}\r\n                            onChange={handleInputChange}\r\n                            required\r\n                            sx={{ mt: 2 }}\r\n                        />\r\n\r\n                        <TextField\r\n                            fullWidth\r\n                            label=\"Category\"\r\n                            name=\"category\"\r\n                            value={itemData.category}\r\n                            onChange={handleInputChange}\r\n                            required\r\n                            sx={{ mt: 2 }}\r\n                        />\r\n\r\n                        <TextField\r\n                            fullWidth\r\n                            label=\"Price\"\r\n                            name=\"price\"\r\n                            type=\"number\"\r\n                            value={itemData.price}\r\n                            onChange={handleInputChange}\r\n                            required\r\n                            inputProps={{ step: '0.01' }}\r\n                            sx={{ mt: 2 }}\r\n                        />\r\n\r\n                        <TextField\r\n                            fullWidth\r\n                            label=\"Quantity\"\r\n                            name=\"quantity\"\r\n                            type=\"number\"\r\n                            value={itemData.quantity}\r\n                            onChange={handleInputChange}\r\n                            required\r\n                            sx={{ mt: 2 }}\r\n                        />\r\n\r\n                        <InputLabel sx={{ mt: 2 }}>Upload Image</InputLabel>\r\n                        <input type=\"file\" name=\"image\" onChange={handleFileChange} accept=\"image/*\" />\r\n\r\n                        {item && (\r\n                            <img\r\n                                src={getImageUrl(item.item_id)}\r\n                                alt={item.name_}\r\n                                style={{ width: '100%', borderRadius: '10px', marginTop: '20px' }}\r\n                            />\r\n                        )}\r\n\r\n                        <Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end' }}>\r\n                            <StyledButton onClick={onClose}>Cancel</StyledButton>\r\n                            <StyledButton type=\"submit\">{item ? 'Update Item' : 'Add Item'}</StyledButton>\r\n                        </Box>\r\n                    </form>\r\n                ) : (\r\n                    <>\r\n                        <img\r\n                            src={getImageUrl(item.item_id)}\r\n                            alt={item.name_}\r\n                            style={{ width: '100%', borderRadius: '10px', marginBottom: '20px' }}\r\n                        />\r\n                        <Typography variant=\"h5\" gutterBottom>\r\n                            {item.name_}\r\n                        </Typography>\r\n                        <Typography variant=\"body1\" gutterBottom>\r\n                            <strong>Price:</strong> ${parseFloat(item.price).toFixed(2)}\r\n                        </Typography>\r\n                        <Typography variant=\"body1\" gutterBottom>\r\n                            <strong>Category:</strong> {item.category || 'N/A'}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" gutterBottom>\r\n                            {item.description || 'No description available.'}\r\n                        </Typography>\r\n                        <StyledButton onClick={() => addToCart(item)} sx={{ marginTop: '20px' }}>\r\n                            Add to Cart\r\n                        </StyledButton>\r\n                    </>\r\n                )}\r\n            </Box>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nconst modalStyle = {\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: '90%',\r\n    maxWidth: 450,\r\n    bgcolor: 'background.paper',\r\n    borderRadius: '10px',\r\n    boxShadow: 24,\r\n    p: 4,\r\n    textAlign: 'center',\r\n};\r\n\r\nexport default MFAShopModalUser;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/MFAShopModalUser.jsx b/frontend/src/components/MFAShopModalUser.jsx
--- a/frontend/src/components/MFAShopModalUser.jsx	(revision be7a189a6dd3991950fbb26c832d8f9769c55e80)
+++ b/frontend/src/components/MFAShopModalUser.jsx	(date 1731386552000)
@@ -31,7 +31,7 @@
     const [imageFile, setImageFile] = useState(null);
 
     const getImageUrl = (itemId) => {
-        return `${process.env.REACT_APP_API_URL}/giftshopitems/${itemId}/image`;
+        return `http://localhost:5000/giftshopitems/${itemId}/image`;
     };
 
     const handleInputChange = (e) => {
@@ -58,14 +58,14 @@
         try {
             if (item && isEditing) {
                 // Update existing item
-                await axios.put(`${process.env.REACT_APP_API_URL}/giftshopitems/${item.item_id}`, formData, {
+                await axios.put(`http://localhost:5000/giftshopitems/${item.item_id}`, formData, {
                     headers: {
                         'Content-Type': 'multipart/form-data',
                     },
                 });
             } else {
                 // Create new item
-                await axios.post(`${process.env.REACT_APP_API_URL}/giftshopitems`, formData, {
+                await axios.post(`http://localhost:5000/giftshopitems`, formData, {
                     headers: {
                         'Content-Type': 'multipart/form-data',
                     },
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"3f424dd9-3ec0-47f1-b65a-6f298c371623\" name=\"Changes\" comment=\"Update api url\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/App.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/App.jsx\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"JavaScript File\" />\r\n        <option value=\"TypeScript JSX File\" />\r\n        <option value=\"CSS File\" />\r\n        <option value=\"JSX File\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Rebase.Settings\">\r\n    <option name=\"NEW_BASE\" value=\"main\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;leo2971998&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/Ephimoon/MuseumDB.git&quot;,\r\n    &quot;accountId&quot;: &quot;00f8a867-6507-43b0-82ad-48f342da4666&quot;\r\n  },\r\n  &quot;recentNewPullRequestHead&quot;: {\r\n    &quot;server&quot;: {\r\n      &quot;useHttp&quot;: false,\r\n      &quot;host&quot;: &quot;github.com&quot;,\r\n      &quot;port&quot;: null,\r\n      &quot;suffix&quot;: null\r\n    },\r\n    &quot;owner&quot;: &quot;Ephimoon&quot;,\r\n    &quot;repository&quot;: &quot;MuseumDB&quot;\r\n  }\r\n}</component>\r\n  <component name=\"PackageJsonUpdateNotifier\">\r\n    <dismissed value=\"$PROJECT_DIR$/frontend/package.json\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 5\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2ngMmHmv86bcVYIUFLyKS9H1wUv\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;ASKED_SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;Node.js.HomeNavBar.jsx.executor&quot;: &quot;Run&quot;,\r\n    &quot;Node.js.Register.jsx.executor&quot;: &quot;Run&quot;,\r\n    &quot;Node.js.emailQueue.js.executor&quot;: &quot;Run&quot;,\r\n    &quot;Node.js.server.js.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\r\n    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,\r\n    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;E:/MuseumDB-Clone/frontend/package.json&quot;,\r\n    &quot;list.type.of.created.stylesheet&quot;: &quot;CSS&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;npm.npm start.executor&quot;: &quot;Run&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.lookFeel&quot;,\r\n    &quot;ts.external.directory.path&quot;: &quot;C:\\\\Program Files\\\\JetBrains\\\\IntelliJ IDEA 2023.2.2\\\\plugins\\\\javascript-plugin\\\\jsLanguageServicesImpl\\\\external&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\nanht\\OneDrive\\Desktop\\MuseumDB\\frontend\\src\" />\r\n      <recent name=\"C:\\Users\\nanht\\OneDrive\\Desktop\\MuseumDB\\frontend\" />\r\n      <recent name=\"E:\\Projects\\MuseumDB\\frontend\\\" />\r\n      <recent name=\"E:\\Projects\\MuseumDB\\frontend\\src\\pages\\\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Compound.Run server + client\">\r\n    <configuration default=\"true\" type=\"AZURE_FUNCTION_SUPPORT\" factoryName=\"Run Functions\">\r\n      <option name=\"appName\" />\r\n      <option name=\"appServicePlanName\" />\r\n      <option name=\"appServicePlanResourceGroup\" />\r\n      <option name=\"appSettingsKey\" value=\"3ac96a00-1fd8-4bfb-ab7b-e01d81a35e58\" />\r\n      <option name=\"artifact\" />\r\n      <option name=\"debugOptions\" />\r\n      <option name=\"deployment\" />\r\n      <option name=\"deploymentStagingDirectoryPath\" />\r\n      <option name=\"funcPath\" />\r\n      <option name=\"functionHostArguments\" />\r\n      <option name=\"hostJsonPath\" />\r\n      <option name=\"insightsName\" />\r\n      <option name=\"instrumentationKey\" />\r\n      <option name=\"javaVersion\" />\r\n      <option name=\"localSettingsJsonPath\" />\r\n      <option name=\"moduleName\" />\r\n      <option name=\"os\" />\r\n      <option name=\"pricingTier\" />\r\n      <option name=\"providerMap\">\r\n        <map />\r\n      </option>\r\n      <option name=\"region\" />\r\n      <option name=\"resourceGroup\" />\r\n      <option name=\"stagingFolder\" />\r\n      <option name=\"subscription\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"emailQueue.js\" type=\"NodeJSConfigurationType\" temporary=\"true\" nameIsGenerated=\"true\" path-to-js-file=\"$PROJECT_DIR$/frontend/src/emailQueue.js\" working-dir=\"$PROJECT_DIR$/frontend/src\">\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Compound.Run server + client\" />\r\n      <item itemvalue=\"Node.js.server.js\" />\r\n      <item itemvalue=\"Node.js.emailQueue.js\" />\r\n      <item itemvalue=\"npm.npm start\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Node.js.emailQueue.js\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-jdk-9823dce3aa75-28b599e66164-intellij.indexing.shared.core-IU-242.23339.11\" />\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-5c90d61e3bab-JavaScript-IU-242.23339.11\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"3f424dd9-3ec0-47f1-b65a-6f298c371623\" name=\"Changes\" comment=\"\" />\r\n      <created>1729390425622</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1729390425622</updated>\r\n      <workItem from=\"1729390431772\" duration=\"4928000\" />\r\n      <workItem from=\"1729721588846\" duration=\"1031000\" />\r\n      <workItem from=\"1729981775513\" duration=\"30000\" />\r\n      <workItem from=\"1729981831779\" duration=\"6833000\" />\r\n      <workItem from=\"1730013036729\" duration=\"4227000\" />\r\n      <workItem from=\"1730064938056\" duration=\"16596000\" />\r\n      <workItem from=\"1730154909867\" duration=\"2462000\" />\r\n      <workItem from=\"1730173828488\" duration=\"12189000\" />\r\n      <workItem from=\"1730232149375\" duration=\"3398000\" />\r\n      <workItem from=\"1730257006877\" duration=\"4239000\" />\r\n      <workItem from=\"1730329647832\" duration=\"1764000\" />\r\n      <workItem from=\"1730412608407\" duration=\"145000\" />\r\n      <workItem from=\"1730606829651\" duration=\"1712000\" />\r\n      <workItem from=\"1730609990511\" duration=\"13250000\" />\r\n      <workItem from=\"1730696054431\" duration=\"3950000\" />\r\n      <workItem from=\"1730761207686\" duration=\"896000\" />\r\n      <workItem from=\"1730781467559\" duration=\"11615000\" />\r\n      <workItem from=\"1730794665528\" duration=\"489000\" />\r\n      <workItem from=\"1730835007512\" duration=\"6818000\" />\r\n      <workItem from=\"1730848420240\" duration=\"76000\" />\r\n      <workItem from=\"1730849013073\" duration=\"7000\" />\r\n      <workItem from=\"1730930113416\" duration=\"13575000\" />\r\n      <workItem from=\"1731022247236\" duration=\"416000\" />\r\n      <workItem from=\"1731083407018\" duration=\"8756000\" />\r\n      <workItem from=\"1731153847838\" duration=\"1137000\" />\r\n      <workItem from=\"1731216326690\" duration=\"16466000\" />\r\n      <workItem from=\"1731235644586\" duration=\"2106000\" />\r\n      <workItem from=\"1731240526189\" duration=\"1466000\" />\r\n      <workItem from=\"1731243416991\" duration=\"5382000\" />\r\n      <workItem from=\"1731275400128\" duration=\"31000\" />\r\n      <workItem from=\"1731363371517\" duration=\"4448000\" />\r\n      <workItem from=\"1731370029114\" duration=\"7206000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Updated server.js\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730190575521</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730190575521</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Update api url\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730261657195</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730261657195</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"3\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Updated server.js\" />\r\n    <MESSAGE value=\"Update api url\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Update api url\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" type=\"javascript\">\r\n          <url>file://$PROJECT_DIR$/frontend/src/components/Logout.jsx</url>\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"javascript\">\r\n          <url>file://$PROJECT_DIR$/frontend/src/components/GiftShopForm.jsx</url>\r\n          <line>2</line>\r\n          <option name=\"timeStamp\" value=\"2\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision be7a189a6dd3991950fbb26c832d8f9769c55e80)
+++ b/.idea/workspace.xml	(date 1731390008000)
@@ -6,7 +6,31 @@
   <component name="ChangeListManager">
     <list default="true" id="3f424dd9-3ec0-47f1-b65a-6f298c371623" name="Changes" comment="Update api url">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/App.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/App.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/frontend/src/components/AdminResetPasswordModal.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/components/AdminResetPasswordModal.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/frontend/src/components/AnnouncementDisplay.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/components/AnnouncementDisplay.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/frontend/src/components/AnnouncementFormModal.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/components/AnnouncementFormModal.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/frontend/src/components/ArtLookUp.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/components/ArtLookUp.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/frontend/src/components/ArtworkCard.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/components/ArtworkCard.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/frontend/src/components/ChangePasswordModal.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/components/ChangePasswordModal.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/frontend/src/components/GiftShopAdmin.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/components/GiftShopAdmin.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/frontend/src/components/GiftShopForm.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/components/GiftShopForm.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/frontend/src/components/Login.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/components/Login.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/frontend/src/components/MFAShopCard.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/components/MFAShopCard.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/frontend/src/components/MFAShopModalUser.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/components/MFAShopModalUser.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/frontend/src/components/ManageUsers.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/components/ManageUsers.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/frontend/src/components/Register.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/components/Register.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/frontend/src/components/UserFormModal.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/components/UserFormModal.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/frontend/src/components/Verify.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/components/Verify.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/frontend/src/css/event_director.css" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/css/event_director.css" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/frontend/src/pages/BecomeAMember.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/pages/BecomeAMember.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/frontend/src/pages/Checkout.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/pages/Checkout.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/frontend/src/pages/Dashboards/AdminDashboard.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/pages/Dashboards/AdminDashboard.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/frontend/src/pages/Dashboards/CurateArt.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/pages/Dashboards/CurateArt.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/frontend/src/pages/Dashboards/EventDashboard.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/pages/Dashboards/EventDashboard.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/frontend/src/pages/ExhibitionsAndEvents.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/pages/ExhibitionsAndEvents.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/frontend/src/pages/MFAShop.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/pages/MFAShop.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/frontend/src/pages/ProfilePage.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/pages/ProfilePage.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/frontend/src/pages/Report.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/pages/Report.jsx" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -18,8 +42,8 @@
       <list>
         <option value="JavaScript File" />
         <option value="TypeScript JSX File" />
-        <option value="CSS File" />
         <option value="JSX File" />
+        <option value="CSS File" />
       </list>
     </option>
   </component>
@@ -195,7 +219,7 @@
       <workItem from="1731243416991" duration="5382000" />
       <workItem from="1731275400128" duration="31000" />
       <workItem from="1731363371517" duration="4448000" />
-      <workItem from="1731370029114" duration="7206000" />
+      <workItem from="1731370029114" duration="12925000" />
     </task>
     <task id="LOCAL-00001" summary="Updated server.js">
       <option name="closed" value="true" />
Index: frontend/src/pages/BecomeAMember.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState } from 'react';\r\nimport {\r\n    Box,\r\n    Button,\r\n    TextField,\r\n    Typography,\r\n    InputAdornment,\r\n    Grid,\r\n    CssBaseline,\r\n    MenuItem,\r\n    Select,\r\n    FormControl,\r\n    InputLabel,\r\n    Alert,\r\n    Snackbar,\r\n    CircularProgress\r\n} from '@mui/material';\r\nimport PersonIcon from '@mui/icons-material/Person';\r\nimport LockIcon from '@mui/icons-material/Lock';\r\nimport AccountBoxIcon from '@mui/icons-material/AccountBox';\r\nimport EmailIcon from '@mui/icons-material/Email';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport HomeNavBar from '../components/HomeNavBar';\r\nimport BecomeMemberBackground from '../assets/BecomeAMemberBackground.png';\r\n\r\nconst BecomeAMember = () => {\r\n    const navigate = useNavigate();\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [formData, setFormData] = useState({\r\n        firstName: '',\r\n        lastName: '',\r\n        dob: '',\r\n        username: '',\r\n        password: '',\r\n        email: '',\r\n        membershipType: '',\r\n    });\r\n\r\n    const [errors, setErrors] = useState({});\r\n    const [snackbar, setSnackbar] = useState({\r\n        open: false,\r\n        message: '',\r\n        severity: 'success'\r\n    });\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n        });\r\n        if (errors[name]) {\r\n            setErrors(prev => ({ ...prev, [name]: '' }));\r\n        }\r\n    };\r\n\r\n    const handleSnackbarClose = () => {\r\n        setSnackbar(prev => ({ ...prev, open: false }));\r\n        // If it was a success message, navigate after closing\r\n        if (snackbar.severity === 'success') {\r\n            navigate('/');\r\n        }\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setErrors({});\r\n        setIsLoading(true);\r\n\r\n        const submitData = {\r\n            first_name: formData.firstName,\r\n            last_name: formData.lastName,\r\n            username: formData.username,\r\n            type_of_membership: formData.membershipType\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_API_URL}/membership-registration`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(submitData)\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                if (data.errors) {\r\n                    setErrors(data.errors);\r\n                    setSnackbar({\r\n                        open: true,\r\n                        message: 'Please fix the errors in the form',\r\n                        severity: 'error'\r\n                    });\r\n                    setIsLoading(false);\r\n                    return;\r\n                }\r\n                throw new Error(data.error || 'Registration failed');\r\n            }\r\n\r\n            setSnackbar({\r\n                open: true,\r\n                message: 'Membership registration successful! Redirecting to home page...',\r\n                severity: 'success'\r\n            });\r\n\r\n            // Clear form after success\r\n            setFormData({\r\n                firstName: '',\r\n                lastName: '',\r\n                dob: '',\r\n                username: '',\r\n                password: '',\r\n                email: '',\r\n                membershipType: '',\r\n            });\r\n\r\n            // Navigate after delay\r\n            setTimeout(() => {\r\n                navigate('/');\r\n            }, 1500);\r\n\r\n        } catch (error) {\r\n            console.error('Error during registration:', error);\r\n            setSnackbar({\r\n                open: true,\r\n                message: error.message || 'An error occurred during registration',\r\n                severity: 'error'\r\n            });\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className=\"become-member-container\"\r\n            style={{\r\n                backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url(${BecomeMemberBackground})`,\r\n                backgroundSize: 'cover',\r\n                backgroundPosition: 'center',\r\n                backgroundRepeat: 'no-repeat',\r\n                minHeight: '100vh',\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                alignItems: 'center',\r\n            }}\r\n        >\r\n            <HomeNavBar />\r\n            <div className=\"register-container\" style={{\r\n                marginTop: '100px',\r\n                textAlign: 'center',\r\n                backgroundColor: 'rgba(255, 255, 255, 0.9)',\r\n                padding: '30px',\r\n                borderRadius: '10px',\r\n                boxShadow: '0px 4px 10px rgba(0, 0, 0, 0.3)',\r\n                width: '500px',\r\n                maxWidth: '90%',\r\n            }}>\r\n                <CssBaseline />\r\n                <Typography component=\"h1\" variant=\"h5\" style={{ color: '#333', marginBottom: '20px' }}>\r\n                    Become a Member\r\n                </Typography>\r\n                <Box component=\"form\" onSubmit={handleSubmit} noValidate>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                fullWidth\r\n                                label=\"First Name\"\r\n                                value={formData.firstName}\r\n                                onChange={handleChange}\r\n                                name=\"firstName\"\r\n                                error={!!errors.firstName}\r\n                                helperText={errors.firstName}\r\n                                InputProps={{\r\n                                    startAdornment: (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <PersonIcon />\r\n                                        </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                fullWidth\r\n                                label=\"Last Name\"\r\n                                value={formData.lastName}\r\n                                onChange={handleChange}\r\n                                name=\"lastName\"\r\n                                error={!!errors.lastName}\r\n                                helperText={errors.lastName}\r\n                                InputProps={{\r\n                                    startAdornment: (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <PersonIcon />\r\n                                        </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <TextField\r\n                        fullWidth\r\n                        label=\"Date of Birth\"\r\n                        type=\"date\"\r\n                        value={formData.dob}\r\n                        onChange={handleChange}\r\n                        name=\"dob\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        sx={{ mt: 2 }}\r\n                        error={!!errors.dob}\r\n                        helperText={errors.dob}\r\n                    />\r\n\r\n                    <TextField\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"Username\"\r\n                        value={formData.username}\r\n                        onChange={handleChange}\r\n                        name=\"username\"\r\n                        error={!!errors.username}\r\n                        helperText={errors.username}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <AccountBoxIcon />\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n\r\n                    <TextField\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        value={formData.password}\r\n                        onChange={handleChange}\r\n                        name=\"password\"\r\n                        error={!!errors.password}\r\n                        helperText={errors.password}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <LockIcon />\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n\r\n                    <TextField\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"Email\"\r\n                        value={formData.email}\r\n                        onChange={handleChange}\r\n                        name=\"email\"\r\n                        error={!!errors.email}\r\n                        helperText={errors.email}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <EmailIcon />\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n\r\n                    <FormControl fullWidth sx={{ mt: 2 }}>\r\n                        <InputLabel id=\"membership-type-label\">Membership Type</InputLabel>\r\n                        <Select\r\n                            labelId=\"membership-type-label\"\r\n                            id=\"membershipType\"\r\n                            name=\"membershipType\"\r\n                            value={formData.membershipType}\r\n                            onChange={handleChange}\r\n                            label=\"Membership Type\"\r\n                            error={!!errors.membershipType}\r\n                        >\r\n                            <MenuItem value=\"family\">Family</MenuItem>\r\n                            <MenuItem value=\"individual\">Individual</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disabled={isLoading}\r\n                        sx={{\r\n                            mt: 2,\r\n                            mb: 2,\r\n                            height: 48,\r\n                            position: 'relative'\r\n                        }}\r\n                    >\r\n                        {isLoading ? (\r\n                            <>\r\n                                <CircularProgress\r\n                                    size={24}\r\n                                    sx={{\r\n                                        position: 'absolute',\r\n                                        left: '50%',\r\n                                        marginLeft: '-12px'\r\n                                    }}\r\n                                />\r\n                                Processing...\r\n                            </>\r\n                        ) : (\r\n                            'Complete Membership Registration'\r\n                        )}\r\n                    </Button>\r\n                </Box>\r\n            </div>\r\n\r\n            <Snackbar\r\n                open={snackbar.open}\r\n                autoHideDuration={6000}\r\n                onClose={handleSnackbarClose}\r\n                anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n                sx={{\r\n                    '& .MuiAlert-root': {\r\n                        width: '100%',\r\n                        maxWidth: '600px',\r\n                        fontSize: '1rem'\r\n                    }\r\n                }}\r\n            >\r\n                <Alert\r\n                    onClose={handleSnackbarClose}\r\n                    severity={snackbar.severity}\r\n                    variant=\"filled\"\r\n                    sx={{\r\n                        width: '100%',\r\n                        '& .MuiAlert-message': {\r\n                            width: '100%',\r\n                            textAlign: 'center'\r\n                        }\r\n                    }}\r\n                >\r\n                    {snackbar.message}\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BecomeAMember;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/pages/BecomeAMember.jsx b/frontend/src/pages/BecomeAMember.jsx
--- a/frontend/src/pages/BecomeAMember.jsx	(revision be7a189a6dd3991950fbb26c832d8f9769c55e80)
+++ b/frontend/src/pages/BecomeAMember.jsx	(date 1731386630000)
@@ -75,7 +75,7 @@
         };
 
         try {
-            const response = await fetch(`${process.env.REACT_APP_API_URL}/membership-registration`, {
+            const response = await fetch(`http://localhost:5000/membership-registration`, {
                 method: 'POST',
                 headers: {
                     'Content-Type': 'application/json',
Index: frontend/src/components/AnnouncementDisplay.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/components/AnnouncementDisplay.jsx\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport {\r\n    Box,\r\n    Typography,\r\n    Grid,\r\n    ToggleButton,\r\n    ToggleButtonGroup,\r\n    Skeleton,\r\n} from '@mui/material';\r\nimport AnnouncementCard from './AnnouncementCard';\r\nimport AnnouncementModal from './AnnouncementModal';\r\nimport styles from '../css/AnnouncementDisplay.module.css';\r\n\r\nconst AnnouncementDisplay = () => {\r\n    const [announcements, setAnnouncements] = useState([]);\r\n    const [filteredAnnouncements, setFilteredAnnouncements] = useState([]);\r\n    const [selectedAnnouncement, setSelectedAnnouncement] = useState(null);\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [filter, setFilter] = useState('all');\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    const userId = localStorage.getItem('userId');\r\n    const role = localStorage.getItem('role');\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        fetch(`${process.env.REACT_APP_API_URL}/announcements/user`, {\r\n            headers: { 'user-id': userId, role },\r\n        })\r\n            .then((response) => {\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch announcements');\r\n                }\r\n                return response.json();\r\n            })\r\n            .then((data) => {\r\n                setAnnouncements(data);\r\n                setFilteredAnnouncements(data);\r\n                setLoading(false);\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error fetching announcements:', error);\r\n                setError(error.message);\r\n                setLoading(false);\r\n            });\r\n    }, []);\r\n\r\n    // Handle card click to show modal\r\n    const handleCardClick = (announcement) => {\r\n        setSelectedAnnouncement(announcement);\r\n        setIsModalOpen(true);\r\n    };\r\n\r\n    const closeModal = () => {\r\n        setIsModalOpen(false);\r\n    };\r\n\r\n    const handleFilterChange = (event, newFilter) => {\r\n        if (newFilter !== null) {\r\n            setFilter(newFilter);\r\n            if (newFilter === 'all') {\r\n                setFilteredAnnouncements(announcements);\r\n            } else {\r\n                setFilteredAnnouncements(\r\n                    announcements.filter(\r\n                        (announcement) =>\r\n                            announcement.priority.toLowerCase() === newFilter.toLowerCase()\r\n                    )\r\n                );\r\n            }\r\n        }\r\n    };\r\n\r\n    if (loading) {\r\n        return (\r\n            <Box className={styles.announcementsContainer}>\r\n                <Typography\r\n                    variant=\"h5\"\r\n                    component=\"h2\"\r\n                    gutterBottom\r\n                    align=\"center\"\r\n                    className={styles.title}\r\n                >\r\n                    Announcements\r\n                </Typography>\r\n                <Grid container spacing={2}>\r\n                    {[...Array(6)].map((_, index) => (\r\n                        <Grid item xs={12} sm={6} md={4} key={index}>\r\n                            <Skeleton variant=\"rectangular\" height={200} />\r\n                        </Grid>\r\n                    ))}\r\n                </Grid>\r\n            </Box>\r\n        );\r\n    }\r\n\r\n    if (error) {\r\n        return <Typography>Error: {error}</Typography>;\r\n    }\r\n\r\n    return (\r\n        // Background color white\r\n        <div className={styles.background}>\r\n            <Box className={styles.announcementsContainer}>\r\n                <Typography\r\n                    variant=\"h5\"\r\n                    component=\"h2\"\r\n                    gutterBottom\r\n                    align=\"center\"\r\n                    className={styles.title}\r\n                >\r\n                    Announcements\r\n                </Typography>\r\n\r\n                <Box sx={{ marginBottom: 2, textAlign: 'center' }}>\r\n                    <ToggleButtonGroup\r\n                        value={filter}\r\n                        exclusive\r\n                        onChange={handleFilterChange}\r\n                        aria-label=\"announcement filter\"\r\n                    >\r\n                        <ToggleButton value=\"all\">All</ToggleButton>\r\n                        <ToggleButton value=\"high\">High Priority</ToggleButton>\r\n                        <ToggleButton value=\"medium\">Medium Priority</ToggleButton>\r\n                        <ToggleButton value=\"low\">Low Priority</ToggleButton>\r\n                    </ToggleButtonGroup>\r\n                </Box>\r\n\r\n                {filteredAnnouncements.length === 0 ? (\r\n                    <Typography align=\"center\">No announcements to display.</Typography>\r\n                ) : (\r\n                    <Grid container spacing={3}>\r\n                        {filteredAnnouncements.map((announcement) => (\r\n                            <Grid item xs={12} sm={6} md={4} key={announcement.id}>\r\n                                <AnnouncementCard\r\n                                    announcement={announcement}\r\n                                    onCardClick={handleCardClick}\r\n                                />\r\n                            </Grid>\r\n                        ))}\r\n                    </Grid>\r\n                )}\r\n\r\n                {/* Modal for announcement details */}\r\n                {isModalOpen && selectedAnnouncement && (\r\n                    <AnnouncementModal\r\n                        announcement={selectedAnnouncement}\r\n                        onClose={closeModal}\r\n                    />\r\n                )}\r\n            </Box>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default AnnouncementDisplay;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/AnnouncementDisplay.jsx b/frontend/src/components/AnnouncementDisplay.jsx
--- a/frontend/src/components/AnnouncementDisplay.jsx	(revision be7a189a6dd3991950fbb26c832d8f9769c55e80)
+++ b/frontend/src/components/AnnouncementDisplay.jsx	(date 1731386552000)
@@ -27,7 +27,7 @@
 
     useEffect(() => {
         setLoading(true);
-        fetch(`${process.env.REACT_APP_API_URL}/announcements/user`, {
+        fetch(`http://localhost:5000/announcements/user`, {
             headers: { 'user-id': userId, role },
         })
             .then((response) => {
Index: frontend/src/pages/Checkout.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/pages/Checkout.jsx\r\nimport React, { useContext, useState } from 'react';\r\nimport { CartContext } from '../components/CartContext';\r\nimport HomeNavBar from '../components/HomeNavBar';\r\nimport { useNavigate } from 'react-router-dom'; // Import useNavigate for navigation\r\nimport styles from '../css/Checkout.module.css'; // Import Checkout-specific styles\r\n\r\nconst Checkout = () => {\r\n    const { cartItems, clearCart, updateQuantity } = useContext(CartContext);\r\n    const [transactionStatus, setTransactionStatus] = useState(null);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n\r\n    const subtotal = cartItems.reduce((total, item) => total + item.price * item.quantity, 0);\r\n    const taxRate = 0.0825; // 8.25% tax\r\n    const tax = subtotal * taxRate;\r\n    const totalAmount = subtotal + tax;\r\n\r\n    const navigate = useNavigate(); // Initialize navigate\r\n\r\n    // Retrieve user credentials from localStorage or your auth context\r\n    const userId = localStorage.getItem('userId'); // Adjust based on your auth implementation\r\n    const role = localStorage.getItem('role');     // Adjust based on your auth implementation\r\n\r\n    const handleCheckout = () => {\r\n        // Prepare data for backend\r\n        const transactionData = {\r\n            payment_method: 'credit', // Replace with actual payment method from user input if available\r\n            items: cartItems.map(item => ({\r\n                item_id: item.item_id,\r\n                quantity: item.quantity,\r\n            })),\r\n        };\r\n\r\n        // Validate user credentials\r\n        if (!userId || !role) {\r\n            setTransactionStatus('error');\r\n            setErrorMessage('User is not authenticated.');\r\n            return;\r\n        }\r\n\r\n        // Send data to backend\r\n        fetch(`${process.env.REACT_APP_API_URL}/checkout`, { // Ensure this endpoint matches your backend\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'user-id': userId, // Add user-id header\r\n                'role': role,      // Add role header\r\n            },\r\n            body: JSON.stringify(transactionData),\r\n        })\r\n            .then(async response => {\r\n                const data = await response.json();\r\n                if (!response.ok) {\r\n                    throw new Error(data.message || 'Transaction failed');\r\n                }\r\n                return data;\r\n            })\r\n            .then(data => {\r\n                setTransactionStatus('success');\r\n                clearCart();\r\n            })\r\n            .catch(error => {\r\n                console.error('Error processing transaction:', error);\r\n                setErrorMessage(error.message);\r\n                setTransactionStatus('error');\r\n            });\r\n    };\r\n\r\n    const handleGoBack = () => {\r\n        navigate('/cart'); // Navigate back to the cart page\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <HomeNavBar />\r\n            <div className={styles.checkoutContainer}>\r\n                <h1>Checkout</h1>\r\n                {transactionStatus === 'success' ? (\r\n                    <div className={styles.successMessage}>\r\n                        <p>Your transaction was successful!</p>\r\n                        <button\r\n                            className={styles.goBackButton}\r\n                            onClick={() => navigate('/')}\r\n                        >\r\n                            Return to Home\r\n                        </button>\r\n                    </div>\r\n                ) : transactionStatus === 'error' ? (\r\n                    <div className={styles.errorMessage}>\r\n                        <p>There was an error processing your transaction: {errorMessage}</p>\r\n                        <button\r\n                            className={styles.goBackButton}\r\n                            onClick={handleGoBack}\r\n                        >\r\n                            Go Back to Cart\r\n                        </button>\r\n                    </div>\r\n                ) : (\r\n                    <>\r\n                        <div className={styles.orderSummary}>\r\n                            <h2>Order Summary</h2>\r\n                            <table className={styles.orderTable}>\r\n                                <thead>\r\n                                <tr>\r\n                                    <th>#</th>\r\n                                    <th>Item</th>\r\n                                    <th>Price</th>\r\n                                    <th>Quantity</th>\r\n                                    <th>Subtotal</th>\r\n                                </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                {cartItems.map((item, index) => (\r\n                                    <tr key={item.item_id}>\r\n                                        <td>{index + 1}</td>\r\n                                        <td>{item.name_}</td>\r\n                                        <td>${parseFloat(item.price).toFixed(2)}</td>\r\n                                        <td>{item.quantity}</td>\r\n                                        <td>${(item.price * item.quantity).toFixed(2)}</td>\r\n                                    </tr>\r\n                                ))}\r\n                                </tbody>\r\n                            </table>\r\n                            <div className={styles.financials}>\r\n                                <div className={styles.financialRow}>\r\n                                    <span>Subtotal:</span>\r\n                                    <span>${subtotal.toFixed(2)}</span>\r\n                                </div>\r\n                                <div className={styles.financialRow}>\r\n                                    <span>Tax (8.25%):</span>\r\n                                    <span>${tax.toFixed(2)}</span>\r\n                                </div>\r\n                                <div className={styles.financialRow}>\r\n                                    <span>Total:</span>\r\n                                    <span>${totalAmount.toFixed(2)}</span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        {/* Button Group */}\r\n                        <div className={styles.buttonGroup}>\r\n                            <button\r\n                                className={styles.clearCartButton} // Preserving original class name\r\n                                onClick={handleCheckout}\r\n                            >\r\n                                Confirm Purchase\r\n                            </button>\r\n                            <button\r\n                                className={styles.goBackButton}\r\n                                onClick={handleGoBack}\r\n                            >\r\n                                Go Back to Cart\r\n                            </button>\r\n                        </div>\r\n                    </>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default Checkout;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/pages/Checkout.jsx b/frontend/src/pages/Checkout.jsx
--- a/frontend/src/pages/Checkout.jsx	(revision be7a189a6dd3991950fbb26c832d8f9769c55e80)
+++ b/frontend/src/pages/Checkout.jsx	(date 1731386630000)
@@ -39,7 +39,7 @@
         }
 
         // Send data to backend
-        fetch(`${process.env.REACT_APP_API_URL}/checkout`, { // Ensure this endpoint matches your backend
+        fetch(`http://localhost:5000/checkout`, { // Ensure this endpoint matches your backend
             method: 'POST',
             headers: {
                 'Content-Type': 'application/json',
Index: frontend/src/components/GiftShopAdmin.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/pages/GiftShopAdmin.jsx\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport GiftShopFormModal from '../components/GiftShopForm';\r\nimport GiftShopLogDetailsModal from '../components/GiftShopLogDetailsModal';\r\nimport styles from '../css/GiftShopAdmin.module.css';\r\nimport HomeNavBar from './HomeNavBar';\r\n\r\nconst GiftShopAdmin = () => {\r\n    const [items, setItems] = useState([]);\r\n    const [logs, setLogs] = useState([]);\r\n    const [selectedItem, setSelectedItem] = useState(null);\r\n    const [isFormModalOpen, setIsFormModalOpen] = useState(false);\r\n    const [showDeleteModal, setShowDeleteModal] = useState(false);\r\n    const [showRestoreModal, setShowRestoreModal] = useState(false);\r\n    const [itemToDelete, setItemToDelete] = useState(null);\r\n    const [itemToRestore, setItemToRestore] = useState(null);\r\n    const [isLogView, setIsLogView] = useState(false); // State to toggle between Manage and Logs\r\n    const [showLogDetailsModal, setShowLogDetailsModal] = useState(false);\r\n    const [selectedLogDetails, setSelectedLogDetails] = useState(null);\r\n\r\n    // Pagination state variables\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const itemsPerPage = 10; // Adjust the number of items per page as needed\r\n\r\n    // Filter state variables for items\r\n    const [filterName, setFilterName] = useState('');\r\n    const [filterCategory, setFilterCategory] = useState('');\r\n    const [filterPriceMin, setFilterPriceMin] = useState('');\r\n    const [filterPriceMax, setFilterPriceMax] = useState('');\r\n    const [filterQuantity, setFilterQuantity] = useState('');\r\n    const [filterStatus, setFilterStatus] = useState('');\r\n    const [filterLowStock, setFilterLowStock] = useState(false); // New state for Low Stock Filter\r\n\r\n    // Filter state variables for logs\r\n    const [filterLogAction, setFilterLogAction] = useState('');\r\n    const [filterLogItemName, setFilterLogItemName] = useState('');\r\n    const [filterLogUser, setFilterLogUser] = useState('');\r\n    const [filterLogRole, setFilterLogRole] = useState('');\r\n    const [filterLogDateFrom, setFilterLogDateFrom] = useState('');\r\n    const [filterLogDateTo, setFilterLogDateTo] = useState('');\r\n\r\n    useEffect(() => {\r\n        if (isLogView) {\r\n            fetchLogs();\r\n        } else {\r\n            fetchItems();\r\n        }\r\n    }, [isLogView]);\r\n\r\n    useEffect(() => {\r\n        setCurrentPage(1);\r\n    }, [\r\n        items,\r\n        logs,\r\n        filterName,\r\n        filterCategory,\r\n        filterPriceMin,\r\n        filterPriceMax,\r\n        filterQuantity,\r\n        filterStatus,\r\n        filterLowStock,\r\n        filterLogAction,\r\n        filterLogItemName,\r\n        filterLogUser,\r\n        filterLogRole,\r\n        filterLogDateFrom,\r\n        filterLogDateTo,\r\n    ]);\r\n\r\n    // Fetch gift shop items (including deleted for admin view)\r\n    const fetchItems = () => {\r\n        axios\r\n            .get(`${process.env.REACT_APP_API_URL}/giftshopitemsall`)\r\n            .then((response) => setItems(response.data))\r\n            .catch((error) => console.error('Error fetching items:', error));\r\n    };\r\n\r\n    // Fetch logs\r\n    const fetchLogs = () => {\r\n        axios\r\n            .get(`${process.env.REACT_APP_API_URL}/giftshopitems/logs`, {\r\n                headers: {\r\n                    'user-id': localStorage.getItem('userId'),\r\n                    role: localStorage.getItem('role'),\r\n                },\r\n            })\r\n            .then((response) => setLogs(response.data))\r\n            .catch((error) => console.error('Error fetching logs:', error));\r\n    };\r\n\r\n    const getImageUrl = (itemId) => {\r\n        return `${process.env.REACT_APP_API_URL}/giftshopitems/${itemId}/image`;\r\n    };\r\n\r\n    // Confirm Soft or Hard Delete\r\n    const confirmDelete = (id) => {\r\n        setItemToDelete(id);\r\n        setShowDeleteModal(true);\r\n    };\r\n\r\n    const cancelDelete = () => {\r\n        setItemToDelete(null);\r\n        setShowDeleteModal(false);\r\n    };\r\n\r\n    const handleConfirmDelete = (isHardDelete) => {\r\n        if (itemToDelete) {\r\n            isHardDelete ? handleHardDelete(itemToDelete) : handleSoftDelete(itemToDelete);\r\n        }\r\n        cancelDelete();\r\n    };\r\n\r\n    const handleSoftDelete = (id) => {\r\n        const role = localStorage.getItem('role');\r\n        axios\r\n            .put(\r\n                `${process.env.REACT_APP_API_URL}/giftshopitems/${id}/soft-delete`,\r\n                {},\r\n                {\r\n                    headers: { role: role, 'user-id': localStorage.getItem('userId') },\r\n                }\r\n            )\r\n            .then(() => fetchItems())\r\n            .catch((error) => console.error('Error soft deleting item:', error));\r\n    };\r\n\r\n    const handleHardDelete = (id) => {\r\n        const role = localStorage.getItem('role');\r\n        axios\r\n            .delete(`${process.env.REACT_APP_API_URL}/giftshopitems/${id}/hard-delete`, {\r\n                headers: { role: role, 'user-id': localStorage.getItem('userId') },\r\n            })\r\n            .then(() => fetchItems())\r\n            .catch((error) => console.error('Error hard deleting item:', error));\r\n    };\r\n\r\n    // Confirm Restore\r\n    const confirmRestore = (id) => {\r\n        setItemToRestore(id);\r\n        setShowRestoreModal(true);\r\n    };\r\n\r\n    const cancelRestore = () => {\r\n        setItemToRestore(null);\r\n        setShowRestoreModal(false);\r\n    };\r\n\r\n    const handleRestore = (id) => {\r\n        const role = localStorage.getItem('role');\r\n        axios\r\n            .put(\r\n                `${process.env.REACT_APP_API_URL}/giftshopitems/${id}/restore`,\r\n                {},\r\n                {\r\n                    headers: { role: role, 'user-id': localStorage.getItem('userId') },\r\n                }\r\n            )\r\n            .then(() => fetchItems())\r\n            .catch((error) => console.error('Error restoring item:', error));\r\n        cancelRestore();\r\n    };\r\n\r\n    const openFormModal = (item = null) => {\r\n        setSelectedItem(item);\r\n        setIsFormModalOpen(true);\r\n    };\r\n\r\n    const closeFormModal = () => {\r\n        setIsFormModalOpen(false);\r\n        setSelectedItem(null);\r\n        fetchItems();\r\n    };\r\n\r\n    // Open Log Details Modal\r\n    const openLogDetailsModal = (log) => {\r\n        setSelectedLogDetails(log);\r\n        setShowLogDetailsModal(true);\r\n    };\r\n\r\n    const closeLogDetailsModal = () => {\r\n        setSelectedLogDetails(null);\r\n        setShowLogDetailsModal(false);\r\n    };\r\n\r\n    // Filter items based on filter criteria\r\n    const filteredItems = items.filter((item) => {\r\n        const matchesName = item.name_.toLowerCase().includes(filterName.toLowerCase());\r\n        const matchesCategory = filterCategory ? item.category === filterCategory : true;\r\n        const matchesPriceMin = filterPriceMin ? parseFloat(item.price) >= parseFloat(filterPriceMin) : true;\r\n        const matchesPriceMax = filterPriceMax ? parseFloat(item.price) <= parseFloat(filterPriceMax) : true;\r\n        const matchesQuantity = filterQuantity ? item.quantity === parseInt(filterQuantity) : true;\r\n        const matchesStatus = filterStatus\r\n            ? filterStatus === 'Active'\r\n                ? item.is_deleted === 0\r\n                : item.is_deleted === 1\r\n            : true;\r\n        const matchesLowStock = filterLowStock ? item.quantity < 10 : true;\r\n        return (\r\n            matchesName &&\r\n            matchesCategory &&\r\n            matchesPriceMin &&\r\n            matchesPriceMax &&\r\n            matchesQuantity &&\r\n            matchesStatus &&\r\n            matchesLowStock\r\n        );\r\n    });\r\n\r\n    // Filter logs based on filter criteria\r\n    const filteredLogs = logs.filter((log) => {\r\n        const matchesAction = filterLogAction\r\n            ? log.action.toLowerCase().includes(filterLogAction.toLowerCase())\r\n            : true;\r\n        const matchesItemName = filterLogItemName\r\n            ? (log.item_name || '').toLowerCase().includes(filterLogItemName.toLowerCase())\r\n            : true;\r\n        const matchesUser = filterLogUser\r\n            ? (log.username || '').toLowerCase().includes(filterLogUser.toLowerCase())\r\n            : true;\r\n        const matchesRole = filterLogRole\r\n            ? (log.role || '').toLowerCase().includes(filterLogRole.toLowerCase())\r\n            : true;\r\n        const logDate = new Date(log.timestamp);\r\n        const matchesDateFrom = filterLogDateFrom ? logDate >= new Date(filterLogDateFrom) : true;\r\n        const matchesDateTo = filterLogDateTo ? logDate <= new Date(filterLogDateTo) : true;\r\n\r\n        return (\r\n            matchesAction &&\r\n            matchesItemName &&\r\n            matchesUser &&\r\n            matchesRole &&\r\n            matchesDateFrom &&\r\n            matchesDateTo\r\n        );\r\n    });\r\n\r\n    // Calculate total pages and current items\r\n    const totalPages = isLogView\r\n        ? Math.ceil(filteredLogs.length / itemsPerPage)\r\n        : Math.ceil(filteredItems.length / itemsPerPage);\r\n\r\n    const indexOfLastItem = currentPage * itemsPerPage;\r\n    const indexOfFirstItem = indexOfLastItem - itemsPerPage;\r\n\r\n    const currentItemsToDisplay = isLogView\r\n        ? filteredLogs.slice(indexOfFirstItem, indexOfLastItem)\r\n        : filteredItems.slice(indexOfFirstItem, indexOfLastItem);\r\n\r\n    // Extract unique categories for filter dropdown\r\n    const uniqueCategories = [...new Set(items.map((item) => item.category))];\r\n\r\n    // Functions to switch views and reset filters\r\n    const switchToLogView = () => {\r\n        setIsLogView(true);\r\n        // Clear log filters\r\n        setFilterLogAction('');\r\n        setFilterLogItemName('');\r\n        setFilterLogUser('');\r\n        setFilterLogRole('');\r\n        setFilterLogDateFrom('');\r\n        setFilterLogDateTo('');\r\n    };\r\n\r\n    const switchToManageItemsView = () => {\r\n        setIsLogView(false);\r\n        // Clear item filters\r\n        setFilterName('');\r\n        setFilterCategory('');\r\n        setFilterPriceMin('');\r\n        setFilterPriceMax('');\r\n        setFilterQuantity('');\r\n        setFilterStatus('');\r\n        setFilterLowStock(false);\r\n    };\r\n\r\n    return (\r\n        <div className={styles.adminContainer}>\r\n            <HomeNavBar />\r\n            <h1 className={styles.title}>Gift Shop Admin</h1>\r\n\r\n            {/* Action Buttons */}\r\n            <div className={styles.actionButtons}>\r\n                {!isLogView && (\r\n                    <button className={`${styles.button} ${styles.addButton}`} onClick={() => openFormModal()}>\r\n                        Add New Item\r\n                    </button>\r\n                )}\r\n                {!isLogView && (\r\n                    <button\r\n                        className={`${styles.button} ${styles.viewLogsButton}`}\r\n                        onClick={switchToLogView}\r\n                    >\r\n                        View Logs\r\n                    </button>\r\n                )}\r\n\r\n                {isLogView && (\r\n                    <button\r\n                        className={`${styles.button} ${styles.backButton}`}\r\n                        onClick={switchToManageItemsView}\r\n                    >\r\n                        Back to Manage Items\r\n                    </button>\r\n                )}\r\n            </div>\r\n\r\n            {/* Filter Section */}\r\n            {!isLogView && (\r\n                <div className={styles.filterSection}>\r\n                    <div className={styles.filterGroup}>\r\n                        <label htmlFor=\"filterName\">Name:</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            id=\"filterName\"\r\n                            value={filterName}\r\n                            onChange={(e) => setFilterName(e.target.value)}\r\n                            placeholder=\"Search by name\"\r\n                        />\r\n                    </div>\r\n                    <div className={styles.filterGroup}>\r\n                        <label htmlFor=\"filterCategory\">Category:</label>\r\n                        <select\r\n                            id=\"filterCategory\"\r\n                            value={filterCategory}\r\n                            onChange={(e) => setFilterCategory(e.target.value)}\r\n                        >\r\n                            <option value=\"\">All</option>\r\n                            {uniqueCategories.map((category, index) => (\r\n                                <option key={index} value={category}>\r\n                                    {category}\r\n                                </option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n                    <div className={styles.filterGroup}>\r\n                        <label htmlFor=\"filterPriceMin\">Price Min:</label>\r\n                        <input\r\n                            type=\"number\"\r\n                            id=\"filterPriceMin\"\r\n                            value={filterPriceMin}\r\n                            onChange={(e) => setFilterPriceMin(e.target.value)}\r\n                            placeholder=\"Min price\"\r\n                            min=\"0\"\r\n                            step=\"0.01\"\r\n                        />\r\n                    </div>\r\n                    <div className={styles.filterGroup}>\r\n                        <label htmlFor=\"filterPriceMax\">Price Max:</label>\r\n                        <input\r\n                            type=\"number\"\r\n                            id=\"filterPriceMax\"\r\n                            value={filterPriceMax}\r\n                            onChange={(e) => setFilterPriceMax(e.target.value)}\r\n                            placeholder=\"Max price\"\r\n                            min=\"0\"\r\n                            step=\"0.01\"\r\n                        />\r\n                    </div>\r\n                    <div className={styles.filterGroup}>\r\n                        <label htmlFor=\"filterQuantity\">Quantity:</label>\r\n                        <input\r\n                            type=\"number\"\r\n                            id=\"filterQuantity\"\r\n                            value={filterQuantity}\r\n                            onChange={(e) => setFilterQuantity(e.target.value)}\r\n                            placeholder=\"Exact quantity\"\r\n                            min=\"0\"\r\n                        />\r\n                    </div>\r\n                    <div className={styles.filterGroup}>\r\n                        <label htmlFor=\"filterStatus\">Status:</label>\r\n                        <select\r\n                            id=\"filterStatus\"\r\n                            value={filterStatus}\r\n                            onChange={(e) => setFilterStatus(e.target.value)}\r\n                        >\r\n                            <option value=\"\">All</option>\r\n                            <option value=\"Active\">Active</option>\r\n                            <option value=\"Deleted\">Deleted</option>\r\n                        </select>\r\n                    </div>\r\n                    <div className={styles.filterGroup}>\r\n                        <label htmlFor=\"filterLowStock\">Low Stock</label>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            id=\"filterLowStock\"\r\n                            checked={filterLowStock}\r\n                            onChange={(e) => setFilterLowStock(e.target.checked)}\r\n                        />\r\n                    </div>\r\n                    <button\r\n                        className={styles.clearButton}\r\n                        onClick={() => {\r\n                            setFilterName('');\r\n                            setFilterCategory('');\r\n                            setFilterPriceMin('');\r\n                            setFilterPriceMax('');\r\n                            setFilterQuantity('');\r\n                            setFilterStatus('');\r\n                            setFilterLowStock(false);\r\n                        }}\r\n                    >\r\n                        Clear Filters\r\n                    </button>\r\n                </div>\r\n            )}\r\n\r\n            {/* Filter Section for Logs */}\r\n            {isLogView && (\r\n                <>\r\n                    <div className={styles.filterSection}>\r\n                        <div className={styles.filterGroup}>\r\n                            <label htmlFor=\"filterLogAction\">Action:</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                id=\"filterLogAction\"\r\n                                value={filterLogAction}\r\n                                onChange={(e) => setFilterLogAction(e.target.value)}\r\n                                placeholder=\"Search by action\"\r\n                            />\r\n                        </div>\r\n                        <div className={styles.filterGroup}>\r\n                            <label htmlFor=\"filterLogItemName\">Item Name:</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                id=\"filterLogItemName\"\r\n                                value={filterLogItemName}\r\n                                onChange={(e) => setFilterLogItemName(e.target.value)}\r\n                                placeholder=\"Search by item name\"\r\n                            />\r\n                        </div>\r\n                        <div className={styles.filterGroup}>\r\n                            <label htmlFor=\"filterLogUser\">User:</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                id=\"filterLogUser\"\r\n                                value={filterLogUser}\r\n                                onChange={(e) => setFilterLogUser(e.target.value)}\r\n                                placeholder=\"Search by user\"\r\n                            />\r\n                        </div>\r\n                        <div className={styles.filterGroup}>\r\n                            <label htmlFor=\"filterLogRole\">Role:</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                id=\"filterLogRole\"\r\n                                value={filterLogRole}\r\n                                onChange={(e) => setFilterLogRole(e.target.value)}\r\n                                placeholder=\"Search by role\"\r\n                            />\r\n                        </div>\r\n                        <div className={styles.filterGroup}>\r\n                            <label htmlFor=\"filterLogDateFrom\">Date From:</label>\r\n                            <input\r\n                                type=\"date\"\r\n                                id=\"filterLogDateFrom\"\r\n                                value={filterLogDateFrom}\r\n                                onChange={(e) => setFilterLogDateFrom(e.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div className={styles.filterGroup}>\r\n                            <label htmlFor=\"filterLogDateTo\">Date To:</label>\r\n                            <input\r\n                                type=\"date\"\r\n                                id=\"filterLogDateTo\"\r\n                                value={filterLogDateTo}\r\n                                onChange={(e) => setFilterLogDateTo(e.target.value)}\r\n                            />\r\n                        </div>\r\n                        <button\r\n                            className={styles.clearButton}\r\n                            onClick={() => {\r\n                                setFilterLogAction('');\r\n                                setFilterLogItemName('');\r\n                                setFilterLogUser('');\r\n                                setFilterLogRole('');\r\n                                setFilterLogDateFrom('');\r\n                                setFilterLogDateTo('');\r\n                            }}\r\n                        >\r\n                            Clear Filters\r\n                        </button>\r\n                    </div>\r\n                </>\r\n            )}\r\n\r\n            {/* Manage Items View */}\r\n            {!isLogView && (\r\n                <>\r\n                    <table className={styles.itemTable}>\r\n                        <thead>\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>Category</th>\r\n                            <th>Price</th>\r\n                            <th>Quantity</th>\r\n                            <th>Status</th>\r\n                            <th>Image</th>\r\n                            <th>Actions</th>\r\n                        </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                        {Array.isArray(currentItemsToDisplay) &&\r\n                            currentItemsToDisplay.map((item) => (\r\n                                <tr key={item.item_id}>\r\n                                    <td>{item.name_}</td>\r\n                                    <td>{item.category}</td>\r\n                                    <td>${parseFloat(item.price).toFixed(2)}</td>\r\n                                    <td>{item.quantity}</td>\r\n                                    <td>{Number(item.is_deleted) === 1 ? 'Deleted' : 'Active'}</td>\r\n                                    <td>\r\n                                        <img\r\n                                            src={getImageUrl(item.item_id)}\r\n                                            alt={item.name_}\r\n                                            className={styles.itemImage}\r\n                                        />\r\n                                    </td>\r\n                                    <td>\r\n                                        <button\r\n                                            className={styles.actionButton}\r\n                                            onClick={() => openFormModal(item)}\r\n                                        >\r\n                                            Edit\r\n                                        </button>\r\n                                        {Number(item.is_deleted) === 0 ? (\r\n                                            <>\r\n                                                <button\r\n                                                    className={styles.actionButton}\r\n                                                    onClick={() => confirmDelete(item.item_id)}\r\n                                                >\r\n                                                    Delete\r\n                                                </button>\r\n                                            </>\r\n                                        ) : (\r\n                                            <button\r\n                                                className={styles.actionButton}\r\n                                                onClick={() => confirmRestore(item.item_id)}\r\n                                            >\r\n                                                Restore\r\n                                            </button>\r\n                                        )}\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n\r\n                    {/* Pagination Controls */}\r\n                    <div className={styles.pagination}>\r\n                        {Array.from({ length: totalPages }, (_, index) => (\r\n                            <button\r\n                                key={index}\r\n                                onClick={() => setCurrentPage(index + 1)}\r\n                                className={`${styles.pageButton} ${\r\n                                    currentPage === index + 1 ? styles.activePage : ''\r\n                                }`}\r\n                            >\r\n                                {index + 1}\r\n                            </button>\r\n                        ))}\r\n                    </div>\r\n                </>\r\n            )}\r\n\r\n            {/* Logs View */}\r\n            {isLogView && (\r\n                <>\r\n                    <table className={styles.itemTable}>\r\n                        <thead>\r\n                        <tr>\r\n                            <th>Timestamp</th>\r\n                            <th>Action</th>\r\n                            <th>Item ID</th>\r\n                            <th>Item Name</th>\r\n                            <th>User</th>\r\n                            <th>Role</th>\r\n                            <th>Details</th>\r\n                        </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                        {Array.isArray(currentItemsToDisplay) &&\r\n                            currentItemsToDisplay.map((log) => (\r\n                                <tr key={log.log_id}>\r\n                                    <td>{new Date(log.timestamp).toLocaleString()}</td>\r\n                                    <td>{log.action}</td>\r\n                                    <td>{log.item_id}</td>\r\n                                    <td>{log.item_name || 'N/A'}</td>\r\n                                    <td>{log.username || 'Unknown'}</td>\r\n                                    <td>{log.role}</td>\r\n                                    <td>\r\n                                        <button\r\n                                            className={styles.actionButton}\r\n                                            onClick={() => openLogDetailsModal(log)}\r\n                                        >\r\n                                            View Details\r\n                                        </button>\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n\r\n                    {/* Pagination Controls */}\r\n                    <div className={styles.pagination}>\r\n                        {Array.from({ length: totalPages }, (_, index) => (\r\n                            <button\r\n                                key={index}\r\n                                onClick={() => setCurrentPage(index + 1)}\r\n                                className={`${styles.pageButton} ${\r\n                                    currentPage === index + 1 ? styles.activePage : ''\r\n                                }`}\r\n                            >\r\n                                {index + 1}\r\n                            </button>\r\n                        ))}\r\n                    </div>\r\n                </>\r\n            )}\r\n\r\n            {/* Add/Edit Item Modal */}\r\n            {isFormModalOpen && <GiftShopFormModal item={selectedItem} onClose={closeFormModal} />}\r\n\r\n            {/* Delete Confirmation Modal */}\r\n            {showDeleteModal && (\r\n                <div className={styles.modal}>\r\n                    <div className={styles.modal_content}>\r\n                        <span className={styles.close_button} onClick={cancelDelete}>\r\n                            &times;\r\n                        </span>\r\n                        <h2>Confirm Deletion</h2>\r\n                        <p>Do you want to soft delete or permanently delete this item?</p>\r\n                        <div className={styles.buttonGroup}>\r\n                            <button className={styles.formButton} onClick={() => handleConfirmDelete(false)}>\r\n                                Soft Delete\r\n                            </button>\r\n                            <button className={styles.formButton} onClick={() => handleConfirmDelete(true)}>\r\n                                Hard Delete\r\n                            </button>\r\n                            <button className={styles.formButton} onClick={cancelDelete}>\r\n                                Cancel\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* Restore Confirmation Modal */}\r\n            {showRestoreModal && (\r\n                <div className={styles.modal}>\r\n                    <div className={styles.modal_content}>\r\n                        <span className={styles.close_button} onClick={cancelRestore}>\r\n                            &times;\r\n                        </span>\r\n                        <h2>Confirm Restore</h2>\r\n                        <p>Are you sure you want to restore this item?</p>\r\n                        <div className={styles.buttonGroup}>\r\n                            <button className={styles.formButton} onClick={() => handleRestore(itemToRestore)}>\r\n                                Yes, Restore\r\n                            </button>\r\n                            <button className={styles.formButton} onClick={cancelRestore}>\r\n                                Cancel\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* Log Details Modal */}\r\n            {showLogDetailsModal && selectedLogDetails && (\r\n                <GiftShopLogDetailsModal log={selectedLogDetails} onClose={closeLogDetailsModal} />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GiftShopAdmin;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/GiftShopAdmin.jsx b/frontend/src/components/GiftShopAdmin.jsx
--- a/frontend/src/components/GiftShopAdmin.jsx	(revision be7a189a6dd3991950fbb26c832d8f9769c55e80)
+++ b/frontend/src/components/GiftShopAdmin.jsx	(date 1731386552000)
@@ -72,7 +72,7 @@
     // Fetch gift shop items (including deleted for admin view)
     const fetchItems = () => {
         axios
-            .get(`${process.env.REACT_APP_API_URL}/giftshopitemsall`)
+            .get(`http://localhost:5000/giftshopitemsall`)
             .then((response) => setItems(response.data))
             .catch((error) => console.error('Error fetching items:', error));
     };
@@ -80,7 +80,7 @@
     // Fetch logs
     const fetchLogs = () => {
         axios
-            .get(`${process.env.REACT_APP_API_URL}/giftshopitems/logs`, {
+            .get(`http://localhost:5000/giftshopitems/logs`, {
                 headers: {
                     'user-id': localStorage.getItem('userId'),
                     role: localStorage.getItem('role'),
@@ -91,7 +91,7 @@
     };
 
     const getImageUrl = (itemId) => {
-        return `${process.env.REACT_APP_API_URL}/giftshopitems/${itemId}/image`;
+        return `http://localhost:5000/giftshopitems/${itemId}/image`;
     };
 
     // Confirm Soft or Hard Delete
@@ -116,7 +116,7 @@
         const role = localStorage.getItem('role');
         axios
             .put(
-                `${process.env.REACT_APP_API_URL}/giftshopitems/${id}/soft-delete`,
+                `http://localhost:5000/giftshopitems/${id}/soft-delete`,
                 {},
                 {
                     headers: { role: role, 'user-id': localStorage.getItem('userId') },
@@ -129,7 +129,7 @@
     const handleHardDelete = (id) => {
         const role = localStorage.getItem('role');
         axios
-            .delete(`${process.env.REACT_APP_API_URL}/giftshopitems/${id}/hard-delete`, {
+            .delete(`http://localhost:5000/giftshopitems/${id}/hard-delete`, {
                 headers: { role: role, 'user-id': localStorage.getItem('userId') },
             })
             .then(() => fetchItems())
@@ -151,7 +151,7 @@
         const role = localStorage.getItem('role');
         axios
             .put(
-                `${process.env.REACT_APP_API_URL}/giftshopitems/${id}/restore`,
+                `http://localhost:5000/giftshopitems/${id}/restore`,
                 {},
                 {
                     headers: { role: role, 'user-id': localStorage.getItem('userId') },
Index: frontend/src/components/Verify.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState } from 'react';\r\nimport { Container, Box, Button, TextField, Typography, CssBaseline } from '@mui/material';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nexport default function Verify() {\r\n    const [email, setEmail] = useState('');\r\n    const [errors, setErrors] = useState({});\r\n    const [message, setMessage] = useState('');\r\n    const navigate = useNavigate();\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        const newErrors = {};\r\n\r\n        if (!email) {\r\n            newErrors.email = 'Email is required';\r\n        } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\r\n            newErrors.email = 'Please enter a valid email address';\r\n        }\r\n\r\n        setErrors(newErrors);\r\n        if (Object.keys(newErrors).length > 0) return;\r\n\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_API_URL}/verify`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ email }),\r\n            });\r\n\r\n            if (response.ok) {\r\n                setMessage('Verification email sent successfully! Please check your inbox.');\r\n            } else {\r\n                const data = await response.json();\r\n                setErrors({ server: data.message });\r\n            }\r\n        } catch (error) {\r\n            setErrors({ server: 'Error sending verification email.' });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <Box sx={{ marginTop: 8, display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n                <Typography component=\"h1\" variant=\"h5\">Verify Your Email</Typography>\r\n                {message && <Typography color=\"primary\">{message}</Typography>}\r\n                {errors.server && <Typography color=\"error\">{errors.server}</Typography>}\r\n                <Box component=\"form\" onSubmit={handleSubmit} noValidate sx={{ mt: 1 }}>\r\n                    <TextField\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"email\"\r\n                        label=\"Email Address\"\r\n                        error={!!errors.email}\r\n                        helperText={errors.email}\r\n                        value={email}\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                    />\r\n                    <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\" sx={{ mt: 3, mb: 2 }}>\r\n                        Send Verification Email\r\n                    </Button>\r\n                    <Button fullWidth variant=\"outlined\" color=\"secondary\" onClick={() => navigate('/')}>\r\n                        Back to Home\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n        </Container>\r\n    );\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/Verify.jsx b/frontend/src/components/Verify.jsx
--- a/frontend/src/components/Verify.jsx	(revision be7a189a6dd3991950fbb26c832d8f9769c55e80)
+++ b/frontend/src/components/Verify.jsx	(date 1731386552000)
@@ -22,7 +22,7 @@
         if (Object.keys(newErrors).length > 0) return;
 
         try {
-            const response = await fetch(`${process.env.REACT_APP_API_URL}/verify`, {
+            const response = await fetch(`http://localhost:5000/verify`, {
                 method: 'POST',
                 headers: { 'Content-Type': 'application/json' },
                 body: JSON.stringify({ email }),
Index: frontend/src/components/Login.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState } from 'react';\r\nimport {\r\n    Box,\r\n    Button,\r\n    TextField,\r\n    Typography,\r\n    InputAdornment,\r\n    CssBaseline,\r\n    Snackbar,\r\n    Alert,\r\n    IconButton\r\n} from '@mui/material';\r\nimport { useNavigate, useLocation, Link } from 'react-router-dom';\r\nimport AccountIcon from '@mui/icons-material/AccountBox';\r\nimport LockIcon from '@mui/icons-material/Lock';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport HomeNavBar from '../components/HomeNavBar';\r\nimport '../css/Auth.module.css';\r\nimport TicketBackground from '../assets/TicketsBackground.png';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst Login = () => {\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [errors, setErrors] = useState({});\r\n    const [warningOpen, setWarningOpen] = useState(false); // Added warningOpen state\r\n    const [expiryDate, setExpiryDate] = useState(''); // Added expiryDate state\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        const newErrors = {};\r\n        if (!username) newErrors.username = 'Username is required';\r\n        if (!password) newErrors.password = 'Password is required';\r\n        setErrors(newErrors);\r\n\r\n        if (Object.keys(newErrors).length > 0) return;\r\n\r\n        try {\r\n            const loginUrl = `${process.env.REACT_APP_API_URL}/login`;\r\n            console.log(\"Login Endpoint URL:\", loginUrl);\r\n            const response = await fetch(loginUrl, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ username, password }),\r\n            });\r\n\r\n            if (response.ok) {\r\n                const data = await response.json();\r\n                localStorage.setItem('role', data.role);\r\n                localStorage.setItem('userId', data.userId);\r\n                localStorage.setItem('username', username);\r\n                localStorage.setItem('firstName', data.firstName);\r\n                localStorage.setItem('lastName', data.lastName);\r\n                // Store warning data if exists\r\n                if (data.membershipWarning) {\r\n                    const formattedDate = new Date(data.expireDate).toLocaleDateString('en-US', {\r\n                        weekday: 'long',\r\n                        year: 'numeric',\r\n                        month: 'long',\r\n                        day: 'numeric'\r\n                    });\r\n                    localStorage.setItem('membershipWarning', 'true');\r\n                    localStorage.setItem('expiryDate', formattedDate);\r\n                    const redirectTo = location.state?.redirectTo || '/';\r\n                    setExpiryDate(formattedDate); // Set expiryDate state\r\n                    setWarningOpen(true); // Open warning Snackbar\r\n                }\r\n\r\n                // Navigate based on role\r\n                if (data.role === 'admin') navigate('/AdminDashBoard');\r\n                else if (data.role === 'staff') navigate('/StaffDashboard');\r\n                else if (data.role === 'customer') navigate('/');\r\n                else if (data.role === 'member') navigate('/');\r\n                else navigate('/');\r\n\r\n                toast.success('Login successful!');\r\n            } else {\r\n                const data = await response.json();\r\n                setErrors({ server: data.message });\r\n            }\r\n        } catch (error) {\r\n            setErrors({ server: 'Error logging in.' });\r\n        }\r\n    };\r\n\r\n    const handleWarningClose = () => {\r\n        setWarningOpen(false); // Close warning Snackbar\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className=\"tickets-container\"\r\n            style={{\r\n                backgroundImage: `linear-gradient(rgba(220, 74, 56, 0.2), rgba(220, 74, 56, 0.2)), url(${TicketBackground})`,\r\n                backgroundSize: 'cover',\r\n                backgroundPosition: 'center',\r\n                backgroundRepeat: 'no-repeat',\r\n            }}\r\n        >\r\n            <HomeNavBar />\r\n            <div className=\"tickets-content\">\r\n                <CssBaseline />\r\n                <Typography component=\"h1\" variant=\"h5\" className=\"tickets-title\">\r\n                    Login\r\n                </Typography>\r\n                {errors.server && <Typography color=\"error\">{errors.server}</Typography>}\r\n                <Box component=\"form\" onSubmit={handleSubmit} noValidate sx={{ mt: 2 }}>\r\n                    <TextField\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"username\"\r\n                        label=\"Username\"\r\n                        error={!!errors.username}\r\n                        helperText={errors.username}\r\n                        value={username}\r\n                        onChange={(e) => setUsername(e.target.value)}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <AccountIcon />\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                    <TextField\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"password\"\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        error={!!errors.password}\r\n                        helperText={errors.password}\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <LockIcon />\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        className=\"purchase-button\"\r\n                        sx={{ mt: 3, mb: 2 }}\r\n                    >\r\n                        Login\r\n                    </Button>\r\n                    <Typography variant=\"body2\" sx={{ mt: 2, textAlign: 'center' }}>\r\n                        Don't have an account? <Link to=\"/register\">Register here</Link>\r\n                    </Typography>\r\n                </Box>\r\n            </div>\r\n\r\n            <Snackbar\r\n                open={warningOpen}\r\n                autoHideDuration={null}\r\n                onClose={handleWarningClose}\r\n                anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n                sx={{\r\n                    mt: 2,\r\n                    maxWidth: '600px',\r\n                    width: '100%',\r\n                }}\r\n            >\r\n                <Alert\r\n                    onClose={handleWarningClose}\r\n                    severity=\"warning\"\r\n                    sx={{\r\n                        width: '100%',\r\n                        backgroundColor: '#FFF8E1',\r\n                        color: '#8B6E00',\r\n                        '& .MuiAlert-action': {\r\n                            alignItems: 'center',\r\n                        },\r\n                        border: '1px solid #FFE082',\r\n                        borderRadius: '4px',\r\n                        '& .MuiAlert-icon': {\r\n                            display: 'none',\r\n                        },\r\n                    }}\r\n                    action={\r\n                        <IconButton\r\n                            size=\"small\"\r\n                            aria-label=\"close\"\r\n                            color=\"inherit\"\r\n                            onClick={handleWarningClose}\r\n                        >\r\n                            <CloseIcon fontSize=\"small\" />\r\n                        </IconButton>\r\n                    }\r\n                >\r\n                    <Typography\r\n                        sx={{\r\n                            fontWeight: 'bold',\r\n                            mb: 1,\r\n                            color: '#8B6E00',\r\n                            fontSize: '1.1rem',\r\n                        }}\r\n                    >\r\n                        Membership Expiration Notice\r\n                    </Typography>\r\n                    <Typography sx={{ color: '#8B6E00' }}>\r\n                        Your individual membership will expire on {expiryDate}. Please renew your membership to continue enjoying museum benefits.\r\n                    </Typography>\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/Login.jsx b/frontend/src/components/Login.jsx
--- a/frontend/src/components/Login.jsx	(revision be7a189a6dd3991950fbb26c832d8f9769c55e80)
+++ b/frontend/src/components/Login.jsx	(date 1731386552000)
@@ -38,7 +38,7 @@
         if (Object.keys(newErrors).length > 0) return;
 
         try {
-            const loginUrl = `${process.env.REACT_APP_API_URL}/login`;
+            const loginUrl = `http://localhost:5000/login`;
             console.log("Login Endpoint URL:", loginUrl);
             const response = await fetch(loginUrl, {
                 method: 'POST',
Index: frontend/src/components/ChangePasswordModal.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState } from 'react';\r\nimport { Modal, Box, Typography, TextField, Alert } from '@mui/material';\r\nimport { styled } from '@mui/system';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Styled Button consistent with MFAShopModalUser\r\nconst StyledButton = styled('button')({\r\n    padding: '8px 12px',\r\n    marginRight: '5px',\r\n    fontSize: '14px',\r\n    color: '#FFFFFF',\r\n    background: 'linear-gradient(90deg, #BD2859 0%, #D22D36 100%)',\r\n    border: 'none',\r\n    borderRadius: '5px',\r\n    cursor: 'pointer',\r\n    transition: 'background 0.3s ease',\r\n    '&:hover': {\r\n        background: 'linear-gradient(90deg, #D22D36 0%, #BD2859 100%)',\r\n    },\r\n});\r\n\r\n// Modal Styling\r\nconst modalStyle = {\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: '90%',\r\n    maxWidth: 400,\r\n    bgcolor: 'background.paper',\r\n    borderRadius: '10px',\r\n    boxShadow: 24,\r\n    p: 4,\r\n    textAlign: 'center',\r\n};\r\n\r\nconst ChangePasswordModal = ({ open, onClose, userId, role }) => {\r\n    const [passwordData, setPasswordData] = useState({\r\n        currentPassword: '',\r\n        newPassword: '',\r\n        confirmPassword: '',\r\n    });\r\n    const [passwordErrors, setPasswordErrors] = useState({});\r\n    const [passwordMessage, setPasswordMessage] = useState('');\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setPasswordData({ ...passwordData, [name]: value });\r\n    };\r\n\r\n    const validatePasswords = () => {\r\n        const errors = {};\r\n        const { currentPassword, newPassword, confirmPassword } = passwordData;\r\n\r\n        if (!currentPassword) errors.currentPassword = 'Current password is required.';\r\n        if (!newPassword) {\r\n            errors.newPassword = 'New password is required.';\r\n        } else if (newPassword.length < 6) {\r\n            errors.newPassword = 'New password must be at least 6 characters long.';\r\n        }\r\n        if (!confirmPassword) {\r\n            errors.confirmPassword = 'Please confirm your new password.';\r\n        } else if (newPassword !== confirmPassword) {\r\n            errors.confirmPassword = 'Passwords do not match.';\r\n        }\r\n\r\n        setPasswordErrors(errors);\r\n        return Object.keys(errors).length === 0;\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        if (!validatePasswords()) return;\r\n\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_API_URL}/users/${userId}/change-password`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'user-id': userId,\r\n                    'role': role,\r\n                },\r\n                body: JSON.stringify({\r\n                    currentPassword: passwordData.currentPassword,\r\n                    newPassword: passwordData.newPassword,\r\n                }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (response.ok) {\r\n                setPasswordMessage('Password updated successfully!');\r\n                // Optionally, reset form or close modal after success\r\n                setPasswordData({\r\n                    currentPassword: '',\r\n                    newPassword: '',\r\n                    confirmPassword: '',\r\n                });\r\n                setPasswordErrors({});\r\n                setTimeout(() => {\r\n                    setPasswordMessage('');\r\n                    onClose();\r\n                }, 2000);\r\n            } else {\r\n                // Handle specific error messages from backend\r\n                if (data.message === 'Current password is incorrect.') {\r\n                    setPasswordErrors({ currentPassword: data.message });\r\n                } else if (data.message === 'New password must be at least 6 characters long.') {\r\n                    setPasswordErrors({ newPassword: data.message });\r\n                } else {\r\n                    setPasswordMessage(data.message || 'Error updating password.');\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('Error updating password:', error);\r\n            setPasswordMessage('Error updating password.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Modal open={open} onClose={onClose}>\r\n            <Box sx={modalStyle}>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                    Change Password\r\n                </Typography>\r\n                {passwordMessage && (\r\n                    <Alert severity={passwordMessage.includes('successfully') ? 'success' : 'error'} sx={{ mb: 2 }}>\r\n                        {passwordMessage}\r\n                    </Alert>\r\n                )}\r\n                <form onSubmit={handleSubmit}>\r\n                    <TextField\r\n                        fullWidth\r\n                        margin=\"normal\"\r\n                        label=\"Current Password\"\r\n                        type=\"password\"\r\n                        name=\"currentPassword\"\r\n                        value={passwordData.currentPassword}\r\n                        onChange={handleChange}\r\n                        error={!!passwordErrors.currentPassword}\r\n                        helperText={passwordErrors.currentPassword}\r\n                        required\r\n                    />\r\n                    <TextField\r\n                        fullWidth\r\n                        margin=\"normal\"\r\n                        label=\"New Password\"\r\n                        type=\"password\"\r\n                        name=\"newPassword\"\r\n                        value={passwordData.newPassword}\r\n                        onChange={handleChange}\r\n                        error={!!passwordErrors.newPassword}\r\n                        helperText={passwordErrors.newPassword}\r\n                        required\r\n                    />\r\n                    <TextField\r\n                        fullWidth\r\n                        margin=\"normal\"\r\n                        label=\"Confirm New Password\"\r\n                        type=\"password\"\r\n                        name=\"confirmPassword\"\r\n                        value={passwordData.confirmPassword}\r\n                        onChange={handleChange}\r\n                        error={!!passwordErrors.confirmPassword}\r\n                        helperText={passwordErrors.confirmPassword}\r\n                        required\r\n                    />\r\n                    <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 2 }}>\r\n                        <StyledButton type=\"button\" onClick={onClose}>\r\n                            Cancel\r\n                        </StyledButton>\r\n                        <StyledButton type=\"submit\">\r\n                            Submit\r\n                        </StyledButton>\r\n                    </Box>\r\n                </form>\r\n            </Box>\r\n        </Modal>\r\n    );\r\n};\r\n\r\n// PropTypes for type checking\r\nChangePasswordModal.propTypes = {\r\n    open: PropTypes.bool.isRequired,\r\n    onClose: PropTypes.func.isRequired,\r\n    userId: PropTypes.string.isRequired,\r\n    role: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default ChangePasswordModal;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/ChangePasswordModal.jsx b/frontend/src/components/ChangePasswordModal.jsx
--- a/frontend/src/components/ChangePasswordModal.jsx	(revision be7a189a6dd3991950fbb26c832d8f9769c55e80)
+++ b/frontend/src/components/ChangePasswordModal.jsx	(date 1731386552000)
@@ -73,7 +73,7 @@
         if (!validatePasswords()) return;
 
         try {
-            const response = await fetch(`${process.env.REACT_APP_API_URL}/users/${userId}/change-password`, {
+            const response = await fetch(`http://localhost:5000/users/${userId}/change-password`, {
                 method: 'PUT',
                 headers: {
                     'Content-Type': 'application/json',
Index: frontend/src/components/ArtworkCard.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, {useState, useEffect, useRef} from 'react'\r\nimport { useLocation } from 'react-router-dom';\r\nimport styles from '../css/ArtworkCard.module.css';\r\nimport axios from 'axios';\r\n\r\nconst ArtworkCard = ({ artwork_, onCardClick }) => {\r\n  return (\r\n    <div className={styles.cards}>\r\n      {artwork_.map((art) => (\r\n        <div\r\n          key={art.ArtworkID}\r\n          className={styles.card}\r\n          onClick={() => onCardClick(art)}\r\n        >\r\n          <img src={`${process.env.REACT_APP_API_URL}/assets/artworks/${art.image}`} alt={art.Title} className={styles.image} />\r\n          <h1>{art.Title}</h1>\r\n          <p>{art.artist_name || 'Unknown Artist'}</p>\r\n          <p>{art.CreationYear}</p>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ArtworkModalUser = ({ artwork_, onClose, onRefresh }) => {\r\n  const location = useLocation();\r\n  const role = localStorage.getItem('role');\r\n  const [isEditMode, setIsEditMode] = useState(false);\r\n  const [showConfirmDelete, setShowConfirmDelete] = useState(false);\r\n  const [artwork, setArtwork] = useState(artwork_);\r\n\r\n  const openEditMode = () => setIsEditMode(true);\r\n  const openConfirmDelete = () => setShowConfirmDelete(true);\r\n  const closeConfirmDelete = () => setShowConfirmDelete(false);\r\n\r\n  const handleDelete = async () => {\r\n    try {\r\n      await axios.delete(`${process.env.REACT_APP_API_URL}/artwork/${artwork.ArtworkID}`);\r\n      console.log(\"Artwork deleted successfully\");\r\n      onRefresh(); // Refresh the artwork list\r\n      onClose(); // Close the modal\r\n    } catch (error) {\r\n      console.error(\"Error deleting artwork:\", error);\r\n    }\r\n  };\r\n\r\n  const handleModalRefresh = async () => {\r\n    try {\r\n      const response = await axios.get(`${process.env.REACT_APP_API_URL}/artwork/${artwork.ArtworkID}`);\r\n      setArtwork(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching updated artwork data:', error);\r\n    }\r\n  };\r\n\r\n  const handleOverlayClick = (e) => {\r\n    if (!isEditMode && e.target === e.currentTarget) {\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.modal} onClick={handleOverlayClick}>\r\n      <div className={styles.modal_content}>\r\n        {!isEditMode && (\r\n          <span className={styles.close_button} onClick={onClose}>\r\n            &times;\r\n          </span>\r\n        )}\r\n\r\n        {!isEditMode ? (\r\n          <>\r\n            <img src={`${process.env.REACT_APP_API_URL}/assets/artworks/${artwork.image}`} alt={artwork.Title} className={styles.image} />\r\n            <h2>{artwork.Title}</h2>\r\n            <p><strong>Artist:</strong> {artwork.artist_name || 'Unknown Artist'}</p>\r\n            <p><strong>Year:</strong> {artwork.CreationYear}</p>\r\n            <p><strong>Department:</strong> {artwork.department_name || 'Unknown Department'}</p>\r\n            <p><strong>Medium:</strong> {artwork.Medium}</p>\r\n            <p><strong>Height:</strong> {artwork.height} inches</p>\r\n            <p><strong>Width:</strong> {artwork.width} inches</p>\r\n            <p><strong>Depth:</strong> {artwork.depth || 'N/A'} inches</p>\r\n            <p><strong>Acquisition Date:</strong> {artwork.acquisition_date ? new Date(artwork.acquisition_date).toLocaleDateString('en-US', {\r\n              year: 'numeric',\r\n              month: 'long',\r\n              day: 'numeric'\r\n            }) : 'N/A'}</p>\r\n            <p><strong>Condition:</strong> {artwork.ArtworkCondition}</p>\r\n            <p><strong>Location:</strong> {artwork.location || 'Not Specified'}</p>\r\n            <p><strong>Price:</strong> {artwork.price ? `$${artwork.price}` : 'N/A'}</p>\r\n            <p><strong>Description:</strong> {artwork.Description}</p>\r\n            {(role === 'admin' || role === 'staff') && location.pathname !== '/Art' && (\r\n              <>\r\n                <button onClick={openEditMode}>Edit Artwork</button>\r\n                <button onClick={openConfirmDelete}>Delete Artwork</button>\r\n              </>\r\n            )}\r\n          </>\r\n        ) : (\r\n          <EditArtworkModal\r\n            artwork={artwork}\r\n            onClose={() => setIsEditMode(false)}\r\n            onRefresh={onRefresh}\r\n            onModalRefresh={handleModalRefresh}\r\n          />\r\n        )}\r\n        {showConfirmDelete && (\r\n          <ConfirmDeleteArtworkModal\r\n            onConfirm={handleDelete}\r\n            onCancel={closeConfirmDelete}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst EditArtworkModal = ({ artwork, onClose, onRefresh, onModalRefresh }) => {\r\n  const [Title, setTitle] = useState(artwork.Title || '');\r\n  const [artistId, setArtistId] = useState(artwork.artist_id || '');\r\n  const [departmentId, setDepartmentId] = useState(artwork.department_id || '');\r\n  const [CreationYear, setCreationYear] = useState(artwork.CreationYear !== null ? artwork.CreationYear : '');\r\n  const [medium, setMedium] = useState(artwork.Medium || '');\r\n  const [customMedium, setCustomMedium] = useState('');\r\n  const [height, setHeight] = useState(artwork.height !== null ? artwork.height : '');\r\n  const [width, setWidth] = useState(artwork.width !== null ? artwork.width : '');\r\n  const [depth, setDepth] = useState(artwork.depth !== null ? artwork.depth : '');\r\n  const [acquisitionDate, setAcquisitionDate] = useState(artwork.acquisition_date ? artwork.acquisition_date.split(\"T\")[0] : '');\r\n  const [condition, setCondition] = useState(artwork.ArtworkCondition || '');\r\n  const [customCondition, setCustomCondition] = useState('');\r\n  const [location, setLocation] = useState(artwork.location || '');\r\n  const [price, setPrice] = useState(artwork.price !== null ? artwork.price : '');\r\n  const [description, setDescription] = useState(artwork.Description || '');\r\n  const [image, setImage] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [errors, setErrors] = useState({});\r\n  const [hasChanges, setHasChanges] = useState(false);\r\n\r\n  const [artists, setArtists] = useState([]);\r\n  const [departments, setDepartments] = useState([]);\r\n  const [mediums, setMediums] = useState([]);\r\n  const [conditions, setConditions] = useState([]);\r\n\r\n  // Fetch artists, departments, mediums, and conditions\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const [artistRes, departmentsRes, mediumsRes, conditionsRes] = await Promise.all([\r\n          axios.get(`${process.env.REACT_APP_API_URL}/artist`),\r\n          axios.get(`${process.env.REACT_APP_API_URL}/department`),\r\n          axios.get(`${process.env.REACT_APP_API_URL}/mediums`),\r\n          axios.get(`${process.env.REACT_APP_API_URL}/artworkconditions`)\r\n        ]);\r\n        setArtists(artistRes.data);\r\n        setDepartments(departmentsRes.data);\r\n        setMediums(mediumsRes.data);\r\n        setConditions(conditionsRes.data);\r\n      } catch (error) {\r\n        console.error('Error fetching dropdown options:', error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  const handleImageChange = (e) => setImage(e.target.files[0]);\r\n\r\n  // Function to check if any field has changed from the original artwork values\r\n  const checkIfChanged = () => {\r\n    const originalDate = artwork.acquisition_date ? artwork.acquisition_date.split(\"T\")[0] : '';\r\n    return (\r\n      Title !== artwork.Title ||\r\n      artistId !== artwork.artist_id ||\r\n      departmentId !== artwork.department_id ||\r\n      CreationYear !== artwork.CreationYear ||\r\n      medium !== artwork.Medium ||\r\n      height !== artwork.height ||\r\n      width !== artwork.width ||\r\n      (depth || '') !== (artwork.depth || '') ||  // Normalize depth comparison\r\n      acquisitionDate !== originalDate ||\r\n      condition !== artwork.ArtworkCondition ||\r\n      (location || '') !== (artwork.location || '') ||  // Normalize location comparison\r\n      (price || '') !== (artwork.price || '') ||  // Normalize price comparison\r\n      description !== artwork.Description ||\r\n      image !== null\r\n    );\r\n  };\r\n\r\n  // Update `hasChanges` whenever any field is changed\r\n  useEffect(() => {\r\n    setHasChanges(checkIfChanged());\r\n  }, [Title, artistId, departmentId, CreationYear, medium, height, width, depth, acquisitionDate, condition, location, price, description, image]);\r\n\r\n  // Validate all required fields\r\n  const validateFields = () => {\r\n    const newErrors = {};\r\n    if (!Title) newErrors.Title = \"Title is required.\";\r\n    if (!artistId) newErrors.artistId = \"Please select an artist.\";\r\n    if (!departmentId) newErrors.departmentId = \"Please select a department.\";\r\n    if (!CreationYear) newErrors.CreationYear = \"Creation year is required.\";\r\n    if (!medium) newErrors.medium = \"Please select a medium.\";\r\n    if (!height) newErrors.height = \"Height is required.\";\r\n    if (!width) newErrors.width = \"Width is required.\";\r\n    if (!acquisitionDate) newErrors.acquisitionDate = \"Acquisition date is required.\";\r\n    if (!condition) newErrors.condition = \"Please select a condition.\";\r\n    if (!description) newErrors.description = \"Description is required.\";\r\n\r\n    // Additional validation for custom fields\r\n    if (medium === \"Other\") {\r\n      if (!customMedium) {\r\n        newErrors.customMedium = \"Please specify the medium.\";\r\n      } else if (mediums.includes(customMedium)) {\r\n        newErrors.customMedium = \"This medium already exists in the list. Please select it from the dropdown.\";\r\n      }\r\n    }\r\n    if (condition === \"Other\") {\r\n      if (!customCondition) {\r\n        newErrors.customCondition = \"Please specify the artwork condition.\";\r\n      } else if (conditions.includes(customCondition)) {\r\n        newErrors.customCondition = \"This condition already exists in the list. Please select it from the dropdown.\";\r\n      }\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    const newErrors = {};\r\n    if (!Title) newErrors.Title = \"Title is required.\";\r\n    if (!artistId) newErrors.artistId = \"Please select an artist.\";\r\n    if (!departmentId) newErrors.departmentId = \"Please select a department.\";\r\n    if (CreationYear === '') newErrors.CreationYear = \"Creation year is required.\";  // Handles 0 correctly\r\n    if (!medium) newErrors.medium = \"Please select a medium.\";\r\n    if (height === '') newErrors.height = \"Height is required.\";  // Handles 0 correctly\r\n    if (width === '') newErrors.width = \"Width is required.\";  // Handles 0 correctly\r\n    if (!acquisitionDate) newErrors.acquisitionDate = \"Acquisition date is required.\";\r\n    if (!condition) newErrors.condition = \"Please select a condition.\";\r\n    if (!description) newErrors.description = \"Description is required.\";\r\n\r\n    setErrors(newErrors);\r\n    if (Object.keys(newErrors).length > 0) return;\r\n\r\n    const formData = new FormData();\r\n    formData.append('Title', Title);\r\n    formData.append('artist_id', artistId);\r\n    formData.append('department_id', departmentId);\r\n    formData.append('CreationYear', CreationYear);\r\n    formData.append('Medium', medium === 'Other' ? customMedium : medium);\r\n    formData.append('height', height);\r\n    formData.append('width', width);\r\n    formData.append('depth', depth);\r\n    formData.append('acquisition_date', acquisitionDate);\r\n    formData.append('ArtworkCondition', condition === 'Other' ? customCondition : condition);\r\n    formData.append('location', location);\r\n    formData.append('price', price);\r\n    formData.append('Description', description);\r\n    if (image) formData.append('image', image);\r\n\r\n    try {\r\n      await axios.patch(`${process.env.REACT_APP_API_URL}/artwork/${artwork.ArtworkID}`, formData, {\r\n        headers: { 'Content-Type': 'multipart/form-data' }\r\n      });\r\n      onRefresh();\r\n      onModalRefresh();\r\n      onClose();\r\n    } catch (error) {\r\n      console.error('Error updating artwork:', error);\r\n      setError('Failed to update artwork');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Edit Artwork</h2>\r\n      {error && <p style={{ color: 'red' }}>{error}</p>}\r\n\r\n      <label>Image\r\n        <input type=\"file\" accept=\"image/*\" onChange={handleImageChange} />\r\n      </label>\r\n\r\n      <label>Title *\r\n        <input type=\"text\" value={Title} onChange={(e) => setTitle(e.target.value)} />\r\n        {errors.Title && <p style={{ color: 'red' }}>{errors.Title}</p>}\r\n      </label>\r\n\r\n      <label>Artist *\r\n        <select value={artistId} onChange={(e) => setArtistId(e.target.value)}>\r\n          <option value=\"\">Select Artist</option>\r\n          {artists.map((artist) => (\r\n            <option key={artist.ArtistID} value={artist.ArtistID}>{artist.name_}</option>\r\n          ))}\r\n        </select>\r\n        {errors.artistId && <p style={{ color: 'red' }}>{errors.artistId}</p>}\r\n      </label>\r\n\r\n      <label>Department *\r\n        <select value={departmentId} onChange={(e) => setDepartmentId(e.target.value)}>\r\n          <option value=\"\">Select Department</option>\r\n          {departments.map((department) => (\r\n            <option key={department.DepartmentID} value={department.DepartmentID}>{department.Name}</option>\r\n          ))}\r\n        </select>\r\n        {errors.departmentId && <p style={{ color: 'red' }}>{errors.departmentId}</p>}\r\n      </label>\r\n\r\n      <label>Creation Year *\r\n        <input type=\"number\" value={CreationYear} onChange={(e) => setCreationYear(e.target.value)} />\r\n        {errors.CreationYear && <p style={{ color: 'red' }}>{errors.CreationYear}</p>}\r\n      </label>\r\n\r\n      <label>Medium *\r\n        <select value={medium} onChange={(e) => setMedium(e.target.value)}>\r\n          <option value=\"\">Select Medium</option>\r\n          {mediums.map((med) => <option key={med} value={med}>{med}</option>)}\r\n          <option value=\"Other\">Other</option>\r\n        </select>\r\n        {medium === 'Other' && (\r\n          <input type=\"text\" placeholder=\"Specify medium\" value={customMedium} onChange={(e) => setCustomMedium(e.target.value)} />\r\n        )}\r\n        {errors.medium && <p style={{ color: 'red' }}>{errors.medium}</p>}\r\n        {errors.customMedium && <p style={{ color: 'red' }}>{errors.customMedium}</p>}\r\n      </label>\r\n\r\n      <label>Height (inches) *\r\n        <input type=\"number\" value={height} onChange={(e) => setHeight(e.target.value)} />\r\n        {errors.height && <p style={{ color: 'red' }}>{errors.height}</p>}\r\n      </label>\r\n\r\n      <label>Width (inches) *\r\n        <input type=\"number\" value={width} onChange={(e) => setWidth(e.target.value)} />\r\n        {errors.width && <p style={{ color: 'red' }}>{errors.width}</p>}\r\n      </label>\r\n\r\n      <label>Depth (inches)\r\n        <input type=\"number\" value={depth} onChange={(e) => setDepth(e.target.value)} />\r\n      </label>\r\n\r\n      <label>Acquisition Date *\r\n        <input type=\"date\" value={acquisitionDate} onChange={(e) => setAcquisitionDate(e.target.value)} />\r\n        {errors.acquisitionDate && <p style={{ color: 'red' }}>{errors.acquisitionDate}</p>}\r\n      </label>\r\n\r\n      <label>Condition *\r\n        <select value={condition} onChange={(e) => setCondition(e.target.value)}>\r\n          <option value=\"\">Select Condition</option>\r\n          {conditions.map((cond) => <option key={cond} value={cond}>{cond}</option>)}\r\n          <option value=\"Other\">Other</option>\r\n        </select>\r\n        {condition === 'Other' && (\r\n          <input type=\"text\" placeholder=\"Specify condition\" value={customCondition} onChange={(e) => setCustomCondition(e.target.value)} />\r\n        )}\r\n        {errors.condition && <p style={{ color: 'red' }}>{errors.condition}</p>}\r\n        {errors.customCondition && <p style={{ color: 'red' }}>{errors.customCondition}</p>}\r\n      </label>\r\n\r\n      <label>Location\r\n        <input type=\"text\" value={location} onChange={(e) => setLocation(e.target.value)} />\r\n      </label>\r\n\r\n      <label>Price\r\n        <input type=\"number\" value={price} onChange={(e) => setPrice(e.target.value)} />\r\n      </label>\r\n\r\n      <label>Description *\r\n        <textarea value={description} onChange={(e) => setDescription(e.target.value)} />\r\n        {errors.description && <p style={{ color: 'red' }}>{errors.description}</p>}\r\n      </label>\r\n\r\n      <button onClick={onClose}>Cancel</button>\r\n      <button onClick={handleSave} disabled={!hasChanges}>Save</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ConfirmDeleteArtworkModal = ({ onConfirm, onCancel }) => {\r\n  return (\r\n    <div className={styles.modalOverlay}>\r\n      <div className={styles.modalContent}>\r\n        <h2>Are you sure you want to delete this artwork?</h2>\r\n        <p>This action cannot be undone.</p>\r\n        <div className={styles.buttonContainer}>\r\n          <button onClick={onCancel}>Cancel</button>\r\n          <button onClick={onConfirm} style={{ color: \"red\" }}>Delete</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ArtistCard = ({ artist_, onCardClick }) => {\r\n  return (\r\n    <div className={styles.cards}>\r\n      {artist_.map((artist) => (\r\n        <div\r\n          key={artist.ArtistID}\r\n          className={styles.card}\r\n          onClick={() => onCardClick(artist)}\r\n        >\r\n          <img src={`${process.env.REACT_APP_API_URL}/assets/artists/${artist.image}`} alt={artist.name_} className={styles.image} />\r\n          <h1>{artist.name_}</h1>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ArtistModalUser = ({ artist_, onClose, onRefresh }) => {\r\n  const location = useLocation();\r\n  const role = localStorage.getItem('role');\r\n  const [isEditMode, setIsEditMode] = useState(false);\r\n  const [showConfirmDelete, setShowConfirmDelete] = useState(false);\r\n  const [artist, setArtist] = useState(artist_);\r\n\r\n  const openEditMode = () => setIsEditMode(true);\r\n  const openConfirmDelete = () => setShowConfirmDelete(true);\r\n  const closeConfirmDelete = () => setShowConfirmDelete(false);\r\n\r\n  const handleDelete = async () => {\r\n    try {\r\n      await axios.delete(`${process.env.REACT_APP_API_URL}/artist/${artist.ArtistID}`);\r\n      console.log(\"Artist deleted successfully\");\r\n      onRefresh(); // Refresh the artist list\r\n      onClose(); // Close the modal\r\n    } catch (error) {\r\n      console.error(\"Error deleting artist:\", error);\r\n    }\r\n  };\r\n\r\n  const handleModalRefresh = async () => {\r\n    try {\r\n      const response = await axios.get(`${process.env.REACT_APP_API_URL}/artist/${artist.ArtistID}`);\r\n      const updatedArtist = response.data;\r\n      console.log('Fetched updated artist data from server:', updatedArtist);\r\n      setArtist(updatedArtist);\r\n    } catch (error) {\r\n      console.error('Error fetching updated artist data:', error);\r\n    }\r\n  };\r\n\r\n  const handleOverlayClick = (e) => {\r\n    if (!isEditMode && e.target === e.currentTarget) {\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.modal} onClick={handleOverlayClick}>\r\n      <div className={styles.modal_content}>\r\n        {!isEditMode && (\r\n          <span className={styles.close_button} onClick={onClose}>\r\n            &times;\r\n          </span>\r\n        )}\r\n\r\n        {!isEditMode ? (\r\n          <>\r\n            <img src={`${process.env.REACT_APP_API_URL}/assets/artists/${artist.image}`} alt={artist.name_} className={styles.image} />\r\n            <h2>{artist.name_}</h2>\r\n            <p><strong>Gender:</strong> {artist.gender}</p>\r\n            <p><strong>Nationality:</strong> {artist.nationality || 'Not specified'}</p>\r\n            <p><strong>Birth Year:</strong> {artist.birth_year || 'Not specified'}</p>\r\n            <p><strong>Death Year:</strong> {artist.death_year || 'N/A'}</p>\r\n            <p><strong>Description:</strong> {artist.description || 'No description provided'}</p>\r\n            {(role === 'admin' || role === 'staff') && location.pathname !== '/Art' && (\r\n              <>\r\n                <button onClick={openEditMode}>Edit Artist</button>\r\n                <button onClick={openConfirmDelete}>Delete Artist</button>\r\n              </>\r\n            )}\r\n          </>\r\n        ) : (\r\n          <EditArtistModal\r\n            artist={artist}\r\n            onClose={() => setIsEditMode(false)}\r\n            onRefresh={onRefresh}\r\n            onModalRefresh={handleModalRefresh}\r\n          />\r\n        )}\r\n        {showConfirmDelete && (\r\n          <ConfirmDeleteArtistModal\r\n            onConfirm={handleDelete}\r\n            onCancel={closeConfirmDelete}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst EditArtistModal = ({ artist, onClose, onRefresh, onModalRefresh }) => {\r\n  const [nationalities, setNationalities] = useState([]);\r\n  const [name, setName] = useState(artist.name_);\r\n  const [gender, setGender] = useState(artist.gender);\r\n  const [nationality, setNationality] = useState(artist.nationality);\r\n  const [birthYear, setBirthYear] = useState(artist.birth_year || '');\r\n  const [deathYear, setDeathYear] = useState(artist.death_year || '');\r\n  const [description, setDescription] = useState(artist.description || '');\r\n  const [image, setImage] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [hasChanges, setHasChanges] = useState(false);\r\n\r\n  // Store the initial values to compare changes\r\n  const initialValues = useRef({\r\n    name: artist.name_,\r\n    gender: artist.gender,\r\n    nationality: artist.nationality,\r\n    birthYear: artist.birth_year || '',\r\n    deathYear: artist.death_year || '',\r\n    description: artist.description || ''\r\n  });\r\n\r\n  useEffect(() => {\r\n    const fetchNationalities = async () => {\r\n      try {\r\n        const response = await axios.get(`${process.env.REACT_APP_API_URL}/nationalities`);\r\n        setNationalities(response.data);\r\n      } catch (error) {\r\n        console.error('Error fetching nationalities:', error);\r\n      }\r\n    };\r\n    fetchNationalities();\r\n  }, []);\r\n\r\n  // Update `hasChanges` when any field changes\r\n  useEffect(() => {\r\n    const changesMade =\r\n      name !== initialValues.current.name ||\r\n      gender !== initialValues.current.gender ||\r\n      nationality !== initialValues.current.nationality ||\r\n      birthYear !== initialValues.current.birthYear ||\r\n      deathYear !== initialValues.current.deathYear ||\r\n      description !== initialValues.current.description ||\r\n      image !== null; // Add image to check for new image selection\r\n\r\n    setHasChanges(changesMade);\r\n  }, [name, gender, nationality, birthYear, deathYear, description, image]);\r\n\r\n  const handleSave = () => {\r\n    if (!name) {\r\n        setError('Name is required');\r\n        return;\r\n    }\r\n    if (!gender) {\r\n        setError('Gender is required');\r\n        return;\r\n    }\r\n    if (!nationality) {\r\n        setError('Nationality is required');\r\n        return;\r\n    }\r\n    if (!birthYear) {\r\n        setError('Birth year is required');\r\n        return;\r\n    }\r\n    if (!description) {\r\n        setError('Description is required');\r\n        return;\r\n    }\r\n\r\n    setError(null);\r\n\r\n    const formData = new FormData();\r\n    formData.append('name', name);\r\n    formData.append('gender', gender);\r\n    formData.append('nationality', nationality);\r\n    formData.append('birthYear', birthYear);\r\n    formData.append('deathYear', deathYear || '');\r\n    formData.append('description', description);\r\n    if (image) {\r\n        formData.append('image', image); // Append the file only if it's selected\r\n    }\r\n\r\n    axios.patch(`${process.env.REACT_APP_API_URL}/artist/${artist.ArtistID}`, formData, {\r\n        headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n        }\r\n    })\r\n    .then(() => {\r\n        console.log('Artist updated successfully');\r\n        onRefresh();\r\n        onModalRefresh();\r\n        onClose();\r\n    })\r\n    .catch(err => {\r\n        console.error('Error updating artist:', err);\r\n        setError('Failed to update artist');\r\n    });\r\n};\r\n\r\n  return (\r\n    <div>\r\n      <h2>Edit Artist</h2>\r\n      {error && <p style={{ color: 'red' }}>{error}</p>}\r\n      <label>\r\n          Change Image\r\n          <input\r\n              type=\"file\"\r\n              onChange={(e) => setImage(e.target.files[0])}\r\n          />\r\n      </label>\r\n      <label>\r\n        Name *\r\n        <input\r\n          type=\"text\"\r\n          value={name}\r\n          onChange={(e) => setName(e.target.value)}\r\n          required\r\n        />\r\n      </label>\r\n      <label>\r\n        Gender *\r\n        <select\r\n          value={gender}\r\n          onChange={(e) => setGender(e.target.value)}\r\n          required\r\n        >\r\n          <option value=\"Male\">Male</option>\r\n          <option value=\"Female\">Female</option>\r\n          <option value=\"Other\">Other</option>\r\n        </select>\r\n      </label>\r\n      <label>\r\n        Nationality *\r\n        <select\r\n          value={nationality}\r\n          onChange={(e) => setNationality(e.target.value)}\r\n          required\r\n        >\r\n          {nationalities.map((nat) => (\r\n            <option key={nat} value={nat}>{nat}</option>\r\n          ))}\r\n        </select>\r\n      </label>\r\n      <label>\r\n        Birth Year *\r\n        <input\r\n          type=\"number\"\r\n          value={birthYear}\r\n          onChange={(e) => setBirthYear(e.target.value)}\r\n          required\r\n        />\r\n      </label>\r\n      <label>\r\n        Death Year\r\n        <input\r\n          type=\"number\"\r\n          value={deathYear}\r\n          onChange={(e) => setDeathYear(e.target.value)}\r\n        />\r\n      </label>\r\n      <label>\r\n        Description *\r\n        <textarea\r\n          value={description}\r\n          onChange={(e) => setDescription(e.target.value)}\r\n        />\r\n      </label>\r\n      <button onClick={onClose}>Cancel</button>\r\n      <button onClick={handleSave} disabled={!hasChanges}>Save</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ConfirmDeleteArtistModal = ({ onConfirm, onCancel }) => {\r\n  return (\r\n    <div className={styles.modalOverlay}>\r\n      <div className={styles.modalContent}>\r\n        <h2>Are you sure you want to delete this artist?</h2>\r\n        <p>WARNING: All artwork from this artist WILL be removed from the collection</p>\r\n        <p>This action cannot be undone.</p>\r\n        <div className={styles.buttonContainer}>\r\n          <button onClick={onCancel}>Cancel</button>\r\n          <button onClick={onConfirm} style={{ color: \"red\" }}>Delete</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport {ArtworkCard, ArtworkModalUser, ArtistCard, ArtistModalUser} ;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/ArtworkCard.jsx b/frontend/src/components/ArtworkCard.jsx
--- a/frontend/src/components/ArtworkCard.jsx	(revision be7a189a6dd3991950fbb26c832d8f9769c55e80)
+++ b/frontend/src/components/ArtworkCard.jsx	(date 1731386552000)
@@ -12,7 +12,7 @@
           className={styles.card}
           onClick={() => onCardClick(art)}
         >
-          <img src={`${process.env.REACT_APP_API_URL}/assets/artworks/${art.image}`} alt={art.Title} className={styles.image} />
+          <img src={`http://localhost:5000/assets/artworks/${art.image}`} alt={art.Title} className={styles.image} />
           <h1>{art.Title}</h1>
           <p>{art.artist_name || 'Unknown Artist'}</p>
           <p>{art.CreationYear}</p>
@@ -35,7 +35,7 @@
 
   const handleDelete = async () => {
     try {
-      await axios.delete(`${process.env.REACT_APP_API_URL}/artwork/${artwork.ArtworkID}`);
+      await axios.delete(`http://localhost:5000/artwork/${artwork.ArtworkID}`);
       console.log("Artwork deleted successfully");
       onRefresh(); // Refresh the artwork list
       onClose(); // Close the modal
@@ -46,7 +46,7 @@
 
   const handleModalRefresh = async () => {
     try {
-      const response = await axios.get(`${process.env.REACT_APP_API_URL}/artwork/${artwork.ArtworkID}`);
+      const response = await axios.get(`http://localhost:5000/artwork/${artwork.ArtworkID}`);
       setArtwork(response.data);
     } catch (error) {
       console.error('Error fetching updated artwork data:', error);
@@ -70,7 +70,7 @@
 
         {!isEditMode ? (
           <>
-            <img src={`${process.env.REACT_APP_API_URL}/assets/artworks/${artwork.image}`} alt={artwork.Title} className={styles.image} />
+            <img src={`http://localhost:5000/assets/artworks/${artwork.image}`} alt={artwork.Title} className={styles.image} />
             <h2>{artwork.Title}</h2>
             <p><strong>Artist:</strong> {artwork.artist_name || 'Unknown Artist'}</p>
             <p><strong>Year:</strong> {artwork.CreationYear}</p>
@@ -145,10 +145,10 @@
     const fetchData = async () => {
       try {
         const [artistRes, departmentsRes, mediumsRes, conditionsRes] = await Promise.all([
-          axios.get(`${process.env.REACT_APP_API_URL}/artist`),
-          axios.get(`${process.env.REACT_APP_API_URL}/department`),
-          axios.get(`${process.env.REACT_APP_API_URL}/mediums`),
-          axios.get(`${process.env.REACT_APP_API_URL}/artworkconditions`)
+          axios.get(`http://localhost:5000/artist`),
+          axios.get(`http://localhost:5000/department`),
+          axios.get(`http://localhost:5000/mediums`),
+          axios.get(`http://localhost:5000/artworkconditions`)
         ]);
         setArtists(artistRes.data);
         setDepartments(departmentsRes.data);
@@ -256,7 +256,7 @@
     if (image) formData.append('image', image);
 
     try {
-      await axios.patch(`${process.env.REACT_APP_API_URL}/artwork/${artwork.ArtworkID}`, formData, {
+      await axios.patch(`http://localhost:5000/artwork/${artwork.ArtworkID}`, formData, {
         headers: { 'Content-Type': 'multipart/form-data' }
       });
       onRefresh();
@@ -395,7 +395,7 @@
           className={styles.card}
           onClick={() => onCardClick(artist)}
         >
-          <img src={`${process.env.REACT_APP_API_URL}/assets/artists/${artist.image}`} alt={artist.name_} className={styles.image} />
+          <img src={`http://localhost:5000/assets/artists/${artist.image}`} alt={artist.name_} className={styles.image} />
           <h1>{artist.name_}</h1>
         </div>
       ))}
@@ -416,7 +416,7 @@
 
   const handleDelete = async () => {
     try {
-      await axios.delete(`${process.env.REACT_APP_API_URL}/artist/${artist.ArtistID}`);
+      await axios.delete(`http://localhost:5000/artist/${artist.ArtistID}`);
       console.log("Artist deleted successfully");
       onRefresh(); // Refresh the artist list
       onClose(); // Close the modal
@@ -427,7 +427,7 @@
 
   const handleModalRefresh = async () => {
     try {
-      const response = await axios.get(`${process.env.REACT_APP_API_URL}/artist/${artist.ArtistID}`);
+      const response = await axios.get(`http://localhost:5000/artist/${artist.ArtistID}`);
       const updatedArtist = response.data;
       console.log('Fetched updated artist data from server:', updatedArtist);
       setArtist(updatedArtist);
@@ -453,7 +453,7 @@
 
         {!isEditMode ? (
           <>
-            <img src={`${process.env.REACT_APP_API_URL}/assets/artists/${artist.image}`} alt={artist.name_} className={styles.image} />
+            <img src={`http://localhost:5000/assets/artists/${artist.image}`} alt={artist.name_} className={styles.image} />
             <h2>{artist.name_}</h2>
             <p><strong>Gender:</strong> {artist.gender}</p>
             <p><strong>Nationality:</strong> {artist.nationality || 'Not specified'}</p>
@@ -511,7 +511,7 @@
   useEffect(() => {
     const fetchNationalities = async () => {
       try {
-        const response = await axios.get(`${process.env.REACT_APP_API_URL}/nationalities`);
+        const response = await axios.get(`http://localhost:5000/nationalities`);
         setNationalities(response.data);
       } catch (error) {
         console.error('Error fetching nationalities:', error);
@@ -569,7 +569,7 @@
         formData.append('image', image); // Append the file only if it's selected
     }
 
-    axios.patch(`${process.env.REACT_APP_API_URL}/artist/${artist.ArtistID}`, formData, {
+    axios.patch(`http://localhost:5000/artist/${artist.ArtistID}`, formData, {
         headers: {
             'Content-Type': 'multipart/form-data'
         }
Index: frontend/src/pages/Report.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/pages/Report.jsx\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport styles from '../css/Report.module.css';\r\nimport HomeNavBar from '../components/HomeNavBar';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst Report = () => {\r\n    const [reportCategory, setReportCategory] = useState('GiftShopReport');\r\n    const [reportType, setReportType] = useState('revenue');\r\n    const [reportOptionTickets, setReportOptionTickets] = useState('totalTickets'); // Added for TicketsReport\r\n    const [reportPeriodType, setReportPeriodType] = useState('date_range'); // 'date_range', 'month', 'year', or 'single_day'\r\n    const [startDate, setStartDate] = useState(null); // Date object\r\n    const [endDate, setEndDate] = useState(null); // Date object\r\n    const [selectedMonth, setSelectedMonth] = useState(null); // Date object\r\n    const [selectedYear, setSelectedYear] = useState(null); // Date object\r\n    const [selectedDate, setSelectedDate] = useState(null); // Date object\r\n    const [itemCategory, setItemCategory] = useState('');\r\n    const [priceCategory, setPriceCategory] = useState([]);\r\n    const [paymentMethod, setPaymentMethod] = useState('');\r\n    const [itemId, setItemId] = useState('');\r\n    const [userTypeId, setUserTypeId] = useState('');\r\n    const [availableItems, setAvailableItems] = useState([]);\r\n    const [availableUserTypes, setAvailableUserTypes] = useState([]);\r\n    const [availableCategories, setAvailableCategories] = useState([]);\r\n    const [availablePriceCategories, setAvailablePriceCategories] = useState([]);\r\n    const [availablePaymentMethods, setAvailablePaymentMethods] = useState([]);\r\n    const [reportData, setReportData] = useState([]);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const navigate = useNavigate();\r\n    const role = localStorage.getItem('role');\r\n    const userId = localStorage.getItem('userId');\r\n\r\n    // Redirect non-admin and non-staff users\r\n    useEffect(() => {\r\n        if (role !== 'admin' && role !== 'staff') {\r\n            navigate('/'); // Redirect to home or appropriate page\r\n        }\r\n    }, [role, navigate]);\r\n\r\n    // Fetch available options for the filters when reportType or reportCategory changes\r\n    useEffect(() => {\r\n        if (reportType === 'revenue' || reportType === 'transaction_details') {\r\n            if (reportCategory === 'GiftShopReport') {\r\n                // Fetch available items\r\n                axios\r\n                    .get(`${process.env.REACT_APP_API_URL}/giftshopitemsreport`, {\r\n                        headers: { 'Content-Type': 'application/json' },\r\n                    })\r\n                    .then((response) => setAvailableItems(response.data))\r\n                    .catch((error) => console.error('Error fetching items:', error));\r\n\r\n                // Fetch available categories\r\n                axios\r\n                    .get(`${process.env.REACT_APP_API_URL}/giftshopcategories`, {\r\n                        headers: { 'Content-Type': 'application/json' },\r\n                    })\r\n                    .then((response) => setAvailableCategories(response.data))\r\n                    .catch((error) => console.error('Error fetching categories:', error));\r\n\r\n                // Fetch available payment methods\r\n                axios\r\n                    .get(`${process.env.REACT_APP_API_URL}/paymentmethods`, {\r\n                        headers: { 'Content-Type': 'application/json' },\r\n                    })\r\n                    .then((response) => setAvailablePaymentMethods(response.data))\r\n                    .catch((error) => console.error('Error fetching payment methods:', error));\r\n            } else if (reportCategory === 'TicketsReport') {\r\n                // Fetch available price categories\r\n                axios\r\n                    .get(`${process.env.REACT_APP_API_URL}/ticket`, {\r\n                        headers: { 'Content-Type': 'application/json' },\r\n                    })\r\n                    .then((response) => setAvailablePriceCategories(response.data))\r\n                    .catch((error) => console.error('Error fetching price categories:', error));\r\n\r\n                // Fetch available user types\r\n                axios\r\n                    .get(`${process.env.REACT_APP_API_URL}/user-type`, {\r\n                        headers: { 'Content-Type': 'application/json' },\r\n                    })\r\n                    .then((response) => setAvailableUserTypes(response.data))\r\n                    .catch((error) => console.error('Error fetching user types:', error));\r\n\r\n                // Fetch available payment methods\r\n                axios\r\n                    .get(`${process.env.REACT_APP_API_URL}/paymentmethods`, {\r\n                        headers: { 'Content-Type': 'application/json' },\r\n                    })\r\n                    .then((response) => setAvailablePaymentMethods(response.data))\r\n                    .catch((error) => console.error('Error fetching payment methods:', error));\r\n            }\r\n        }\r\n    }, [reportType, reportCategory]);\r\n\r\n    // Clear report data when report period type changes\r\n    useEffect(() => {\r\n        setReportData([]);\r\n        setErrorMessage('');\r\n    }, [reportPeriodType]);\r\n\r\n    // Fetch report data when the \"Generate Report\" button is clicked\r\n    const fetchReportData = () => {\r\n        // Input validation\r\n        if (!reportCategory) {\r\n            setErrorMessage('Please select a report category.');\r\n            return;\r\n        }\r\n        if (!reportType) {\r\n            setErrorMessage('Please select a report type.');\r\n            return;\r\n        }\r\n        if (reportPeriodType === 'date_range') {\r\n            if (!startDate || !endDate) {\r\n                setErrorMessage('Please select start and end dates.');\r\n                return;\r\n            }\r\n            if (startDate > endDate) {\r\n                setErrorMessage('Start date cannot be after end date.');\r\n                return;\r\n            }\r\n        } else if (reportPeriodType === 'month') {\r\n            if (!selectedMonth) {\r\n                setErrorMessage('Please select a month.');\r\n                return;\r\n            }\r\n        } else if (reportPeriodType === 'year') {\r\n            if (!selectedYear) {\r\n                setErrorMessage('Please select a year.');\r\n                return;\r\n            }\r\n        } else if (reportPeriodType === 'single_day') {\r\n            if (!selectedDate) {\r\n                setErrorMessage('Please select a date.');\r\n                return;\r\n            }\r\n        }\r\n\r\n        setErrorMessage('');\r\n        setLoading(true);\r\n\r\n        // Prepare data for backend\r\n        const reportRequest = {\r\n            report_category: reportCategory,\r\n            report_type: reportType,\r\n            report_option_tickets: reportOptionTickets,\r\n            report_period_type: reportPeriodType,\r\n            start_date: startDate ? startDate.toISOString().split('T')[0] : '',\r\n            end_date: endDate ? endDate.toISOString().split('T')[0] : '',\r\n            selected_month: selectedMonth ? selectedMonth.toISOString().split('T')[0].slice(0, 7) : '',\r\n            selected_year: selectedYear ? selectedYear.getFullYear().toString() : '',\r\n            selected_date: selectedDate ? selectedDate.toISOString().split('T')[0] : '',\r\n            item_category: itemCategory,\r\n            payment_method: paymentMethod,\r\n            item_id: itemId,\r\n            price_category: priceCategory,\r\n            user_type_id: userTypeId === \"Both\" ? availableUserTypes.map((user) => user.role_name) : userTypeId,\r\n        };\r\n\r\n        // Retrieve user credentials from localStorage\r\n        const role = localStorage.getItem('role');\r\n        const userId = localStorage.getItem('userId');\r\n\r\n        axios\r\n            .post(`${process.env.REACT_APP_API_URL}/reports`, reportRequest, {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'user-id': userId,\r\n                    role: role,\r\n                },\r\n            })\r\n            .then((response) => {\r\n                setReportData(response.data.reportData);\r\n                setLoading(false);\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error fetching report data:', error);\r\n                setErrorMessage(\r\n                    error.response?.data?.message || 'Error fetching report data.'\r\n                );\r\n                setLoading(false);\r\n            });\r\n    };\r\n\r\n    const handlePriceCategoryChange = (e) => {\r\n        const selectedValue = e.target.value;\r\n\r\n        if (selectedValue === \"All Price Categories\") {\r\n            // If \"All Price Categories\" is selected, add or clear All Price Categories\r\n            setPriceCategory((prevCategories) => {\r\n                if (prevCategories.includes(\"All Price Categories\")) {\r\n                    // If already selected, deselect all\r\n                    return [];\r\n                } else {\r\n                    // Select All Price Categories\r\n                    return [\"All Price Categories\", ...availablePriceCategories.map((pcategory) => pcategory.price_category)];\r\n                }\r\n            });\r\n        } else {\r\n            // Handle individual category selection\r\n            setPriceCategory((prevCategories) => {\r\n                // Remove \"All Price Categories\" if any other category is selected individually\r\n                const updatedCategories = prevCategories.includes(\"All Price Categories\")\r\n                    ? availablePriceCategories.map((pcategory) => pcategory.price_category)\r\n                    : prevCategories;\r\n\r\n                if (!updatedCategories.includes(selectedValue)) {\r\n                    return [...updatedCategories, selectedValue];\r\n                } else {\r\n                    return updatedCategories.filter((category) => category !== selectedValue);\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    const removeCategory = (category) => {\r\n        setPriceCategory((prevCategories) => {\r\n            // If \"All Price Categories\" is being removed, deselect everything\r\n            if (category === \"All Price Categories\") {\r\n                return [];\r\n            }\r\n\r\n            // Otherwise, remove the selected category\r\n            const updatedCategories = prevCategories.filter((cat) => cat !== category);\r\n\r\n            // If All Price Categories are deselected, also remove \"All Price Categories\"\r\n            if (updatedCategories.length === availablePriceCategories.length) {\r\n                return updatedCategories.filter((cat) => cat !== \"All Price Categories\");\r\n            }\r\n\r\n            return updatedCategories;\r\n        });\r\n    };\r\n\r\n    const handleGenerateReport = () => {\r\n        fetchReportData();\r\n        setIsModalOpen(true);\r\n    };\r\n    const closeModal = () => {\r\n        setIsModalOpen(false);\r\n    };\r\n\r\n    // Function to render report data based on report type\r\n    const renderReportTable = () => {\r\n        if (loading) {\r\n            return <p>Loading report...</p>;\r\n        }\r\n\r\n        if (reportData.length === 0) {\r\n            return <p>No data available for the selected report.</p>;\r\n        }\r\n\r\n        // Check for 'revenue' report with 'single_day' period type\r\n        if (reportType === 'revenue' && reportPeriodType === 'single_day') {\r\n            return renderSingleDayRevenueReport();\r\n        }\r\n\r\n        if (reportCategory === 'TicketsReport') {\r\n            return renderTicketsReport();\r\n        }\r\n\r\n        switch (reportType) {\r\n            case 'revenue':\r\n                return renderRevenueReport();\r\n            case 'transaction_details':\r\n                return renderTransactionDetailsReport();\r\n            default:\r\n                return null;\r\n        }\r\n    };\r\n\r\n    const renderTicketsReport = () => {\r\n        // Implement rendering logic based on reportOptionTickets\r\n        switch (reportOptionTickets) {\r\n            case 'totalTickets':\r\n                return renderTotalTicketsReport();\r\n            case 'totalRevenue':\r\n                return renderTotalRevenueReport();\r\n            case 'peakDateSold':\r\n                return renderPeakDateSoldReport();\r\n            default:\r\n                return null;\r\n        }\r\n    };\r\n\r\n    const renderTotalTicketsReport = () => {\r\n        // Implement the rendering logic for total tickets sold\r\n        return (\r\n            <table className={styles.reportTable}>\r\n                <thead>\r\n                <tr>\r\n                    <th>{getDateLabel()}</th>\r\n                    <th>Total Tickets Sold</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {reportData.map((item, index) => (\r\n                    <tr key={index}>\r\n                        <td>{formatDateLabel(item.date)}</td>\r\n                        <td>{item.total_tickets_sold}</td>\r\n                    </tr>\r\n                ))}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    };\r\n\r\n    const renderTotalRevenueReport = () => {\r\n        // Implement the rendering logic for total revenue from tickets\r\n        return (\r\n            <table className={styles.reportTable}>\r\n                <thead>\r\n                <tr>\r\n                    <th>{getDateLabel()}</th>\r\n                    <th>Total Revenue</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {reportData.map((item, index) => (\r\n                    <tr key={index}>\r\n                        <td>{formatDateLabel(item.date)}</td>\r\n                        <td>${parseFloat(item.total_revenue).toFixed(2)}</td>\r\n                    </tr>\r\n                ))}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    };\r\n\r\n    const renderPeakDateSoldReport = () => {\r\n        // Implement the rendering logic for peak date sold\r\n        return (\r\n            <table className={styles.reportTable}>\r\n                <thead>\r\n                <tr>\r\n                    <th>Date</th>\r\n                    <th>Total Tickets Sold</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {reportData.map((item, index) => (\r\n                    <tr key={index}>\r\n                        <td>{formatDateLabel(item.date)}</td>\r\n                        <td>{item.total_tickets_sold}</td>\r\n                    </tr>\r\n                ))}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    };\r\n\r\n    const renderRevenueReport = () => {\r\n        // Calculate total revenue\r\n        const totalRevenue = reportData.reduce(\r\n            (acc, curr) => acc + parseFloat(curr.total_revenue || 0),\r\n            0\r\n        );\r\n\r\n        return (\r\n            <>\r\n                <table className={styles.reportTable}>\r\n                    <thead>\r\n                    <tr>\r\n                        <th>{getDateLabel()}</th>\r\n                        <th>Total Revenue</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {reportData.map((item, index) => {\r\n                        // Convert total_revenue to a number\r\n                        const revenue = Number(item.total_revenue);\r\n\r\n                        // Handle cases where revenue is not a valid number\r\n                        const formattedRevenue = isNaN(revenue) ? 'N/A' : revenue.toFixed(2);\r\n\r\n                        return (\r\n                            <tr key={index}>\r\n                                <td>{formatDateLabel(item.date)}</td>\r\n                                <td>${formattedRevenue}</td>\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                    {/* Total Revenue Row */}\r\n                    <tr>\r\n                        <td>\r\n                            <strong>Total Revenue</strong>\r\n                        </td>\r\n                        <td>\r\n                            <strong>${totalRevenue.toFixed(2)}</strong>\r\n                        </td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n            </>\r\n        );\r\n    };\r\n\r\n    // New function to render revenue report for 'single_day' period type\r\n    const renderSingleDayRevenueReport = () => {\r\n        // Group transactions by transaction ID to group items within the same transaction\r\n        const transactions = {};\r\n\r\n        reportData.forEach((item) => {\r\n            if (!transactions[item.transaction_id]) {\r\n                transactions[item.transaction_id] = {\r\n                    transaction_id: item.transaction_id,\r\n                    transaction_date: item.transaction_date,\r\n                    transaction_type: item.transaction_type,\r\n                    payment_status: item.payment_status,\r\n                    username: item.username,\r\n                    items: [],\r\n                    total_amount: 0,\r\n                };\r\n            }\r\n            transactions[item.transaction_id].items.push({\r\n                item_id: item.item_id,\r\n                item_name: item.item_name,\r\n                quantity: item.quantity,\r\n                price_at_purchase: item.price_at_purchase,\r\n                item_total: item.item_total,\r\n            });\r\n            transactions[item.transaction_id].total_amount += parseFloat(item.item_total);\r\n        });\r\n\r\n        // Convert transactions object to array\r\n        const transactionsArray = Object.values(transactions);\r\n\r\n        return (\r\n            <>\r\n                <table className={styles.reportTable}>\r\n                    <thead>\r\n                    <tr>\r\n                        <th>Transaction ID</th>\r\n                        <th>Transaction Time</th>\r\n                        <th>User</th>\r\n                        <th>Payment Method</th>\r\n                        <th>Payment Status</th>\r\n                        <th>Items</th>\r\n                        <th>Total Amount</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {transactionsArray.map((transaction, index) => (\r\n                        <tr key={index}>\r\n                            <td>{transaction.transaction_id}</td>\r\n                            <td>{new Date(transaction.transaction_date).toLocaleString()}</td>\r\n                            <td>{transaction.username}</td>\r\n                            <td>{transaction.transaction_type}</td>\r\n                            <td>{transaction.payment_status}</td>\r\n                            <td>\r\n                                {transaction.items.map((item, idx) => (\r\n                                    <div key={idx}>\r\n                                        <strong>{item.item_name}</strong> (ID: {item.item_id})<br />\r\n                                        Quantity: {item.quantity}<br />\r\n                                        Price: ${parseFloat(item.price_at_purchase).toFixed(2)}<br />\r\n                                        Item Total: ${parseFloat(item.item_total).toFixed(2)}<br />\r\n                                    </div>\r\n                                ))}\r\n                            </td>\r\n                            <td>${transaction.total_amount.toFixed(2)}</td>\r\n                        </tr>\r\n                    ))}\r\n                    </tbody>\r\n                </table>\r\n            </>\r\n        );\r\n    };\r\n\r\n    const renderTransactionDetailsReport = () => {\r\n        return (\r\n            <table className={styles.reportTable}>\r\n                <thead>\r\n                <tr>\r\n                    <th>Transaction ID</th>\r\n                    <th>Transaction Date</th>\r\n                    <th>User</th>\r\n                    <th>Payment Method</th>\r\n                    <th>Payment Status</th>\r\n                    <th>Item ID</th>\r\n                    <th>Item Name</th>\r\n                    <th>Quantity</th>\r\n                    <th>Price at Purchase</th>\r\n                    <th>Item Total</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {reportData.map((item, index) => (\r\n                    <tr key={index}>\r\n                        <td>{item.transaction_id}</td>\r\n                        <td>{new Date(item.transaction_date).toLocaleString()}</td>\r\n                        <td>{item.username}</td>\r\n                        <td>{item.transaction_type}</td>\r\n                        <td>{item.payment_status}</td>\r\n                        <td>{item.item_id}</td>\r\n                        <td>{item.item_name}</td>\r\n                        <td>{item.quantity}</td>\r\n                        <td>${parseFloat(item.price_at_purchase).toFixed(2)}</td>\r\n                        <td>${parseFloat(item.item_total).toFixed(2)}</td>\r\n                    </tr>\r\n                ))}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    };\r\n\r\n    // Helper functions to get and format date labels\r\n    const getDateLabel = () => {\r\n        if (\r\n            reportPeriodType === 'month' ||\r\n            reportPeriodType === 'date_range' ||\r\n            reportPeriodType === 'single_day'\r\n        ) {\r\n            return 'Date';\r\n        } else if (reportPeriodType === 'year') {\r\n            return 'Month';\r\n        }\r\n        return 'Date';\r\n    };\r\n\r\n    const formatDateLabel = (dateStr) => {\r\n        if (\r\n            reportPeriodType === 'month' ||\r\n            reportPeriodType === 'date_range' ||\r\n            reportPeriodType === 'single_day'\r\n        ) {\r\n            const dateObj = new Date(dateStr);\r\n            return dateObj.toLocaleDateString();\r\n        } else if (reportPeriodType === 'year') {\r\n            const dateObj = new Date(dateStr);\r\n            const options = { year: 'numeric', month: 'long' };\r\n            return dateObj.toLocaleDateString(undefined, options);\r\n        }\r\n        return dateStr;\r\n    };\r\n\r\n    // Function to generate PDF of the report\r\n    const generatePDF = () => {\r\n        const doc = new jsPDF();\r\n\r\n        if (reportCategory === 'TicketsReport') {\r\n            doc.text('Tickets Report', 14, 20);\r\n            // Implement PDF generation based on reportOptionTickets\r\n            // Similar to the render functions\r\n            // ...\r\n        } else if (reportType === 'revenue' && reportPeriodType === 'single_day') {\r\n            doc.text('Revenue Report - Single Day', 14, 20);\r\n            // Generate PDF for single day revenue report\r\n            // ...\r\n        } else if (reportType === 'revenue') {\r\n            doc.text('Revenue Report', 14, 20);\r\n            let body = reportData.map((item) => {\r\n                const revenue = Number(item.total_revenue);\r\n                const formattedRevenue = isNaN(revenue) ? 'N/A' : revenue.toFixed(2);\r\n                const dateLabel = formatDateLabel(item.date);\r\n                return [dateLabel, formattedRevenue];\r\n            });\r\n\r\n            // Add total revenue row\r\n            const totalRevenue = reportData.reduce(\r\n                (acc, curr) => acc + parseFloat(curr.total_revenue || 0),\r\n                0\r\n            );\r\n            body.push(['Total Revenue', totalRevenue.toFixed(2)]);\r\n\r\n            doc.autoTable({\r\n                head: [[getDateLabel(), 'Total Revenue']],\r\n                body: body,\r\n                startY: 30,\r\n            });\r\n        } else if (reportType === 'transaction_details') {\r\n            doc.text('Transaction Details Report', 14, 20);\r\n\r\n            let body = reportData.map((item) => {\r\n                return [\r\n                    item.transaction_id,\r\n                    new Date(item.transaction_date).toLocaleString(),\r\n                    item.username,\r\n                    item.transaction_type,\r\n                    item.payment_status,\r\n                    item.item_id,\r\n                    item.item_name,\r\n                    item.quantity,\r\n                    parseFloat(item.price_at_purchase).toFixed(2),\r\n                    parseFloat(item.item_total).toFixed(2),\r\n                ];\r\n            });\r\n\r\n            doc.autoTable({\r\n                head: [\r\n                    [\r\n                        'Transaction ID',\r\n                        'Transaction Date',\r\n                        'User',\r\n                        'Payment Method',\r\n                        'Payment Status',\r\n                        'Item ID',\r\n                        'Item Name',\r\n                        'Quantity',\r\n                        'Price at Purchase',\r\n                        'Item Total',\r\n                    ],\r\n                ],\r\n                body: body,\r\n                startY: 30,\r\n                styles: { fontSize: 8 },\r\n            });\r\n        }\r\n\r\n        doc.save(`${reportType}_report.pdf`);\r\n    };\r\n\r\n    return (\r\n        <div className={styles.reportContainer}>\r\n            <HomeNavBar />\r\n            <h1 className={styles.title}>Reports</h1>\r\n            <div className={styles.filterContainer}>\r\n                <div className={styles.formGroup}>\r\n                    <label htmlFor=\"reportCategory\">Report Category:</label>\r\n                    <select\r\n                        id=\"reportCategory\"\r\n                        value={reportCategory}\r\n                        onChange={(e) => setReportCategory(e.target.value)}\r\n                    >\r\n                        <option value=\"GiftShopReport\">Gift Shop Report</option>\r\n                        <option value=\"TicketsReport\">Tickets Report</option>\r\n                        {/* Add more report categories if needed */}\r\n                    </select>\r\n                </div>\r\n                <div className={styles.formGroup}>\r\n                    <label htmlFor=\"reportType\">Report Type:</label>\r\n                    <select\r\n                        id=\"reportType\"\r\n                        value={reportType}\r\n                        onChange={(e) => {\r\n                            setReportType(e.target.value);\r\n                            setItemCategory('');\r\n                            setPaymentMethod('');\r\n                            setItemId('');\r\n                        }}\r\n                    >\r\n                        <option value=\"revenue\">Revenue Report</option>\r\n                        <option value=\"transaction_details\">Transaction Details Report</option>\r\n                        {/* Add more report types if needed */}\r\n                    </select>\r\n                </div>\r\n                {reportCategory === 'TicketsReport' && (\r\n                    <div className={styles.formGroup}>\r\n                        <label htmlFor=\"reportOption\">Report Options:</label>\r\n                        <select\r\n                            id=\"reportOption\"\r\n                            value={reportOptionTickets}\r\n                            onChange={(e) => {\r\n                                setReportOptionTickets(e.target.value);\r\n                            }}\r\n                        >\r\n                            <option value=\"totalTickets\">Total Tickets</option>\r\n                            <option value=\"totalRevenue\">Total Revenue</option>\r\n                            <option value=\"peakDateSold\">Peak Date Sold</option>\r\n                        </select>\r\n                    </div>\r\n                )}\r\n                {/* Report Period Type Selection using Buttons */}\r\n                <div className={styles.formGroup}>\r\n                    <label>Report Period:</label>\r\n                    <div className={styles.buttonGroup}>\r\n                        <button\r\n                            className={`${styles.toggleButton} ${\r\n                                reportPeriodType === 'date_range' ? styles.activeButton : ''\r\n                            }`}\r\n                            onClick={() => {\r\n                                setReportPeriodType('date_range');\r\n                                setReportData([]);\r\n                                setErrorMessage('');\r\n                            }}\r\n                        >\r\n                            By Date Range\r\n                        </button>\r\n                        <button\r\n                            className={`${styles.toggleButton} ${\r\n                                reportPeriodType === 'month' ? styles.activeButton : ''\r\n                            }`}\r\n                            onClick={() => {\r\n                                setReportPeriodType('month');\r\n                                setReportData([]);\r\n                                setErrorMessage('');\r\n                            }}\r\n                        >\r\n                            By Month\r\n                        </button>\r\n                        <button\r\n                            className={`${styles.toggleButton} ${\r\n                                reportPeriodType === 'year' ? styles.activeButton : ''\r\n                            }`}\r\n                            onClick={() => {\r\n                                setReportPeriodType('year');\r\n                                setReportData([]);\r\n                                setErrorMessage('');\r\n                            }}\r\n                        >\r\n                            By Year\r\n                        </button>\r\n                        <button\r\n                            className={`${styles.toggleButton} ${\r\n                                reportPeriodType === 'single_day' ? styles.activeButton : ''\r\n                            }`}\r\n                            onClick={() => {\r\n                                setReportPeriodType('single_day');\r\n                                setReportData([]);\r\n                                setErrorMessage('');\r\n                            }}\r\n                        >\r\n                            Single Day\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                {reportType === 'revenue' && (\r\n                    <>\r\n                        {reportCategory === 'GiftShopReport' && (\r\n                            <>\r\n                                <div className={styles.formGroup}>\r\n                                    <label htmlFor=\"itemCategory\">Category:</label>\r\n                                    <select\r\n                                        id=\"itemCategory\"\r\n                                        value={itemCategory}\r\n                                        onChange={(e) => setItemCategory(e.target.value)}\r\n                                    >\r\n                                        <option value=\"\">All Categories</option>\r\n                                        {availableCategories.map((category, index) => (\r\n                                            <option key={index} value={category.category}>\r\n                                                {category.category}\r\n                                            </option>\r\n                                        ))}\r\n                                    </select>\r\n                                </div>\r\n\r\n                                <div className={styles.formGroup}>\r\n                                    <label htmlFor=\"itemId\">Item:</label>\r\n                                    <select\r\n                                        id=\"itemId\"\r\n                                        value={itemId}\r\n                                        onChange={(e) => setItemId(e.target.value)}\r\n                                    >\r\n                                        <option value=\"\">All Items</option>\r\n                                        {availableItems.map((item) => (\r\n                                            <option key={item.item_id} value={item.item_id}>\r\n                                                {item.name_}\r\n                                            </option>\r\n                                        ))}\r\n                                    </select>\r\n                                </div>\r\n                            </>\r\n                        )}\r\n\r\n                        {reportCategory === 'TicketsReport' && (\r\n                            <>\r\n                                <div className={styles.formGroup}>\r\n                                    <label htmlFor=\"priceCategory\">Price Category:</label>\r\n                                    <select\r\n                                        id=\"priceCategory\"\r\n                                        onChange={handlePriceCategoryChange}\r\n                                        value=\"\" // Set to empty string to reset after each selection\r\n                                    >\r\n                                        <option value=\"\">Select Price Categories</option>\r\n                                        <option value=\"All Price Categories\">All Price Categories</option>\r\n                                        {availablePriceCategories.map((pcategory, index) => (\r\n                                            <option key={index} value={pcategory.price_category}>\r\n                                                {pcategory.price_category}\r\n                                            </option>\r\n                                        ))}\r\n                                    </select>\r\n\r\n                                    {/* Display the selected categories as buttons */}\r\n                                    <div className={styles.selectedCategoriesContainer}>\r\n                                        {priceCategory.map((category, index) => (\r\n                                            <button\r\n                                                key={index}\r\n                                                className={styles.categoryButton}\r\n                                                onClick={() => removeCategory(category)}\r\n                                            >\r\n                                                {category} <span className={styles.closeButton}>×</span>\r\n                                            </button>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className={styles.formGroup}>\r\n                                    <label htmlFor=\"userTypeId\">User Type:</label>\r\n                                    <select\r\n                                        id=\"userTypeId\"\r\n                                        value={userTypeId}\r\n                                        onChange={(e) => setUserTypeId(e.target.value)}\r\n                                    >\r\n                                        <option value=\"\">All User Types</option>\r\n                                        <option value=\"Both\">Both</option> {/* Add \"Both\" option */}\r\n                                        {availableUserTypes.map((usertype) => (\r\n                                            <option key={usertype.role_name} value={usertype.role_name}>\r\n                                                {usertype.role_name}\r\n                                            </option>\r\n                                        ))}\r\n                                    </select>\r\n                                </div>\r\n                            </>\r\n                        )}\r\n\r\n                        <div className={styles.formGroup}>\r\n                            <label htmlFor=\"paymentMethod\">Payment Method:</label>\r\n                            <select\r\n                                id=\"paymentMethod\"\r\n                                value={paymentMethod}\r\n                                onChange={(e) => setPaymentMethod(e.target.value)}\r\n                            >\r\n                                <option value=\"\">All Payment Methods</option>\r\n                                {availablePaymentMethods.map((method, index) => (\r\n                                    <option key={index} value={method.transaction_type}>\r\n                                        {method.transaction_type}\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n                        </div>\r\n                    </>\r\n                )}\r\n\r\n                {/* Date Range Inputs */}\r\n                {reportPeriodType === 'date_range' && (\r\n                    <>\r\n                        <div className={styles.formGroup}>\r\n                            <label htmlFor=\"startDate\">Start Date:</label>\r\n                            <DatePicker\r\n                                selected={startDate}\r\n                                onChange={(date) => setStartDate(date)}\r\n                                selectsStart\r\n                                startDate={startDate}\r\n                                endDate={endDate}\r\n                                dateFormat=\"yyyy-MM-dd\"\r\n                                className={styles.datePicker}\r\n                                placeholderText=\"Select Start Date\"\r\n                            />\r\n                        </div>\r\n                        <div className={styles.formGroup}>\r\n                            <label htmlFor=\"endDate\">End Date:</label>\r\n                            <DatePicker\r\n                                selected={endDate}\r\n                                onChange={(date) => setEndDate(date)}\r\n                                selectsEnd\r\n                                startDate={startDate}\r\n                                endDate={endDate}\r\n                                minDate={startDate}\r\n                                dateFormat=\"yyyy-MM-dd\"\r\n                                className={styles.datePicker}\r\n                                placeholderText=\"Select End Date\"\r\n                            />\r\n                        </div>\r\n                    </>\r\n                )}\r\n\r\n                {/* Month Picker Input */}\r\n                {reportPeriodType === 'month' && (\r\n                    <div className={styles.formGroup}>\r\n                        <label htmlFor=\"selectedMonth\">Select Month:</label>\r\n                        <DatePicker\r\n                            selected={selectedMonth}\r\n                            onChange={(date) => setSelectedMonth(date)}\r\n                            dateFormat=\"yyyy-MM\"\r\n                            showMonthYearPicker\r\n                            className={styles.datePicker}\r\n                            placeholderText=\"Select Month\"\r\n                        />\r\n                    </div>\r\n                )}\r\n\r\n                {/* Year Picker Input */}\r\n                {reportPeriodType === 'year' && (\r\n                    <div className={styles.formGroup}>\r\n                        <label htmlFor=\"selectedYear\">Select Year:</label>\r\n                        <DatePicker\r\n                            selected={selectedYear}\r\n                            onChange={(date) => setSelectedYear(date)}\r\n                            dateFormat=\"yyyy\"\r\n                            showYearPicker\r\n                            className={styles.datePicker}\r\n                            placeholderText=\"Select Year\"\r\n                        />\r\n                    </div>\r\n                )}\r\n\r\n                {/* Single Day Picker Input */}\r\n                {reportPeriodType === 'single_day' && (\r\n                    <div className={styles.formGroup}>\r\n                        <label htmlFor=\"selectedDate\">Select Date:</label>\r\n                        <DatePicker\r\n                            selected={selectedDate}\r\n                            onChange={(date) => setSelectedDate(date)}\r\n                            dateFormat=\"yyyy-MM-dd\"\r\n                            className={styles.datePicker}\r\n                            placeholderText=\"Select Date\"\r\n                        />\r\n                    </div>\r\n                )}\r\n\r\n                {errorMessage && (\r\n                    <div className={styles.errorMessage}>{errorMessage}</div>\r\n                )}\r\n\r\n                <button className={styles.generateButton} onClick={handleGenerateReport}>\r\n                    Generate Report\r\n                </button>\r\n                {reportData.length > 0 && (\r\n                    <button className={styles.generateButton} onClick={generatePDF}>\r\n                        Download PDF\r\n                    </button>\r\n                )}\r\n            </div>\r\n            <div className={styles.tableContainer}>{renderReportTable()}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Report;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/pages/Report.jsx b/frontend/src/pages/Report.jsx
--- a/frontend/src/pages/Report.jsx	(revision be7a189a6dd3991950fbb26c832d8f9769c55e80)
+++ b/frontend/src/pages/Report.jsx	(date 1731386630000)
@@ -51,7 +51,7 @@
             if (reportCategory === 'GiftShopReport') {
                 // Fetch available items
                 axios
-                    .get(`${process.env.REACT_APP_API_URL}/giftshopitemsreport`, {
+                    .get(`http://localhost:5000/giftshopitemsreport`, {
                         headers: { 'Content-Type': 'application/json' },
                     })
                     .then((response) => setAvailableItems(response.data))
@@ -59,7 +59,7 @@
 
                 // Fetch available categories
                 axios
-                    .get(`${process.env.REACT_APP_API_URL}/giftshopcategories`, {
+                    .get(`http://localhost:5000/giftshopcategories`, {
                         headers: { 'Content-Type': 'application/json' },
                     })
                     .then((response) => setAvailableCategories(response.data))
@@ -67,7 +67,7 @@
 
                 // Fetch available payment methods
                 axios
-                    .get(`${process.env.REACT_APP_API_URL}/paymentmethods`, {
+                    .get(`http://localhost:5000/paymentmethods`, {
                         headers: { 'Content-Type': 'application/json' },
                     })
                     .then((response) => setAvailablePaymentMethods(response.data))
@@ -75,7 +75,7 @@
             } else if (reportCategory === 'TicketsReport') {
                 // Fetch available price categories
                 axios
-                    .get(`${process.env.REACT_APP_API_URL}/ticket`, {
+                    .get(`http://localhost:5000/ticket`, {
                         headers: { 'Content-Type': 'application/json' },
                     })
                     .then((response) => setAvailablePriceCategories(response.data))
@@ -83,7 +83,7 @@
 
                 // Fetch available user types
                 axios
-                    .get(`${process.env.REACT_APP_API_URL}/user-type`, {
+                    .get(`http://localhost:5000/user-type`, {
                         headers: { 'Content-Type': 'application/json' },
                     })
                     .then((response) => setAvailableUserTypes(response.data))
@@ -91,7 +91,7 @@
 
                 // Fetch available payment methods
                 axios
-                    .get(`${process.env.REACT_APP_API_URL}/paymentmethods`, {
+                    .get(`http://localhost:5000/paymentmethods`, {
                         headers: { 'Content-Type': 'application/json' },
                     })
                     .then((response) => setAvailablePaymentMethods(response.data))
@@ -169,7 +169,7 @@
         const userId = localStorage.getItem('userId');
 
         axios
-            .post(`${process.env.REACT_APP_API_URL}/reports`, reportRequest, {
+            .post(`http://localhost:5000/reports`, reportRequest, {
                 headers: {
                     'Content-Type': 'application/json',
                     'user-id': userId,
Index: frontend/src/components/ManageUsers.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/pages/ManageUsers.jsx\r\n\r\nimport React, {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\nimport UserFormModal from '../components/UserFormModal';\r\nimport ChangePasswordModal from '../components/AdminResetPasswordModal';\r\nimport styles from '../css/ManageUsers.module.css';\r\nimport HomeNavBar from './HomeNavBar';\r\n\r\nconst ManageUsers = () => {\r\n    const [users, setUsers] = useState([]);\r\n    const [selectedUser, setSelectedUser] = useState(null);\r\n    const [isFormModalOpen, setIsFormModalOpen] = useState(false);\r\n    const [showDeleteModal, setShowDeleteModal] = useState(false);\r\n    const [userToDelete, setUserToDelete] = useState(null);\r\n    const [isPasswordModalOpen, setIsPasswordModalOpen] = useState(false);\r\n    const [userToChangePassword, setUserToChangePassword] = useState(null);\r\n\r\n    const role = localStorage.getItem('role');\r\n    const userId = localStorage.getItem('userId');\r\n\r\n    useEffect(() => {\r\n        fetchUsers();\r\n    }, []);\r\n\r\n    const fetchUsers = () => {\r\n        axios.get(`${process.env.REACT_APP_API_URL}/users`, {\r\n            headers: {role, 'user-id': userId},\r\n        })\r\n            .then(response => setUsers(response.data))\r\n            .catch(error => console.error('Error fetching users:', error));\r\n    };\r\n\r\n    const openFormModal = (user = null) => {\r\n        setSelectedUser(user);\r\n        setIsFormModalOpen(true);\r\n    };\r\n\r\n    const closeFormModal = () => {\r\n        setIsFormModalOpen(false);\r\n        setSelectedUser(null);\r\n        fetchUsers();\r\n    };\r\n\r\n    const confirmDelete = (user) => {\r\n        setUserToDelete(user);\r\n        setShowDeleteModal(true);\r\n    };\r\n\r\n    const cancelDelete = () => {\r\n        setUserToDelete(null);\r\n        setShowDeleteModal(false);\r\n    };\r\n\r\n    const handleDelete = (user, isHardDelete) => {\r\n        const endpoint = isHardDelete ? `/users/${user.user_id}` : `/users/${user.user_id}/soft-delete`;\r\n        const method = isHardDelete ? 'delete' : 'put';\r\n\r\n        axios[method](endpoint, {}, {\r\n            headers: {role, 'user-id': userId},\r\n        })\r\n            .then(() => {\r\n                fetchUsers();\r\n                cancelDelete();\r\n            })\r\n            .catch(error => console.error('Error deleting user:', error));\r\n    };\r\n\r\n    const handleRestore = (user) => {\r\n        axios.put(`${process.env.REACT_APP_API_URL}/users/${user.user_id}/restore`, {}, {\r\n            headers: {role, 'user-id': userId},\r\n        })\r\n            .then(() => fetchUsers())\r\n            .catch(error => console.error('Error restoring user:', error));\r\n    };\r\n\r\n    const openPasswordModal = (user) => {\r\n        setUserToChangePassword(user);\r\n        setIsPasswordModalOpen(true);\r\n    };\r\n\r\n    const closePasswordModal = () => {\r\n        setUserToChangePassword(null);\r\n        setIsPasswordModalOpen(false);\r\n    };\r\n\r\n    return (<div style={{backgroundColor: '#FFFFFF', minHeight: '100vh', padding: '20px'}}>\r\n            <div className={styles.adminContainer}>\r\n                <HomeNavBar/>\r\n                <h1 className={styles.title}>Manage Users</h1>\r\n                <button className={styles.addButton} onClick={() => openFormModal()}>\r\n                    Add New User\r\n                </button>\r\n\r\n                {/* User Table */}\r\n                <table className={styles.userTable}>\r\n                    <thead>\r\n                    <tr>\r\n                        <th>First Name</th>\r\n                        <th>Last Name</th>\r\n                        <th>Username</th>\r\n                        <th>Email</th>\r\n                        <th>Role</th>\r\n                        <th>Status</th>\r\n                        <th>Actions</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {users.map(user => (<tr key={user.user_id}>\r\n                            <td>{user.first_name}</td>\r\n                            <td>{user.last_name}</td>\r\n                            <td>{user.username}</td>\r\n                            <td>{user.email}</td>\r\n                            <td>{user.role_name}</td>\r\n                            <td>{user.is_deleted ? 'Deleted' : 'Active'}</td>\r\n                            <td>\r\n                                <button className={styles.actionButton} onClick={() => openFormModal(user)}>Edit\r\n                                </button>\r\n                                <button className={styles.actionButton} onClick={() => openPasswordModal(user)}>Change\r\n                                    Password\r\n                                </button>\r\n                                {user.is_deleted ? (<button className={styles.actionButton}\r\n                                                            onClick={() => handleRestore(user)}>Restore</button>) : (\r\n                                    <button className={styles.actionButton}\r\n                                            onClick={() => confirmDelete(user)}>Delete</button>)}\r\n                            </td>\r\n                        </tr>))}\r\n                    </tbody>\r\n                </table>\r\n\r\n                {/* Modals */}\r\n                {isFormModalOpen && (<UserFormModal\r\n                        user={selectedUser}\r\n                        onClose={closeFormModal}\r\n                    />)}\r\n\r\n                {isPasswordModalOpen && (<ChangePasswordModal\r\n                        open={isPasswordModalOpen}\r\n                        onClose={closePasswordModal}\r\n                        userId={userToChangePassword.user_id}\r\n                        role={role}\r\n                        isAdmin={true}\r\n                    />)}\r\n\r\n                {showDeleteModal && (<div className={styles.modal}>\r\n                        <div className={styles.modalContent}>\r\n                            <span className={styles.closeButton} onClick={cancelDelete}>&times;</span>\r\n                            <h2>Confirm Deletion</h2>\r\n                            <p>Do you want to soft delete or permanently delete this user?</p>\r\n                            <div className={styles.buttonGroup}>\r\n                                <button className={styles.formButton}\r\n                                        onClick={() => handleDelete(userToDelete, false)}>Soft Delete\r\n                                </button>\r\n                                <button className={styles.formButton}\r\n                                        onClick={() => handleDelete(userToDelete, true)}>Hard Delete\r\n                                </button>\r\n                                <button className={styles.formButton} onClick={cancelDelete}>Cancel</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>)}\r\n            </div>\r\n        </div>);\r\n};\r\n\r\nexport default ManageUsers;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/ManageUsers.jsx b/frontend/src/components/ManageUsers.jsx
--- a/frontend/src/components/ManageUsers.jsx	(revision be7a189a6dd3991950fbb26c832d8f9769c55e80)
+++ b/frontend/src/components/ManageUsers.jsx	(date 1731386552000)
@@ -24,7 +24,7 @@
     }, []);
 
     const fetchUsers = () => {
-        axios.get(`${process.env.REACT_APP_API_URL}/users`, {
+        axios.get(`http://localhost:5000/users`, {
             headers: {role, 'user-id': userId},
         })
             .then(response => setUsers(response.data))
@@ -67,7 +67,7 @@
     };
 
     const handleRestore = (user) => {
-        axios.put(`${process.env.REACT_APP_API_URL}/users/${user.user_id}/restore`, {}, {
+        axios.put(`http://localhost:5000/users/${user.user_id}/restore`, {}, {
             headers: {role, 'user-id': userId},
         })
             .then(() => fetchUsers())
Index: frontend/src/components/UserFormModal.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/components/UserFormModal.jsx\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport styles from '../css/UserFormModal.module.css';\r\nimport ChangePasswordModal from './ChangePasswordModal';\r\n\r\nconst UserFormModal = ({ user, onClose }) => {\r\n    // Initialize form data with camelCase field names\r\n    const [formData, setFormData] = useState({\r\n        firstName: '',\r\n        lastName: '',\r\n        dateOfBirth: '',\r\n        username: '',\r\n        email: '',\r\n        roleId: 3, // Default to 'Customer'\r\n    });\r\n    const [isPasswordModalOpen, setIsPasswordModalOpen] = useState(false);\r\n    const [error, setError] = useState('');\r\n\r\n    // Retrieve role and userId from localStorage\r\n    const role = localStorage.getItem('role');\r\n    const userId = localStorage.getItem('userId');\r\n\r\n    useEffect(() => {\r\n        if (user) {\r\n            setFormData({\r\n                firstName: user.first_name || '',\r\n                lastName: user.last_name || '',\r\n                dateOfBirth: user.date_of_birth || '',\r\n                username: user.username || '',\r\n                email: user.email || '',\r\n                roleId: user.role_id || 3,\r\n            });\r\n        }\r\n    }, [user]);\r\n\r\n    // Handle input changes\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n\r\n        setFormData((prevFormData) => ({\r\n            ...prevFormData,\r\n            [name]: name === 'roleId' ? parseInt(value, 10) : value,\r\n        }));\r\n    };\r\n\r\n    // Handle form submission\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setError(''); // Reset error state\r\n\r\n        // Prepare payload with camelCase field names\r\n        const payload = {\r\n            firstName: formData.firstName,\r\n            lastName: formData.lastName,\r\n            dateOfBirth: formData.dateOfBirth,\r\n            username: formData.username,\r\n            email: formData.email,\r\n            roleId: formData.roleId,\r\n        };\r\n\r\n        try {\r\n            if (user && user.user_id) {\r\n                // Update existing user\r\n                await axios.put(`${process.env.REACT_APP_API_URL}/users/${user.user_id}`, payload, {\r\n                    headers: {\r\n                        role: role,\r\n                        'user-id': userId,\r\n                    },\r\n                });\r\n            } else {\r\n                // Create new user\r\n                await axios.post(`${process.env.REACT_APP_API_URL}/register`, payload);\r\n            }\r\n            onClose(); // Close the modal upon successful submission\r\n        } catch (error) {\r\n            console.error('Error submitting form:', error);\r\n            // Display error message from server or a generic message\r\n            setError(\r\n                error.response?.data?.message || 'An error occurred while submitting the form.'\r\n            );\r\n        }\r\n    };\r\n\r\n    // Open the Change Password Modal\r\n    const openPasswordModal = () => {\r\n        setIsPasswordModalOpen(true);\r\n    };\r\n\r\n    // Close the Change Password Modal\r\n    const closePasswordModal = () => {\r\n        setIsPasswordModalOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div className={styles.modal}>\r\n            <div className={styles.modalContent}>\r\n                <span className={styles.closeButton} onClick={onClose}>\r\n                    &times;\r\n                </span>\r\n                <form onSubmit={handleSubmit} className={styles.formContainer}>\r\n                    <h2>{user && user.user_id ? 'Edit User' : 'Add New User'}</h2>\r\n                    {error && <div className={styles.error}>{error}</div>}\r\n                    <label>\r\n                        First Name:\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"firstName\"\r\n                            value={formData.firstName}\r\n                            onChange={handleChange}\r\n                            required\r\n                        />\r\n                    </label>\r\n                    <label>\r\n                        Last Name:\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"lastName\"\r\n                            value={formData.lastName}\r\n                            onChange={handleChange}\r\n                            required\r\n                        />\r\n                    </label>\r\n                    <label>\r\n                        Date of Birth:\r\n                        <input\r\n                            type=\"date\"\r\n                            name=\"dateOfBirth\"\r\n                            value={formData.dateOfBirth}\r\n                            onChange={handleChange}\r\n                            required\r\n                        />\r\n                    </label>\r\n                    <label>\r\n                        Username:\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"username\"\r\n                            value={formData.username}\r\n                            onChange={handleChange}\r\n                            required\r\n                            disabled={user && user.user_id} // Disable if editing\r\n                        />\r\n                    </label>\r\n                    <label>\r\n                        Email:\r\n                        <input\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                            value={formData.email}\r\n                            onChange={handleChange}\r\n                            required\r\n                        />\r\n                    </label>\r\n                    <label>\r\n                        Role:\r\n                        <select\r\n                            name=\"roleId\"\r\n                            value={formData.roleId}\r\n                            onChange={handleChange}\r\n                        >\r\n                            <option value={1}>Admin</option>\r\n                            <option value={2}>Staff</option>\r\n                            <option value={3}>Customer</option>\r\n                            <option value={4}>Member</option>\r\n                        </select>\r\n                    </label>\r\n                    <div className={styles.buttonGroup}>\r\n                        <button type=\"submit\" className={styles.formButton}>\r\n                            {user && user.user_id ? 'Update' : 'Create'}\r\n                        </button>\r\n                        <button\r\n                            type=\"button\"\r\n                            className={styles.formButton}\r\n                            onClick={onClose}\r\n                        >\r\n                            Cancel\r\n                        </button>\r\n                        {user && user.user_id && (\r\n                            <button\r\n                                type=\"button\"\r\n                                className={styles.formButton}\r\n                                onClick={openPasswordModal}\r\n                            >\r\n                                Change Password\r\n                            </button>\r\n                        )}\r\n                    </div>\r\n                </form>\r\n            </div>\r\n\r\n            {isPasswordModalOpen && (\r\n                <ChangePasswordModal\r\n                    open={isPasswordModalOpen}\r\n                    onClose={closePasswordModal}\r\n                    userId={user.user_id}\r\n                    role={role}\r\n                    isAdmin={true}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UserFormModal;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/UserFormModal.jsx b/frontend/src/components/UserFormModal.jsx
--- a/frontend/src/components/UserFormModal.jsx	(revision be7a189a6dd3991950fbb26c832d8f9769c55e80)
+++ b/frontend/src/components/UserFormModal.jsx	(date 1731386552000)
@@ -63,7 +63,7 @@
         try {
             if (user && user.user_id) {
                 // Update existing user
-                await axios.put(`${process.env.REACT_APP_API_URL}/users/${user.user_id}`, payload, {
+                await axios.put(`http://localhost:5000/users/${user.user_id}`, payload, {
                     headers: {
                         role: role,
                         'user-id': userId,
@@ -71,7 +71,7 @@
                 });
             } else {
                 // Create new user
-                await axios.post(`${process.env.REACT_APP_API_URL}/register`, payload);
+                await axios.post(`http://localhost:5000/register`, payload);
             }
             onClose(); // Close the modal upon successful submission
         } catch (error) {
Index: frontend/src/components/AdminResetPasswordModal.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/components/AdminResetPasswordModal.jsx\r\n\r\nimport React, { useState } from 'react';\r\nimport { Modal, Box, Typography, TextField, Alert } from '@mui/material';\r\nimport { styled } from '@mui/system';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Styled Button consistent with your existing styling\r\nconst StyledButton = styled('button')({\r\n    padding: '8px 12px',\r\n    marginRight: '5px',\r\n    fontSize: '14px',\r\n    color: '#FFFFFF',\r\n    background: 'linear-gradient(90deg, #BD2859 0%, #D22D36 100%)',\r\n    border: 'none',\r\n    borderRadius: '5px',\r\n    cursor: 'pointer',\r\n    transition: 'background 0.3s ease',\r\n    '&:hover': {\r\n        background: 'linear-gradient(90deg, #D22D36 0%, #BD2859 100%)',\r\n    },\r\n});\r\n\r\n// Modal Styling\r\nconst modalStyle = {\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: '90%',\r\n    maxWidth: 400,\r\n    bgcolor: 'background.paper',\r\n    borderRadius: '10px',\r\n    boxShadow: 24,\r\n    p: 4,\r\n    textAlign: 'center',\r\n};\r\n\r\nconst AdminResetPasswordModal = ({ open, onClose, userId, role }) => {\r\n    const [passwordData, setPasswordData] = useState({\r\n        newPassword: '',\r\n        confirmPassword: '',\r\n    });\r\n    const [passwordErrors, setPasswordErrors] = useState({});\r\n    const [passwordMessage, setPasswordMessage] = useState('');\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setPasswordData({ ...passwordData, [name]: value });\r\n    };\r\n\r\n    const validatePasswords = () => {\r\n        const errors = {};\r\n        const { newPassword, confirmPassword } = passwordData;\r\n\r\n        if (!newPassword) {\r\n            errors.newPassword = 'New password is required.';\r\n        } else if (newPassword.length < 6) {\r\n            errors.newPassword = 'New password must be at least 6 characters long.';\r\n        }\r\n\r\n        if (!confirmPassword) {\r\n            errors.confirmPassword = 'Please confirm the new password.';\r\n        } else if (newPassword !== confirmPassword) {\r\n            errors.confirmPassword = 'Passwords do not match.';\r\n        }\r\n\r\n        setPasswordErrors(errors);\r\n        return Object.keys(errors).length === 0;\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        if (!validatePasswords()) return;\r\n\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_API_URL}/users/${userId}/reset-password`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'user-id': userId,\r\n                    'role': role,\r\n                },\r\n                body: JSON.stringify({\r\n                    newPassword: passwordData.newPassword,\r\n                }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (response.ok) {\r\n                setPasswordMessage('Password reset successfully!');\r\n                setPasswordData({\r\n                    newPassword: '',\r\n                    confirmPassword: '',\r\n                });\r\n                setPasswordErrors({});\r\n                setTimeout(() => {\r\n                    setPasswordMessage('');\r\n                    onClose();\r\n                }, 2000);\r\n            } else {\r\n                // Handle specific error messages from backend\r\n                setPasswordMessage(data.message || 'Error resetting password.');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error resetting password:', error);\r\n            setPasswordMessage('Error resetting password.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Modal open={open} onClose={onClose}>\r\n            <Box sx={modalStyle}>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                    Reset Password\r\n                </Typography>\r\n                {passwordMessage && (\r\n                    <Alert\r\n                        severity={passwordMessage.includes('successfully') ? 'success' : 'error'}\r\n                        sx={{ mb: 2 }}\r\n                    >\r\n                        {passwordMessage}\r\n                    </Alert>\r\n                )}\r\n                <form onSubmit={handleSubmit}>\r\n                    <TextField\r\n                        fullWidth\r\n                        margin=\"normal\"\r\n                        label=\"New Password\"\r\n                        type=\"password\"\r\n                        name=\"newPassword\"\r\n                        value={passwordData.newPassword}\r\n                        onChange={handleChange}\r\n                        error={!!passwordErrors.newPassword}\r\n                        helperText={passwordErrors.newPassword}\r\n                        required\r\n                    />\r\n                    <TextField\r\n                        fullWidth\r\n                        margin=\"normal\"\r\n                        label=\"Confirm New Password\"\r\n                        type=\"password\"\r\n                        name=\"confirmPassword\"\r\n                        value={passwordData.confirmPassword}\r\n                        onChange={handleChange}\r\n                        error={!!passwordErrors.confirmPassword}\r\n                        helperText={passwordErrors.confirmPassword}\r\n                        required\r\n                    />\r\n                    <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 2 }}>\r\n                        <StyledButton type=\"button\" onClick={onClose}>\r\n                            Cancel\r\n                        </StyledButton>\r\n                        <StyledButton type=\"submit\">\r\n                            Reset Password\r\n                        </StyledButton>\r\n                    </Box>\r\n                </form>\r\n            </Box>\r\n        </Modal>\r\n    );\r\n};\r\n\r\n// PropTypes for type checking\r\nAdminResetPasswordModal.propTypes = {\r\n    open: PropTypes.bool.isRequired,\r\n    onClose: PropTypes.func.isRequired,\r\n    userId: PropTypes.string.isRequired,\r\n    role: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default AdminResetPasswordModal;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/AdminResetPasswordModal.jsx b/frontend/src/components/AdminResetPasswordModal.jsx
--- a/frontend/src/components/AdminResetPasswordModal.jsx	(revision be7a189a6dd3991950fbb26c832d8f9769c55e80)
+++ b/frontend/src/components/AdminResetPasswordModal.jsx	(date 1731386552000)
@@ -74,7 +74,7 @@
         if (!validatePasswords()) return;
 
         try {
-            const response = await fetch(`${process.env.REACT_APP_API_URL}/users/${userId}/reset-password`, {
+            const response = await fetch(`http://localhost:5000/users/${userId}/reset-password`, {
                 method: 'PUT',
                 headers: {
                     'Content-Type': 'application/json',
Index: frontend/src/pages/Dashboards/CurateArt.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport HomeNavBar from '../../components/HomeNavBar';\r\nimport ArtLookUp from '../../components/ArtLookUp';\r\nimport styles from '../../css/Art.module.css';\r\nimport axios from 'axios';\r\n\r\nconst InsertArtistModal = ({ onClose, onSave }) => {\r\n    const [nationalities, setNationalities] = useState([]);\r\n    const [name, setName] = useState('');\r\n    const [gender, setGender] = useState('');\r\n    const [nationality, setNationality] = useState('');\r\n    const [birthYear, setBirthYear] = useState('');\r\n    const [deathYear, setDeathYear] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [image, setImage] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const fetchNationalities = async () => {\r\n            try {\r\n                const response = await axios.get(`${process.env.REACT_APP_API_URL}/nationalities`);\r\n                setNationalities(response.data);\r\n            } catch (error) {\r\n                console.error('Error fetching nationalities:', error);\r\n            }\r\n        };\r\n        fetchNationalities();\r\n    }, []);\r\n\r\n    const handleImageChange = (e) => setImage(e.target.files[0]);\r\n\r\n    const handleSave = () => {\r\n        const formData = new FormData();\r\n        formData.append('name', name);\r\n        formData.append('gender', gender);\r\n        formData.append('nationality', nationality);\r\n        formData.append('birthYear', birthYear);\r\n        formData.append('deathYear', deathYear ? parseInt(deathYear) : null);\r\n        formData.append('description', description);\r\n        if (image) formData.append('image', image);\r\n\r\n        onSave(formData);\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <div className={styles.modalOverlay}>\r\n            <div className={styles.modalContent}>\r\n                <h2>Insert New Artist</h2>\r\n                {/* Form fields */}\r\n                <label>Name *<input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} required /></label>\r\n                <label>Gender*<select value={gender} onChange={(e) => setGender(e.target.value)} required>\r\n                    <option value=\"\">Select Gender</option>\r\n                    <option value=\"Male\">Male</option>\r\n                    <option value=\"Female\">Female</option>\r\n                    <option value=\"Other\">Other</option>\r\n                </select></label>\r\n                <label>Nationality *<select value={nationality} onChange={(e) => setNationality(e.target.value)} required>\r\n                    <option value=\"\">Select Nationality</option>\r\n                    {nationalities.map((nat) => <option key={nat} value={nat}>{nat}</option>)}\r\n                </select></label>\r\n                <label>Birth Year *<input type=\"number\" value={birthYear} onChange={(e) => setBirthYear(e.target.value)} /></label>\r\n                <label>Death Year<input type=\"number\" value={deathYear} onChange={(e) => setDeathYear(e.target.value)} /></label>\r\n                <label>Description *<textarea value={description} onChange={(e) => setDescription(e.target.value)} /></label>\r\n                <label>Image<input type=\"file\" accept=\"image/*\" onChange={handleImageChange} /></label>\r\n                <div className={styles.buttonContainer}>\r\n                    <button onClick={onClose}>Cancel</button>\r\n                    <button onClick={handleSave}>Save</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst InsertArtworkModal = ({ onClose, onSave, artists }) => {\r\n    const [Title, setTitle] = useState('');\r\n    const [artistId, setArtistId] = useState('');\r\n    const [departmentId, setDepartmentId] = useState('');\r\n    const [CreationYear, setCreationYear] = useState('');\r\n    const [medium, setMedium] = useState('');\r\n    const [customMedium, setCustomMedium] = useState('');\r\n    const [height, setHeight] = useState('');\r\n    const [width, setWidth] = useState('');\r\n    const [depth, setDepth] = useState('');\r\n    const [acquisitionDate, setAcquisitionDate] = useState('');\r\n    const [condition, setCondition] = useState('');\r\n    const [customCondition, setCustomCondition] = useState('');\r\n    const [location, setLocation] = useState('');\r\n    const [price, setPrice] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [image, setImage] = useState(null);\r\n\r\n    // Options\r\n    const [departments, setDepartments] = useState([]);\r\n    const [mediums, setMediums] = useState([]);\r\n    const [conditions, setConditions] = useState([]);\r\n\r\n    // Error tracking for multiple fields\r\n    const [errors, setErrors] = useState({});\r\n\r\n    useEffect(() => {\r\n        const fetchDepartments = async () => {\r\n            try {\r\n                const response = await axios.get(`${process.env.REACT_APP_API_URL}/department`);\r\n                setDepartments(response.data);\r\n            } catch (error) {\r\n                console.error('Error fetching departments:', error);\r\n            }\r\n        };\r\n\r\n        const fetchMediums = async () => {\r\n            try {\r\n                const response = await axios.get(`${process.env.REACT_APP_API_URL}/mediums`);\r\n                setMediums(response.data);\r\n            } catch (error) {\r\n                console.error('Error fetching mediums:', error);\r\n            }\r\n        };\r\n\r\n        const fetchConditions = async () => {\r\n            try {\r\n                const response = await axios.get(`${process.env.REACT_APP_API_URL}/artworkconditions`);\r\n                setConditions(response.data);\r\n            } catch (error) {\r\n                console.error('Error fetching artworkconditions:', error);\r\n            }\r\n        };\r\n\r\n        fetchDepartments();\r\n        fetchMediums();\r\n        fetchConditions();\r\n    }, []);\r\n\r\n    const handleImageChange = (e) => setImage(e.target.files[0]);\r\n\r\n    const handleSave = () => {\r\n        let newErrors = {};\r\n\r\n        // Basic field validations\r\n        if (!Title) newErrors.Title = \"Title is required.\";\r\n        if (!artistId) newErrors.artistId = \"Please select an artist.\";\r\n        if (!departmentId) newErrors.departmentId = \"Please select a department.\";\r\n        if (!CreationYear) newErrors.CreationYear = \"Creation year is required.\";\r\n        if (!medium) newErrors.medium = \"Please select a medium.\";\r\n        if (!height) newErrors.height = \"Height is required.\";\r\n        if (!width) newErrors.width = \"Width is required.\";\r\n        if (!acquisitionDate) newErrors.acquisitionDate = \"Acquisition date is required.\";\r\n        if (!condition) newErrors.condition = \"Please select a condition.\";\r\n        if (!description) newErrors.description = \"Description is required.\";\r\n\r\n        // If \"Other\" is selected for medium, check if custom medium is provided and if it already exists\r\n        if (medium === \"Other\") {\r\n            if (!customMedium) {\r\n                newErrors.customMedium = \"Please specify the medium.\";\r\n            } else if (mediums.includes(customMedium)) {\r\n                newErrors.customMedium = \"This medium already exists in the list. Please select it from the dropdown.\";\r\n            }\r\n        }\r\n\r\n        // If \"Other\" is selected for condition, check if custom condition is provided and if it already exists\r\n        if (condition === \"Other\") {\r\n            if (!customCondition) {\r\n                newErrors.customCondition = \"Please specify the artwork condition.\";\r\n            } else if (conditions.includes(customCondition)) {\r\n                newErrors.customCondition = \"This condition already exists in the list. Please select it from the dropdown.\";\r\n            }\r\n        }\r\n\r\n        setErrors(newErrors);\r\n\r\n        // Stop if there are any validation errors\r\n        if (Object.keys(newErrors).length > 0) {\r\n            return;\r\n        }\r\n\r\n        // Proceed with form submission if no errors\r\n        const formData = new FormData();\r\n        formData.append('Title', Title);\r\n        formData.append('artist_id', artistId);\r\n        formData.append('department_id', departmentId);\r\n        formData.append('CreationYear', CreationYear);\r\n        formData.append('Medium', medium === 'Other' ? customMedium : medium);\r\n        formData.append('height', height);\r\n        formData.append('width', width);\r\n        formData.append('depth', depth);\r\n        formData.append('acquisition_date', acquisitionDate);\r\n        formData.append('ArtworkCondition', condition === 'Other' ? customCondition : condition);\r\n        formData.append('location', location);\r\n        formData.append('price', price);\r\n        formData.append('Description', description);\r\n        if (image) formData.append('image', image);\r\n\r\n        onSave(formData);\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <div className={styles.modalOverlay}>\r\n            <div className={styles.modalContent}>\r\n                <h2>Insert New Artwork</h2>\r\n                <label>Title *\r\n                    <input type=\"text\" value={Title} onChange={(e) => setTitle(e.target.value)} />\r\n                    {errors.Title && <p style={{ color: 'red' }}>{errors.Title}</p>}\r\n                </label>\r\n\r\n                {/* Artist Dropdown */}\r\n                <label>Artist *\r\n                    <select value={artistId} onChange={(e) => setArtistId(e.target.value)}>\r\n                        <option value=\"\">Select Artist</option>\r\n                        {artists.map((artist) => <option key={artist.ArtistID} value={artist.ArtistID}>{artist.name_}</option>)}\r\n                    </select>\r\n                    {errors.artistId && <p style={{ color: 'red' }}>{errors.artistId}</p>}\r\n                </label>\r\n\r\n                {/* Department Dropdown */}\r\n                <label>Department *\r\n                    <select value={departmentId} onChange={(e) => setDepartmentId(e.target.value)}>\r\n                        <option value=\"\">Select Department</option>\r\n                        {departments.map((department) => <option key={department.DepartmentID} value={department.DepartmentID}>{department.Name}</option>)}\r\n                    </select>\r\n                    {errors.departmentId && <p style={{ color: 'red' }}>{errors.departmentId}</p>}\r\n                </label>\r\n\r\n                {/* Creation Year */}\r\n                <label>Creation Year *\r\n                    <input type=\"number\" value={CreationYear} onChange={(e) => setCreationYear(e.target.value)} />\r\n                    {errors.CreationYear && <p style={{ color: 'red' }}>{errors.CreationYear}</p>}\r\n                </label>\r\n\r\n                {/* Medium Dropdown with Other Option */}\r\n                <label>Medium *\r\n                    <select value={medium} onChange={(e) => setMedium(e.target.value)}>\r\n                        <option value=\"\">Select Medium</option>\r\n                        {mediums.map((med) => <option key={med} value={med}>{med}</option>)}\r\n                        <option value=\"Other\">Other</option>\r\n                    </select>\r\n                    {medium === 'Other' && (\r\n                        <input type=\"text\" placeholder=\"Specify medium\" value={customMedium} onChange={(e) => setCustomMedium(e.target.value)} />\r\n                    )}\r\n                    {errors.medium && <p style={{ color: 'red' }}>{errors.medium}</p>}\r\n                    {errors.customMedium && <p style={{ color: 'red' }}>{errors.customMedium}</p>}\r\n                </label>\r\n\r\n                {/* Dimensions */}\r\n                <label>Height (inches) *\r\n                    <input type=\"number\" value={height} onChange={(e) => setHeight(e.target.value)} />\r\n                    {errors.height && <p style={{ color: 'red' }}>{errors.height}</p>}\r\n                </label>\r\n\r\n                <label>Width (inches) *\r\n                    <input type=\"number\" value={width} onChange={(e) => setWidth(e.target.value)} />\r\n                    {errors.width && <p style={{ color: 'red' }}>{errors.width}</p>}\r\n                </label>\r\n\r\n                <label>Depth (inches)\r\n                    <input type=\"number\" value={depth} onChange={(e) => setDepth(e.target.value)} />\r\n                </label>\r\n\r\n                {/* Acquisition Date, Condition, Location */}\r\n                <label>Acquisition Date *\r\n                    <input type=\"date\" value={acquisitionDate} onChange={(e) => setAcquisitionDate(e.target.value)} />\r\n                    {errors.acquisitionDate && <p style={{ color: 'red' }}>{errors.acquisitionDate}</p>}\r\n                </label>\r\n\r\n                <label>Condition *\r\n                    <select value={condition} onChange={(e) => setCondition(e.target.value)}>\r\n                        <option value=\"\">Select Condition</option>\r\n                        {conditions.map((cond) => <option key={cond} value={cond}>{cond}</option>)}\r\n                        <option value=\"Other\">Other</option>\r\n                    </select>\r\n                    {condition === 'Other' && (\r\n                        <input type=\"text\" placeholder=\"Specify condition\" value={customCondition} onChange={(e) => setCustomCondition(e.target.value)} />\r\n                    )}\r\n                    {errors.condition && <p style={{ color: 'red' }}>{errors.condition}</p>}\r\n                    {errors.customCondition && <p style={{ color: 'red' }}>{errors.customCondition}</p>}\r\n                </label>\r\n\r\n                {/* Location, Price, Description, Image */}\r\n                <label>Location\r\n                    <input type=\"text\" value={location} onChange={(e) => setLocation(e.target.value)} />\r\n                </label>\r\n\r\n                <label>Price\r\n                    <input type=\"number\" value={price} onChange={(e) => setPrice(e.target.value)} />\r\n                </label>\r\n\r\n                <label>Description *\r\n                    <textarea value={description} onChange={(e) => setDescription(e.target.value)} />\r\n                    {errors.description && <p style={{ color: 'red' }}>{errors.description}</p>}\r\n                </label>\r\n\r\n                <label>Image\r\n                    <input type=\"file\" accept=\"image/*\" onChange={handleImageChange} />\r\n                </label>\r\n\r\n                <div className={styles.buttonContainer}>\r\n                    <button onClick={onClose}>Cancel</button>\r\n                    <button onClick={handleSave}>Save</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst CurateArt = () => {\r\n    const [isInsertArtistOpen, setIsInsertArtistOpen] = useState(false);\r\n    const [isInsertArtworkOpen, setIsInsertArtworkOpen] = useState(false);\r\n    const [artists, setArtists] = useState([]);\r\n    const [artworks, setArtworks] = useState([]);\r\n    const [refreshArtists, setRefreshArtists] = useState(false);\r\n    const [refreshArtworks, setRefreshArtworks] = useState(false);\r\n\r\n    useEffect(() => {\r\n        fetchArtists();\r\n    }, [refreshArtists]);\r\n\r\n    const fetchArtists = () => {\r\n        axios.get(`${process.env.REACT_APP_API_URL}/artist`)\r\n            .then(response => setArtists(response.data))\r\n            .catch(error => console.error('Error fetching artists:', error));\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchArtworks();\r\n    }, [refreshArtworks]);\r\n\r\n    const fetchArtworks = () => {\r\n        axios.get(`${process.env.REACT_APP_API_URL}/artwork`)\r\n            .then(response => setArtworks(response.data))\r\n            .catch(error => console.error('Error fetching artworks:', error));\r\n    };\r\n\r\n    const openInsertArtistModal = () => setIsInsertArtistOpen(true);\r\n    const closeInsertArtistModal = () => setIsInsertArtistOpen(false);\r\n    const openInsertArtworkModal = () => setIsInsertArtworkOpen(true);\r\n    const closeInsertArtworkModal = () => setIsInsertArtworkOpen(false);\r\n\r\n    const triggerArtistRefresh = () => setRefreshArtists(!refreshArtists);\r\n    const triggerArtworkRefresh = () => setRefreshArtworks(!refreshArtworks);\r\n\r\n    // refresh both artist lists after saving new artwork\r\n    const saveInsertArtwork = (artworkData) => {\r\n        axios.post(`${process.env.REACT_APP_API_URL}/artwork`, artworkData, { headers: { 'Content-Type': 'multipart/form-data' } })\r\n            .then(() => {\r\n                // Refresh both artist and artwork lists\r\n                triggerArtistRefresh();\r\n                triggerArtworkRefresh();\r\n                closeInsertArtworkModal();\r\n            })\r\n            .catch(error => console.error('Error adding artwork:', error));\r\n    };\r\n\r\n    const saveInsertArtist = (artistData) => {\r\n        axios.post(`${process.env.REACT_APP_API_URL}/artist`, artistData, { headers: { 'Content-Type': 'multipart/form-data' } })\r\n            .then(() => { triggerArtistRefresh(); closeInsertArtistModal(); })\r\n            .catch(error => console.error('Error adding artist:', error));\r\n    };\r\n\r\n    return (\r\n        <div className={styles.ArtContainer}>\r\n            <HomeNavBar />\r\n            <h1>Curate Art</h1>\r\n            <button onClick={openInsertArtworkModal}>Insert Artwork</button>\r\n            <button onClick={openInsertArtistModal}>Insert Artist</button>\r\n\r\n            <ArtLookUp\r\n                refreshArtists={refreshArtists}\r\n                refreshArtworks={refreshArtworks}\r\n                triggerRefreshArtists={triggerArtistRefresh}\r\n                triggerRefreshArtworks={triggerArtworkRefresh}\r\n            />\r\n\r\n            {isInsertArtistOpen && (\r\n                <InsertArtistModal onClose={closeInsertArtistModal} onSave={saveInsertArtist} />\r\n            )}\r\n            {isInsertArtworkOpen && (\r\n                <InsertArtworkModal onClose={closeInsertArtworkModal} onSave={saveInsertArtwork} artists={artists} />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CurateArt;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/pages/Dashboards/CurateArt.jsx b/frontend/src/pages/Dashboards/CurateArt.jsx
--- a/frontend/src/pages/Dashboards/CurateArt.jsx	(revision be7a189a6dd3991950fbb26c832d8f9769c55e80)
+++ b/frontend/src/pages/Dashboards/CurateArt.jsx	(date 1731386630000)
@@ -17,7 +17,7 @@
     useEffect(() => {
         const fetchNationalities = async () => {
             try {
-                const response = await axios.get(`${process.env.REACT_APP_API_URL}/nationalities`);
+                const response = await axios.get(`http://localhost:5000/nationalities`);
                 setNationalities(response.data);
             } catch (error) {
                 console.error('Error fetching nationalities:', error);
@@ -100,7 +100,7 @@
     useEffect(() => {
         const fetchDepartments = async () => {
             try {
-                const response = await axios.get(`${process.env.REACT_APP_API_URL}/department`);
+                const response = await axios.get(`http://localhost:5000/department`);
                 setDepartments(response.data);
             } catch (error) {
                 console.error('Error fetching departments:', error);
@@ -109,7 +109,7 @@
 
         const fetchMediums = async () => {
             try {
-                const response = await axios.get(`${process.env.REACT_APP_API_URL}/mediums`);
+                const response = await axios.get(`http://localhost:5000/mediums`);
                 setMediums(response.data);
             } catch (error) {
                 console.error('Error fetching mediums:', error);
@@ -118,7 +118,7 @@
 
         const fetchConditions = async () => {
             try {
-                const response = await axios.get(`${process.env.REACT_APP_API_URL}/artworkconditions`);
+                const response = await axios.get(`http://localhost:5000/artworkconditions`);
                 setConditions(response.data);
             } catch (error) {
                 console.error('Error fetching artworkconditions:', error);
@@ -314,7 +314,7 @@
     }, [refreshArtists]);
 
     const fetchArtists = () => {
-        axios.get(`${process.env.REACT_APP_API_URL}/artist`)
+        axios.get(`http://localhost:5000/artist`)
             .then(response => setArtists(response.data))
             .catch(error => console.error('Error fetching artists:', error));
     };
@@ -324,7 +324,7 @@
     }, [refreshArtworks]);
 
     const fetchArtworks = () => {
-        axios.get(`${process.env.REACT_APP_API_URL}/artwork`)
+        axios.get(`http://localhost:5000/artwork`)
             .then(response => setArtworks(response.data))
             .catch(error => console.error('Error fetching artworks:', error));
     };
@@ -339,7 +339,7 @@
 
     // refresh both artist lists after saving new artwork
     const saveInsertArtwork = (artworkData) => {
-        axios.post(`${process.env.REACT_APP_API_URL}/artwork`, artworkData, { headers: { 'Content-Type': 'multipart/form-data' } })
+        axios.post(`http://localhost:5000/artwork`, artworkData, { headers: { 'Content-Type': 'multipart/form-data' } })
             .then(() => {
                 // Refresh both artist and artwork lists
                 triggerArtistRefresh();
@@ -350,7 +350,7 @@
     };
 
     const saveInsertArtist = (artistData) => {
-        axios.post(`${process.env.REACT_APP_API_URL}/artist`, artistData, { headers: { 'Content-Type': 'multipart/form-data' } })
+        axios.post(`http://localhost:5000/artist`, artistData, { headers: { 'Content-Type': 'multipart/form-data' } })
             .then(() => { triggerArtistRefresh(); closeInsertArtistModal(); })
             .catch(error => console.error('Error adding artist:', error));
     };
Index: frontend/src/pages/Dashboards/AdminDashboard.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/pages/AdminDashboard.jsx\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport AnnouncementFormModal from '../../components/AnnouncementFormModal';\r\nimport styles from '../../css/AdminDashBoard.module.css';\r\nimport HomeNavBar from '../../components/HomeNavBar';\r\n\r\nconst AdminDashboard = () => {\r\n    const [announcements, setAnnouncements] = useState([]);\r\n    const [selectedAnnouncement, setSelectedAnnouncement] = useState(null);\r\n    const [isFormModalOpen, setIsFormModalOpen] = useState(false);\r\n    const [showDeleteModal, setShowDeleteModal] = useState(false);\r\n    const [announcementToDelete, setAnnouncementToDelete] = useState(null);\r\n    const [showRestoreModal, setShowRestoreModal] = useState(false);\r\n    const [announcementToRestore, setAnnouncementToRestore] = useState(null);\r\n\r\n    // Pagination state variables\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const itemsPerPage = 10; // Adjust as needed\r\n\r\n    const role = localStorage.getItem('role');\r\n    const userId = localStorage.getItem('userId');\r\n\r\n    useEffect(() => {\r\n        fetchAnnouncements();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setCurrentPage(1);\r\n    }, [announcements]);\r\n\r\n    const fetchAnnouncements = () => {\r\n        axios.get(`${process.env.REACT_APP_API_URL}/announcements/all`, {\r\n            headers: { 'user-id': userId, role },\r\n        })\r\n            .then(response => setAnnouncements(response.data))\r\n            .catch(error => console.error('Error fetching announcements:', error));\r\n    };\r\n\r\n    // Confirm Delete\r\n    const confirmDelete = (id) => {\r\n        setAnnouncementToDelete(id);\r\n        setShowDeleteModal(true);\r\n    };\r\n\r\n    const cancelDelete = () => {\r\n        setAnnouncementToDelete(null);\r\n        setShowDeleteModal(false);\r\n    };\r\n\r\n    const handleDelete = () => {\r\n        axios.delete(`${process.env.REACT_APP_API_URL}/announcements/${announcementToDelete}`, {\r\n            headers: { 'user-id': userId, role },\r\n        })\r\n            .then(() => {\r\n                fetchAnnouncements();\r\n                cancelDelete();\r\n            })\r\n            .catch(error => console.error('Error deleting announcement:', error));\r\n    };\r\n\r\n    // Confirm Restore\r\n    const confirmRestore = (id) => {\r\n        setAnnouncementToRestore(id);\r\n        setShowRestoreModal(true);\r\n    };\r\n\r\n    const cancelRestore = () => {\r\n        setAnnouncementToRestore(null);\r\n        setShowRestoreModal(false);\r\n    };\r\n\r\n    const handleRestore = () => {\r\n        axios.put(`${process.env.REACT_APP_API_URL}/announcements/${announcementToRestore}/restore`, {}, {\r\n            headers: { 'user-id': userId, role },\r\n        })\r\n            .then(() => {\r\n                fetchAnnouncements();\r\n                cancelRestore();\r\n            })\r\n            .catch(error => console.error('Error restoring announcement:', error));\r\n    };\r\n\r\n    const openFormModal = (announcement = null) => {\r\n        setSelectedAnnouncement(announcement);\r\n        setIsFormModalOpen(true);\r\n    };\r\n\r\n    const closeFormModal = () => {\r\n        setIsFormModalOpen(false);\r\n        setSelectedAnnouncement(null);\r\n        fetchAnnouncements();\r\n    };\r\n\r\n    // Pagination logic\r\n    const totalPages = Math.ceil(announcements.length / itemsPerPage);\r\n    const indexOfLastItem = currentPage * itemsPerPage;\r\n    const indexOfFirstItem = indexOfLastItem - itemsPerPage;\r\n    const currentItems = announcements.slice(indexOfFirstItem, indexOfLastItem);\r\n\r\n    return (\r\n        <div className={styles.adminContainer}>\r\n            <HomeNavBar />\r\n            <h1 className={styles.title}>Admin Dashboard</h1>\r\n            <button className={styles.addButton} onClick={() => openFormModal()}>\r\n                Add New Announcement\r\n            </button>\r\n\r\n            {/* Announcements Table */}\r\n            <table className={styles.itemTable}>\r\n                <thead>\r\n                <tr>\r\n                    <th>Title</th>\r\n                    <th>Content</th>\r\n                    <th>Target Audience</th>\r\n                    <th>Priority</th>\r\n                    <th>Status</th>\r\n                    <th>Actions</th>\r\n                </tr>\r\n                </thead>\r\n\r\n                <tbody>\r\n                {currentItems.map(announcement => (\r\n                    <tr key={announcement.id}>\r\n                        <td>{announcement.title}</td>\r\n                        <td>{announcement.content}</td>\r\n                        <td>{announcement.target_audience}</td>\r\n                        <td>{announcement.priority}</td>\r\n                        <td>{announcement.is_deleted ? 'Deleted' : 'Active'}</td>\r\n                        <td>\r\n                            <button className={styles.actionButton} onClick={() => openFormModal(announcement)}>Edit</button>\r\n                            {announcement.is_deleted ? (\r\n                                <button\r\n                                    className={styles.actionButton}\r\n                                    onClick={() => confirmRestore(announcement.id)}\r\n                                >\r\n                                    Restore\r\n                                </button>\r\n                            ) : (\r\n                                <button\r\n                                    className={styles.actionButton}\r\n                                    onClick={() => confirmDelete(announcement.id)}\r\n                                >\r\n                                    Delete\r\n                                </button>\r\n                            )}\r\n                        </td>\r\n                    </tr>\r\n                ))}\r\n                </tbody>\r\n            </table>\r\n\r\n            {/* Pagination Controls */}\r\n            <div className={styles.pagination}>\r\n                {Array.from({ length: totalPages }, (_, index) => (\r\n                    <button\r\n                        key={index}\r\n                        onClick={() => setCurrentPage(index + 1)}\r\n                        className={`${styles.pageButton} ${currentPage === index + 1 ? styles.activePage : ''}`}\r\n                    >\r\n                        {index + 1}\r\n                    </button>\r\n                ))}\r\n            </div>\r\n\r\n            {/* Announcement Form Modal */}\r\n            {isFormModalOpen && (\r\n                <AnnouncementFormModal\r\n                    announcement={selectedAnnouncement}\r\n                    onClose={closeFormModal}\r\n                />\r\n            )}\r\n\r\n            {/* Delete Confirmation Modal */}\r\n            {showDeleteModal && (\r\n                <div className={styles.modal}>\r\n                    <div className={styles.modal_content}>\r\n                        <span className={styles.close_button} onClick={cancelDelete}>&times;</span>\r\n                        <h2>Confirm Deletion</h2>\r\n                        <p>Are you sure you want to delete this announcement?</p>\r\n                        <div className={styles.buttonGroup}>\r\n                            <button className={styles.formButton} onClick={handleDelete}>\r\n                                Yes, Delete\r\n                            </button>\r\n                            <button className={styles.formButton} onClick={cancelDelete}>Cancel</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* Restore Confirmation Modal */}\r\n            {showRestoreModal && (\r\n                <div className={styles.modal}>\r\n                    <div className={styles.modal_content}>\r\n                        <span className={styles.close_button} onClick={cancelRestore}>&times;</span>\r\n                        <h2>Confirm Restore</h2>\r\n                        <p>Are you sure you want to restore this announcement?</p>\r\n                        <div className={styles.buttonGroup}>\r\n                            <button className={styles.formButton} onClick={handleRestore}>\r\n                                Yes, Restore\r\n                            </button>\r\n                            <button className={styles.formButton} onClick={cancelRestore}>Cancel</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AdminDashboard;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/pages/Dashboards/AdminDashboard.jsx b/frontend/src/pages/Dashboards/AdminDashboard.jsx
--- a/frontend/src/pages/Dashboards/AdminDashboard.jsx	(revision be7a189a6dd3991950fbb26c832d8f9769c55e80)
+++ b/frontend/src/pages/Dashboards/AdminDashboard.jsx	(date 1731386630000)
@@ -31,7 +31,7 @@
     }, [announcements]);
 
     const fetchAnnouncements = () => {
-        axios.get(`${process.env.REACT_APP_API_URL}/announcements/all`, {
+        axios.get(`http://localhost:5000/announcements/all`, {
             headers: { 'user-id': userId, role },
         })
             .then(response => setAnnouncements(response.data))
@@ -50,7 +50,7 @@
     };
 
     const handleDelete = () => {
-        axios.delete(`${process.env.REACT_APP_API_URL}/announcements/${announcementToDelete}`, {
+        axios.delete(`http://localhost:5000/announcements/${announcementToDelete}`, {
             headers: { 'user-id': userId, role },
         })
             .then(() => {
@@ -72,7 +72,7 @@
     };
 
     const handleRestore = () => {
-        axios.put(`${process.env.REACT_APP_API_URL}/announcements/${announcementToRestore}/restore`, {}, {
+        axios.put(`http://localhost:5000/announcements/${announcementToRestore}/restore`, {}, {
             headers: { 'user-id': userId, role },
         })
             .then(() => {
Index: frontend/src/components/AnnouncementFormModal.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/components/AnnouncementFormModal.jsx\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport styles from '../css/AnnouncementFormModal.module.css';\r\n\r\nconst AnnouncementFormModal = ({ announcement = {}, onClose }) => {\r\n    const [formData, setFormData] = useState({\r\n        title: '',\r\n        content: '',\r\n        target_audience: 'all',\r\n        priority: 'low',\r\n    });\r\n    const [message, setMessage] = useState('');\r\n\r\n    const role = localStorage.getItem('role');\r\n    const userId = localStorage.getItem('userId');\r\n\r\n    useEffect(() => {\r\n        if (announcement && announcement.id) {\r\n            setFormData({\r\n                title: announcement.title || '',\r\n                content: announcement.content || '',\r\n                target_audience: announcement.target_audience || 'all',\r\n                priority: announcement.priority || 'low',\r\n            });\r\n        } else {\r\n            setFormData({\r\n                title: '',\r\n                content: '',\r\n                target_audience: 'all',\r\n                priority: 'low',\r\n            });\r\n        }\r\n    }, [announcement]);\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setFormData({ ...formData, [name]: value });\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        const config = {\r\n            headers: { 'user-id': userId, role },\r\n        };\r\n\r\n        if (announcement && announcement.id) {\r\n            axios\r\n                .put(`${process.env.REACT_APP_API_URL}/announcements/${announcement.id}`, formData, config)\r\n                .then(() => onClose())\r\n                .catch((error) => console.error('Error updating announcement:', error));\r\n        } else {\r\n            axios\r\n                .post(`${process.env.REACT_APP_API_URL}/announcements`, formData, config)\r\n                .then(() => onClose())\r\n                .catch((error) => console.error('Error creating announcement:', error));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={styles.modal}>\r\n            <div className={styles.modal_content}>\r\n                <span className={styles.close_button} onClick={onClose}>\r\n                    &times;\r\n                </span>\r\n                <form onSubmit={handleSubmit} className={styles.formContainer}>\r\n                    <h2>{announcement && announcement.id ? 'Edit Announcement' : 'Add New Announcement'}</h2>\r\n                    <label>\r\n                        Title:\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"title\"\r\n                            value={formData.title}\r\n                            onChange={handleChange}\r\n                            required\r\n                        />\r\n                    </label>\r\n                    <label>\r\n                        Content:\r\n                        <textarea\r\n                            name=\"content\"\r\n                            value={formData.content}\r\n                            onChange={handleChange}\r\n                            required\r\n                        />\r\n                    </label>\r\n                    <label>\r\n                        Target Audience:\r\n                        <select\r\n                            name=\"target_audience\"\r\n                            value={formData.target_audience}\r\n                            onChange={handleChange}\r\n                            required\r\n                        >\r\n                            <option value=\"all\">All</option>\r\n                            <option value=\"staff\">Staff</option>\r\n                            <option value=\"member\">Member</option>\r\n                            <option value=\"customer\">Customer</option>\r\n                        </select>\r\n                    </label>\r\n                    <label>\r\n                        Priority:\r\n                        <select\r\n                            name=\"priority\"\r\n                            value={formData.priority}\r\n                            onChange={handleChange}\r\n                            required\r\n                        >\r\n                            <option value=\"high\">High</option>\r\n                            <option value=\"medium\">Medium</option>\r\n                            <option value=\"low\">Low</option>\r\n                        </select>\r\n                    </label>\r\n                    <div className={styles.buttonGroup}>\r\n                        <button type=\"submit\" className={styles.formButton}>\r\n                            {announcement && announcement.id ? 'Update' : 'Create'}\r\n                        </button>\r\n                        <button type=\"button\" className={styles.formButton} onClick={onClose}>\r\n                            Cancel\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n                {message && <p className={styles.message}>{message}</p>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AnnouncementFormModal;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/AnnouncementFormModal.jsx b/frontend/src/components/AnnouncementFormModal.jsx
--- a/frontend/src/components/AnnouncementFormModal.jsx	(revision be7a189a6dd3991950fbb26c832d8f9769c55e80)
+++ b/frontend/src/components/AnnouncementFormModal.jsx	(date 1731386552000)
@@ -48,12 +48,12 @@
 
         if (announcement && announcement.id) {
             axios
-                .put(`${process.env.REACT_APP_API_URL}/announcements/${announcement.id}`, formData, config)
+                .put(`http://localhost:5000/announcements/${announcement.id}`, formData, config)
                 .then(() => onClose())
                 .catch((error) => console.error('Error updating announcement:', error));
         } else {
             axios
-                .post(`${process.env.REACT_APP_API_URL}/announcements`, formData, config)
+                .post(`http://localhost:5000/announcements`, formData, config)
                 .then(() => onClose())
                 .catch((error) => console.error('Error creating announcement:', error));
         }
Index: frontend/src/components/ArtLookUp.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { ArtworkCard, ArtworkModalUser, ArtistCard, ArtistModalUser } from '../components/ArtworkCard';\r\nimport styles from '../css/Art.module.css';\r\nimport axios from 'axios';\r\n\r\nconst ArtLookUp = ({ refreshArtworks, refreshArtists, triggerRefreshArtists, triggerRefreshArtworks }) => {\r\n    const location = useLocation();\r\n    const role = localStorage.getItem('role');\r\n\r\n    const [artworks, setArtworks] = useState([]);\r\n    const [artistsWithArtwork, setArtistsWithArtwork] = useState([]);\r\n    const [artistsWithoutArtwork, setArtistsWithoutArtwork] = useState([]);\r\n\r\n    const [departments, setDepartments] = useState([]);\r\n    const [mediums, setMediums] = useState([]);\r\n    const [years, setYears] = useState([]);\r\n    //const [conditions, setConditions] = useState([]);\r\n    const [nationalities, setNationalities] = useState([]);\r\n\r\n    // SEARCH, FILTER, SORT\r\n    const [query, setQuery] = useState('');\r\n    const [selectedMediumQ, setSelectedMediumQ] = useState('');\r\n    const [selectedArtistQ, setSelectedArtistQ] = useState('');\r\n    const [selectedYearQ, setSelectedYearQ] = useState('');\r\n    const [selectedDepartmentQ, setSelectedDepartmentQ] = useState('');\r\n    const [selectedGenderQ, setSelectedGenderQ] = useState('');\r\n    const [selectedNationalityQ, setSelectedNationalityQ] = useState('');\r\n\r\n    const [activeTab, setActiveTab] = useState('artwork');\r\n    const [sortOption, setSortOption] = useState(activeTab === 'artwork' ? 'title_asc' : 'artist_asc');\r\n\r\n    const [filteredArtworks, setFilteredArtworks] = useState([]);\r\n    const [filteredArtistsWithArtwork, setFilteredArtistsWithArtwork] = useState([]);\r\n    const [filteredArtistsWithoutArtwork, setFilteredArtistsWithoutArtwork] = useState([]);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (activeTab === 'artwork') {\r\n            setFilteredArtworks(searchArtwork(artworks));\r\n        } else {\r\n            setFilteredArtistsWithArtwork(searchArtists(artistsWithArtwork));\r\n            setFilteredArtistsWithoutArtwork(searchArtists(artistsWithoutArtwork));\r\n        }\r\n    }, [query, selectedMediumQ, selectedArtistQ, selectedYearQ, selectedDepartmentQ, sortOption, selectedGenderQ, selectedNationalityQ, activeTab, artworks, artistsWithArtwork, artistsWithoutArtwork]);\r\n\r\n    useEffect(() => {\r\n        fetchArtwork();\r\n        fetchArtists();\r\n        fetchFilterOptions();\r\n    }, [refreshArtworks, refreshArtists]);\r\n\r\n    const fetchArtwork = () => {\r\n        axios.get(`${process.env.REACT_APP_API_URL}/artwork`)\r\n            .then(response => setArtworks(response.data))\r\n            .catch(err => console.log('Error fetching artwork:', err));\r\n    };\r\n\r\n    const fetchArtists = async () => {\r\n        try {\r\n            const responseWithArtwork = await axios.get(`${process.env.REACT_APP_API_URL}/artist-with-artwork`);\r\n            const responseWithoutArtwork = await axios.get(`${process.env.REACT_APP_API_URL}/artist-null-artwork`);\r\n            setArtistsWithArtwork(responseWithArtwork.data);\r\n            setArtistsWithoutArtwork(responseWithoutArtwork.data);\r\n        } catch (err) {\r\n            console.log('Error fetching artists:', err);\r\n        }\r\n    };\r\n\r\n    const fetchFilterOptions = async () => {\r\n        try {\r\n            const departmentRes = await axios.get(`${process.env.REACT_APP_API_URL}/department`);\r\n            const mediumsRes = await axios.get(`${process.env.REACT_APP_API_URL}/mediums`);\r\n            const yearsRes = await axios.get(`${process.env.REACT_APP_API_URL}/creation-years`);\r\n            //const conditionsRes = await axios.get(`${process.env.REACT_APP_API_URL}/artworkconditions`);\r\n            const nationalitiesRes = await axios.get(`${process.env.REACT_APP_API_URL}/nationalities`);\r\n\r\n            setDepartments(departmentRes.data);\r\n            setMediums(mediumsRes.data);\r\n            setYears(yearsRes.data);\r\n            //setConditions(conditionsRes.data);\r\n            setNationalities(nationalitiesRes.data);\r\n        } catch (err) {\r\n            console.log('Error fetching filter options:', err);\r\n        }\r\n    };\r\n\r\n    const clearFilters = () => {\r\n        setSelectedMediumQ('');\r\n        setSelectedArtistQ('');\r\n        setSelectedYearQ('');\r\n        setSelectedDepartmentQ('');\r\n        setSelectedGenderQ('');\r\n        setSelectedNationalityQ('');\r\n        setQuery('');\r\n        setSortOption('A-Z');\r\n    };\r\n\r\n    const handleTabSwitch = (tab) => {\r\n        clearFilters();\r\n        setActiveTab(tab);\r\n\r\n        // Set default sort option based on the tab\r\n        if (tab === 'artwork') {\r\n            setSortOption('title_asc');  // Default sorting for artwork\r\n        } else if (tab === 'artist') {\r\n            setSortOption('artist_asc');  // Default sorting for artist\r\n        }\r\n    };\r\n\r\n    // Search and filter artwork\r\n    const searchArtwork = (artworks) => {\r\n        return artworks.filter((artwork) => {\r\n            const artistName = artwork.artist_name ? artwork.artist_name.toLowerCase() : '';\r\n            const title = artwork.Title ? artwork.Title.toLowerCase() : '';\r\n            const medium = artwork.Medium || '';\r\n            const year = artwork.CreationYear || '';\r\n            const departmentName = artwork.department_name || '';\r\n\r\n            return (\r\n                (title.includes(query.toLowerCase()) || artistName.includes(query.toLowerCase())) &&\r\n                (!selectedMediumQ || medium === selectedMediumQ) &&\r\n                (!selectedArtistQ || artistName === selectedArtistQ.toLowerCase()) &&\r\n                (!selectedYearQ || year.toString() === selectedYearQ) &&\r\n                (!selectedDepartmentQ || departmentName === selectedDepartmentQ)\r\n            );\r\n        }).sort((a, b) => {\r\n            switch (sortOption) {\r\n                case 'title_asc':\r\n                    return a.Title.localeCompare(b.Title);\r\n                case 'title_desc':\r\n                    return b.Title.localeCompare(a.Title);\r\n                case 'year_asc':\r\n                    return a.CreationYear - b.CreationYear;\r\n                case 'year_desc':\r\n                    return b.CreationYear - a.CreationYear;\r\n                case 'artist_asc':\r\n                    return a.artist_name.localeCompare(b.artist_name);\r\n                case 'artist_desc':\r\n                    return b.artist_name.localeCompare(a.artist_name);\r\n                default:\r\n                    return 0;\r\n            }\r\n        });\r\n    };\r\n\r\n    // Search and filter artists\r\n    const searchArtists = (artists) => {\r\n        return artists\r\n            .filter((artist) => {\r\n                // Normalize artist name to avoid undefined errors and enable case-insensitive search\r\n                const artistName = artist.name_ ? artist.name_.toLowerCase() : '';\r\n                const artistGender = artist.gender || '';\r\n                const artistNationality = artist.nationality || '';\r\n\r\n                // Apply all filters and search query\r\n                return (\r\n                    (!query || artistName.includes(query.toLowerCase())) && // Search by artist name\r\n                    (!selectedGenderQ || artistGender === selectedGenderQ) && // Filter by gender\r\n                    (!selectedNationalityQ || artistNationality === selectedNationalityQ) // Filter by nationality\r\n                );\r\n            })\r\n            .sort((a, b) => {\r\n                // Access name_ directly for sorting\r\n                const nameA = a.name_ || '';\r\n                const nameB = b.name_ || '';\r\n                if (sortOption === 'artist_asc') {\r\n                    return nameA.localeCompare(nameB);\r\n                } else if (sortOption === 'artist_desc') {\r\n                    return nameB.localeCompare(nameA);\r\n                }\r\n                return 0;\r\n            });\r\n    };\r\n\r\n\r\n\r\n    const [selectedArtwork, setSelectedArtwork] = useState(null);\r\n    const [selectedArtist, setSelectedArtist] = useState(null);\r\n\r\n    const [isArtworkModalOpen, setIsArtworkModalOpen] = useState(false);\r\n    const [isArtistModalOpen, setIsArtistModalOpen] = useState(false);\r\n\r\n    const openArtworkModal = (artwork) => {\r\n        setSelectedArtwork(artwork);\r\n        setIsArtworkModalOpen(true);\r\n    };\r\n    const closeArtworkModal = () => {\r\n        setSelectedArtwork(null);\r\n        setIsArtworkModalOpen(false);\r\n    };\r\n\r\n    const openArtistModal = (artist) => {\r\n        setSelectedArtist(artist);\r\n        setIsArtistModalOpen(true);\r\n    };\r\n    const closeArtistModal = () => {\r\n        setSelectedArtist(null);\r\n        setIsArtistModalOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className={styles.FilterContainer}>\r\n                <h1>Search Collection</h1>\r\n                <div className={styles.tabs}>\r\n                    <button onClick={() => handleTabSwitch('artwork')} className={activeTab === 'artwork' ? styles.activeTab : ''}>\r\n                        Artwork\r\n                    </button>\r\n                    <button onClick={() => handleTabSwitch('artist')} className={activeTab === 'artist' ? styles.activeTab : ''}>\r\n                        Artist\r\n                    </button>\r\n                </div>\r\n\r\n                {/* Search */}\r\n                <div className={styles.search}>\r\n                    <input\r\n                    type=\"text\"\r\n                    placeholder={activeTab === 'artwork' ? 'Search artwork or artist name...' : 'Search artist name...'}\r\n                    value={query}\r\n                    className='search'\r\n                    onChange={(e) => setQuery(e.target.value)}\r\n                    />\r\n                </div>\r\n\r\n                <h2>Filter By</h2>\r\n\r\n                {/* Filters for Artwork */}\r\n                {activeTab === 'artwork' && (\r\n                    <div className={styles.filterSection}>\r\n                        <select onChange={(e) => setSelectedMediumQ(e.target.value)} value={selectedMediumQ}>\r\n                            <option value=\"\">Medium</option>\r\n                            {mediums.map(option => (\r\n                                <option key={option} value={option}>{option}</option>\r\n                            ))}\r\n                        </select>\r\n\r\n                        <select onChange={(e) => setSelectedArtistQ(e.target.value)} value={selectedArtistQ}>\r\n                            <option value=\"\">Artist</option>\r\n                            {artistsWithArtwork.map(option => (\r\n                                <option key={option.ArtistID} value={option.name_}>{option.name_}</option>\r\n                            ))}\r\n                        </select>\r\n\r\n                        <select onChange={(e) => setSelectedYearQ(e.target.value)} value={selectedYearQ}>\r\n                            <option value=\"\">Year</option>\r\n                            {years.map((year) => (\r\n                                <option key={year} value={year}>{year}</option>\r\n                            ))}\r\n                        </select>\r\n\r\n                        <select onChange={(e) => setSelectedDepartmentQ(e.target.value)} value={selectedDepartmentQ}>\r\n                            <option value=\"\">Department</option>\r\n                            {departments.map(department => (\r\n                                <option key={department.DepartmentID} value={department.Name}>{department.Name}</option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n                )}\r\n\r\n                {/* Filters for Artists */}\r\n                {activeTab === 'artist' && (\r\n                    <div className={styles.filterSection}>\r\n                        <select onChange={(e) => setSelectedGenderQ(e.target.value)} value={selectedGenderQ}>\r\n                            <option value=\"\">Gender</option>\r\n                            <option value=\"Male\">Male</option>\r\n                            <option value=\"Female\">Female</option>\r\n                            <option value=\"Other\">Other</option>\r\n                        </select>\r\n\r\n                        <select onChange={(e) => setSelectedNationalityQ(e.target.value)} value={selectedNationalityQ}>\r\n                            <option value=\"\">Nationality</option>\r\n                            {nationalities.map(option => (\r\n                                <option key={option} value={option}>{option}</option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n                )}\r\n\r\n                {/* Clearable Filter Tags */}\r\n                <div className={styles.tagContainer}>\r\n                    {selectedMediumQ && <span>{selectedMediumQ} <button onClick={() => setSelectedMediumQ('')}>X</button></span>}\r\n                    {selectedArtistQ && <span>{selectedArtistQ} <button onClick={() => setSelectedArtistQ('')}>X</button></span>}\r\n                    {selectedYearQ && <span>{selectedYearQ} <button onClick={() => setSelectedYearQ('')}>X</button></span>}\r\n                    {selectedDepartmentQ && <span>{selectedDepartmentQ} <button onClick={() => setSelectedDepartmentQ('')}>X</button></span>}\r\n                    {selectedGenderQ && <span>{selectedGenderQ} <button onClick={() => setSelectedGenderQ('')}>X</button></span>}\r\n                    {selectedNationalityQ && <span>{selectedNationalityQ} <button onClick={() => setSelectedNationalityQ('')}>X</button></span>}\r\n                </div>\r\n\r\n                {/* Sort by */}\r\n                <h2>Sort By</h2>\r\n                <div className={styles.sortSection}>\r\n                    <select onChange={(e) => setSortOption(e.target.value)} value={sortOption}>\r\n                        {activeTab === 'artwork' && (\r\n                            <>\r\n                                <option value=\"title_asc\">Title A-Z</option>\r\n                                <option value=\"title_desc\">Title Z-A</option>\r\n                                <option value=\"year_asc\">Year Ascending</option>\r\n                                <option value=\"year_desc\">Year Descending</option>\r\n                                <option value=\"artist_asc\">Artist A-Z</option>\r\n                                <option value=\"artist_desc\">Artist Z-A</option>\r\n                            </>\r\n                        )}\r\n                        {activeTab === 'artist' && (\r\n                            <>\r\n                                <option value=\"artist_asc\">Artist A-Z</option>\r\n                                <option value=\"artist_desc\">Artist Z-A</option>\r\n                            </>\r\n                        )}\r\n                    </select>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            {/* Display Artwork or Artist */}\r\n            <div>\r\n                {activeTab === 'artwork' ? (\r\n                    searchArtwork(filteredArtworks).length > 0 ? (\r\n                        <>\r\n                            <ArtworkCard artwork_={filteredArtworks} onCardClick={openArtworkModal} />\r\n                            {isArtworkModalOpen && (\r\n                                <ArtworkModalUser artwork_={selectedArtwork} onClose={closeArtworkModal} onRefresh={triggerRefreshArtworks} />\r\n                            )}\r\n                        </>\r\n                    ) : (\r\n                        <p>No artwork found matching your search.</p>\r\n                    )\r\n                ) : (\r\n                    <>\r\n                        {(role === 'admin' || role === 'staff') && location.pathname !== '/Art' && (\r\n                            <>\r\n                                <h2>Artists Without Artwork</h2>\r\n                                <p>These artists will not be displayed</p>\r\n                                {filteredArtistsWithoutArtwork.length > 0 ? (\r\n                                    searchArtists(filteredArtistsWithoutArtwork).length > 0 ? (\r\n                                        // Display artists that match the search criteria\r\n                                        <>\r\n                                            <ArtistCard artist_={filteredArtistsWithoutArtwork} onCardClick={openArtistModal} />\r\n                                            {isArtistModalOpen && (\r\n                                                <ArtistModalUser artist_={selectedArtist} onClose={closeArtistModal} onRefresh={triggerRefreshArtists} />\r\n                                            )}\r\n                                        </>\r\n                                    ) : (\r\n                                        // If there's an active search but no matches\r\n                                        <p>No artists found matching your search.</p>\r\n                                    )\r\n                                ) : (\r\n                                    // If there’s no active search and no artists without artwork\r\n                                    <p>No artists without Artwork</p>\r\n                                )}\r\n                                <h2>Artists With Artwork</h2>\r\n                            </>\r\n                        )}\r\n                        {searchArtists(filteredArtistsWithArtwork).length > 0 ? (\r\n                            <>\r\n                                <ArtistCard artist_={filteredArtistsWithArtwork} onCardClick={openArtistModal} />\r\n                                {isArtistModalOpen && (\r\n                                    <ArtistModalUser artist_={selectedArtist} onClose={closeArtistModal} onRefresh={triggerRefreshArtists} />\r\n                                )}\r\n                            </>\r\n                        ) : (\r\n                            <p>No artists found matching your search.</p>\r\n                        )}\r\n                    </>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ArtLookUp;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/ArtLookUp.jsx b/frontend/src/components/ArtLookUp.jsx
--- a/frontend/src/components/ArtLookUp.jsx	(revision be7a189a6dd3991950fbb26c832d8f9769c55e80)
+++ b/frontend/src/components/ArtLookUp.jsx	(date 1731386552000)
@@ -52,15 +52,15 @@
     }, [refreshArtworks, refreshArtists]);
 
     const fetchArtwork = () => {
-        axios.get(`${process.env.REACT_APP_API_URL}/artwork`)
+        axios.get(`http://localhost:5000/artwork`)
             .then(response => setArtworks(response.data))
             .catch(err => console.log('Error fetching artwork:', err));
     };
 
     const fetchArtists = async () => {
         try {
-            const responseWithArtwork = await axios.get(`${process.env.REACT_APP_API_URL}/artist-with-artwork`);
-            const responseWithoutArtwork = await axios.get(`${process.env.REACT_APP_API_URL}/artist-null-artwork`);
+            const responseWithArtwork = await axios.get(`http://localhost:5000/artist-with-artwork`);
+            const responseWithoutArtwork = await axios.get(`http://localhost:5000/artist-null-artwork`);
             setArtistsWithArtwork(responseWithArtwork.data);
             setArtistsWithoutArtwork(responseWithoutArtwork.data);
         } catch (err) {
@@ -70,11 +70,11 @@
 
     const fetchFilterOptions = async () => {
         try {
-            const departmentRes = await axios.get(`${process.env.REACT_APP_API_URL}/department`);
-            const mediumsRes = await axios.get(`${process.env.REACT_APP_API_URL}/mediums`);
-            const yearsRes = await axios.get(`${process.env.REACT_APP_API_URL}/creation-years`);
-            //const conditionsRes = await axios.get(`${process.env.REACT_APP_API_URL}/artworkconditions`);
-            const nationalitiesRes = await axios.get(`${process.env.REACT_APP_API_URL}/nationalities`);
+            const departmentRes = await axios.get(`http://localhost:5000/department`);
+            const mediumsRes = await axios.get(`http://localhost:5000/mediums`);
+            const yearsRes = await axios.get(`http://localhost:5000/creation-years`);
+            //const conditionsRes = await axios.get(`http://localhost:5000/artworkconditions`);
+            const nationalitiesRes = await axios.get(`http://localhost:5000/nationalities`);
 
             setDepartments(departmentRes.data);
             setMediums(mediumsRes.data);
