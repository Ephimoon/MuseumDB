Index: frontend/src/components/Login.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport {\r\n    Box,\r\n    Button,\r\n    TextField,\r\n    Typography,\r\n    InputAdornment,\r\n    CssBaseline,\r\n    Snackbar,\r\n    Alert,\r\n    IconButton\r\n} from '@mui/material';\r\nimport { useNavigate, Link, useLocation } from 'react-router-dom';\r\nimport AccountIcon from '@mui/icons-material/AccountBox';\r\nimport LockIcon from '@mui/icons-material/Lock';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport HomeNavBar from '../components/HomeNavBar';\r\nimport '../css/Auth.module.css';\r\nimport TicketBackground from '../assets/TicketsBackground.png';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst Login = () => {\r\n    const location = useLocation();\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [errors, setErrors] = useState({});\r\n    const [warningOpen, setWarningOpen] = useState(false);\r\n    const [expiryDate, setExpiryDate] = useState('');\r\n    const [membershipMessage, setMembershipMessage] = useState({\r\n        open: false,\r\n        message: ''\r\n    });\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        if (location.state?.showMessage) {\r\n            setMembershipMessage({\r\n                open: true,\r\n                message: location.state.message\r\n            });\r\n        }\r\n    }, [location]);\r\n\r\n    const handleMembershipMessageClose = () => {\r\n        setMembershipMessage(prev => ({ ...prev, open: false }));\r\n    };\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        const newErrors = {};\r\n        if (!username) newErrors.username = 'Username is required';\r\n        if (!password) newErrors.password = 'Password is required';\r\n        setErrors(newErrors);\r\n\r\n        if (Object.keys(newErrors).length > 0) return;\r\n\r\n        try {\r\n            const loginUrl = `${process.env.REACT_APP_API_URL}/login`;\r\n            const response = await fetch(loginUrl, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ username, password }),\r\n            });\r\n\r\n            if (response.ok) {\r\n                const data = await response.json();\r\n                console.log('Received login response:', data); // Debug log\r\n\r\n                // Check if first_name and last_name exist in response\r\n                if (!data.first_name || !data.last_name) {\r\n                    console.warn('Missing name data in response:', data);\r\n                }\r\n\r\n                localStorage.setItem('role', data.role);\r\n                localStorage.setItem('userId', data.userId);\r\n                localStorage.setItem('username', username);\r\n                localStorage.setItem('firstName', data.first_name || '');  // Handle undefined case\r\n                localStorage.setItem('lastName', data.last_name || '');    // Handle undefined case\r\n\r\n                // Verify localStorage values\r\n                console.log('localStorage after login:', {\r\n                    firstName: localStorage.getItem('firstName'),\r\n                    lastName: localStorage.getItem('lastName'),\r\n                    role: localStorage.getItem('role'),\r\n                    userId: localStorage.getItem('userId'),\r\n                    username: localStorage.getItem('username')\r\n                });\r\n\r\n                if (data.membershipWarning) {\r\n                    const formattedDate = new Date(data.expireDate).toLocaleDateString('en-US', {\r\n                        weekday: 'long',\r\n                        year: 'numeric',\r\n                        month: 'long',\r\n                        day: 'numeric'\r\n                    });\r\n                    localStorage.setItem('membershipWarning', 'true');\r\n                    localStorage.setItem('expiryDate', formattedDate);\r\n                    setExpiryDate(formattedDate);\r\n                    setWarningOpen(true);\r\n                }\r\n\r\n                if (data.role === 'admin') navigate('/AdminDashBoard');\r\n                else if (data.role === 'staff') navigate('/StaffDashboard');\r\n                else if (data.role === 'customer') navigate('/');\r\n                else if (data.role === 'member') navigate('/');\r\n                else navigate('/');\r\n\r\n                toast.success('Login successful!');\r\n            } else {\r\n                const data = await response.json();\r\n                setErrors({ server: data.message });\r\n            }\r\n        } catch (error) {\r\n            console.error('Error during login:', error);\r\n            setErrors({ server: 'Error logging in.' });\r\n        }\r\n    };\r\n\r\n    const handleWarningClose = () => {\r\n        setWarningOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className=\"tickets-container\"\r\n            style={{\r\n                backgroundImage: `linear-gradient(rgba(220, 74, 56, 0.2), rgba(220, 74, 56, 0.2)), url(${TicketBackground})`,\r\n                backgroundSize: 'cover',\r\n                backgroundPosition: 'center',\r\n                backgroundRepeat: 'no-repeat',\r\n            }}\r\n        >\r\n            <HomeNavBar />\r\n            <div className=\"tickets-content\">\r\n                <CssBaseline />\r\n                <Typography component=\"h1\" variant=\"h5\" className=\"tickets-title\">\r\n                    Login\r\n                </Typography>\r\n                {errors.server && <Typography color=\"error\">{errors.server}</Typography>}\r\n                <Box component=\"form\" onSubmit={handleSubmit} noValidate sx={{ mt: 2 }}>\r\n                    <TextField\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"username\"\r\n                        label=\"Username\"\r\n                        error={!!errors.username}\r\n                        helperText={errors.username}\r\n                        value={username}\r\n                        onChange={(e) => setUsername(e.target.value)}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <AccountIcon />\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                    <TextField\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"password\"\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        error={!!errors.password}\r\n                        helperText={errors.password}\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <LockIcon />\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        className=\"purchase-button\"\r\n                        sx={{ mt: 3, mb: 2 }}\r\n                    >\r\n                        Login\r\n                    </Button>\r\n                    <Typography variant=\"body2\" sx={{ mt: 2, textAlign: 'center' }}>\r\n                        Don't have an account? <Link to=\"/register\">Register here</Link>\r\n                    </Typography>\r\n                </Box>\r\n            </div>\r\n\r\n            {membershipMessage.open && (\r\n                <div\r\n                    style={{\r\n                        position: 'fixed',\r\n                        top: '89px',\r\n                        right: '16px',\r\n                        backgroundColor: '#2196F3', // Keeping the blue color\r\n                        color: 'white',\r\n                        padding: '16px',\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        zIndex: 1000,\r\n                        width: '330px',  // Matching the width of your existing notice\r\n                        borderRadius: '4px',\r\n                        fontSize: '14px',\r\n                        boxShadow: '0 2px 4px rgba(0,0,0,0.1)'\r\n                    }}\r\n                >\r\n                    <div style={{\r\n                        display: 'flex',\r\n                        justifyContent: 'space-between',\r\n                        marginBottom: '4px'\r\n                    }}>\r\n                        <strong>Membership Access</strong>\r\n                        <IconButton\r\n                            size=\"small\"\r\n                            onClick={handleMembershipMessageClose}\r\n                            style={{\r\n                                color: 'white',\r\n                                padding: '2px',\r\n                                marginRight: '-8px',\r\n                                marginTop: '-8px'\r\n                            }}\r\n                        >\r\n                            <CloseIcon style={{ fontSize: '16px' }} />\r\n                        </IconButton>\r\n                    </div>\r\n                    <div>\r\n                        You do not have a membership. Please login or register to continue\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* Existing Warning Snackbar */}\r\n            <Snackbar\r\n                open={warningOpen}\r\n                autoHideDuration={null}\r\n                onClose={handleWarningClose}\r\n                anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n                sx={{\r\n                    mt: 2,\r\n                    maxWidth: '600px',\r\n                    width: '100%',\r\n                }}\r\n            >\r\n                <Alert\r\n                    onClose={handleWarningClose}\r\n                    severity=\"warning\"\r\n                    sx={{\r\n                        width: '100%',\r\n                        backgroundColor: '#FFF8E1',\r\n                        color: '#8B6E00',\r\n                        '& .MuiAlert-action': {\r\n                            alignItems: 'center',\r\n                        },\r\n                        border: '1px solid #FFE082',\r\n                        borderRadius: '4px',\r\n                        '& .MuiAlert-icon': {\r\n                            display: 'none',\r\n                        },\r\n                    }}\r\n                    action={\r\n                        <IconButton\r\n                            size=\"small\"\r\n                            aria-label=\"close\"\r\n                            color=\"inherit\"\r\n                            onClick={handleWarningClose}\r\n                        >\r\n                            <CloseIcon fontSize=\"small\" />\r\n                        </IconButton>\r\n                    }\r\n                >\r\n                    <Typography\r\n                        sx={{\r\n                            fontWeight: 'bold',\r\n                            mb: 1,\r\n                            color: '#8B6E00',\r\n                            fontSize: '1.1rem',\r\n                        }}\r\n                    >\r\n                        Membership Expiration Notice\r\n                    </Typography>\r\n                    <Typography sx={{ color: '#8B6E00' }}>\r\n                        Your individual membership will expire on {expiryDate}. Please renew your membership to continue enjoying museum benefits.\r\n                    </Typography>\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/Login.jsx b/frontend/src/components/Login.jsx
--- a/frontend/src/components/Login.jsx	(revision d3acca75f5b262396eed806fab6b317a26cdab5f)
+++ b/frontend/src/components/Login.jsx	(date 1731864598000)
@@ -56,7 +56,7 @@
         if (Object.keys(newErrors).length > 0) return;
 
         try {
-            const loginUrl = `${process.env.REACT_APP_API_URL}/login`;
+            const loginUrl = `http://localhost:5000/login`;
             const response = await fetch(loginUrl, {
                 method: 'POST',
                 headers: { 'Content-Type': 'application/json' },
Index: frontend/src/components/Verify.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState } from 'react';\r\nimport { Container, Box, Button, TextField, Typography, CssBaseline } from '@mui/material';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nexport default function Verify() {\r\n    const [email, setEmail] = useState('');\r\n    const [errors, setErrors] = useState({});\r\n    const [message, setMessage] = useState('');\r\n    const navigate = useNavigate();\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        const newErrors = {};\r\n\r\n        if (!email) {\r\n            newErrors.email = 'Email is required';\r\n        } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\r\n            newErrors.email = 'Please enter a valid email address';\r\n        }\r\n\r\n        setErrors(newErrors);\r\n        if (Object.keys(newErrors).length > 0) return;\r\n\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_API_URL}/verify`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ email }),\r\n            });\r\n\r\n            if (response.ok) {\r\n                setMessage('Verification email sent successfully! Please check your inbox.');\r\n            } else {\r\n                const data = await response.json();\r\n                setErrors({ server: data.message });\r\n            }\r\n        } catch (error) {\r\n            setErrors({ server: 'Error sending verification email.' });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <Box sx={{ marginTop: 8, display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n                <Typography component=\"h1\" variant=\"h5\">Verify Your Email</Typography>\r\n                {message && <Typography color=\"primary\">{message}</Typography>}\r\n                {errors.server && <Typography color=\"error\">{errors.server}</Typography>}\r\n                <Box component=\"form\" onSubmit={handleSubmit} noValidate sx={{ mt: 1 }}>\r\n                    <TextField\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"email\"\r\n                        label=\"Email Address\"\r\n                        error={!!errors.email}\r\n                        helperText={errors.email}\r\n                        value={email}\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                    />\r\n                    <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\" sx={{ mt: 3, mb: 2 }}>\r\n                        Send Verification Email\r\n                    </Button>\r\n                    <Button fullWidth variant=\"outlined\" color=\"secondary\" onClick={() => navigate('/')}>\r\n                        Back to Home\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n        </Container>\r\n    );\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/Verify.jsx b/frontend/src/components/Verify.jsx
--- a/frontend/src/components/Verify.jsx	(revision d3acca75f5b262396eed806fab6b317a26cdab5f)
+++ b/frontend/src/components/Verify.jsx	(date 1731864598000)
@@ -22,7 +22,7 @@
         if (Object.keys(newErrors).length > 0) return;
 
         try {
-            const response = await fetch(`${process.env.REACT_APP_API_URL}/verify`, {
+            const response = await fetch(`http://localhost:5000/verify`, {
                 method: 'POST',
                 headers: { 'Content-Type': 'application/json' },
                 body: JSON.stringify({ email }),
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"3f424dd9-3ec0-47f1-b65a-6f298c371623\" name=\"Changes\" comment=\"Update api url\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/App.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/App.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/components/AdminResetPasswordModal.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/components/AdminResetPasswordModal.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/components/AnnouncementDisplay.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/components/AnnouncementDisplay.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/components/AnnouncementFormModal.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/components/AnnouncementFormModal.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/components/ArtLookUp.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/components/ArtLookUp.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/components/ArtworkCard.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/components/ArtworkCard.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/components/ChangePasswordModal.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/components/ChangePasswordModal.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/components/GiftShopAdmin.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/components/GiftShopAdmin.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/components/GiftShopForm.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/components/GiftShopForm.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/components/HomeNavBar.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/components/HomeNavBar.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/components/Login.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/components/Login.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/components/MFAShopCard.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/components/MFAShopCard.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/components/MFAShopModalUser.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/components/MFAShopModalUser.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/components/ManageUsers.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/components/ManageUsers.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/components/Register.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/components/Register.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/components/UserFormModal.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/components/UserFormModal.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/components/Verify.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/components/Verify.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/css/AdminDashBoard.module.css\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/css/AdminDashBoard.module.css\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/pages/Art.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/pages/Art.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/pages/BecomeAMember.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/pages/BecomeAMember.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/pages/Checkout.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/pages/Checkout.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/pages/Dashboards/AdminDashboard.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/pages/Dashboards/AdminDashboard.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/pages/Dashboards/CurateArt.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/pages/Dashboards/CurateArt.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/pages/Dashboards/CurateExhibitions.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/pages/Dashboards/CurateExhibitions.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/pages/Dashboards/EventDashboard.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/pages/Dashboards/EventDashboard.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/pages/ExhibitionsAndEvents.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/pages/ExhibitionsAndEvents.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/pages/MFAShop.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/pages/MFAShop.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/pages/ProfilePage.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/pages/ProfilePage.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/pages/Report.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/pages/Report.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/server.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/server.js\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"JavaScript File\" />\r\n        <option value=\"TypeScript JSX File\" />\r\n        <option value=\"JSX File\" />\r\n        <option value=\"CSS File\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Rebase.Settings\">\r\n    <option name=\"NEW_BASE\" value=\"main\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;leo2971998&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/Ephimoon/MuseumDB.git&quot;,\r\n    &quot;accountId&quot;: &quot;00f8a867-6507-43b0-82ad-48f342da4666&quot;\r\n  },\r\n  &quot;recentNewPullRequestHead&quot;: {\r\n    &quot;server&quot;: {\r\n      &quot;useHttp&quot;: false,\r\n      &quot;host&quot;: &quot;github.com&quot;,\r\n      &quot;port&quot;: null,\r\n      &quot;suffix&quot;: null\r\n    },\r\n    &quot;owner&quot;: &quot;Ephimoon&quot;,\r\n    &quot;repository&quot;: &quot;MuseumDB&quot;\r\n  }\r\n}</component>\r\n  <component name=\"PackageJsonUpdateNotifier\">\r\n    <dismissed value=\"$PROJECT_DIR$/frontend/package.json\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 5\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2ngMmHmv86bcVYIUFLyKS9H1wUv\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;ASKED_SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;Node.js.HomeNavBar.jsx.executor&quot;: &quot;Run&quot;,\r\n    &quot;Node.js.Register.jsx.executor&quot;: &quot;Run&quot;,\r\n    &quot;Node.js.emailQueue.js.executor&quot;: &quot;Run&quot;,\r\n    &quot;Node.js.server.js.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\r\n    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,\r\n    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;E:/MuseumDB-Clone/frontend/package.json&quot;,\r\n    &quot;list.type.of.created.stylesheet&quot;: &quot;CSS&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;npm.npm start.executor&quot;: &quot;Run&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.lookFeel&quot;,\r\n    &quot;ts.external.directory.path&quot;: &quot;C:\\\\Program Files\\\\JetBrains\\\\IntelliJ IDEA 2023.2.2\\\\plugins\\\\javascript-plugin\\\\jsLanguageServicesImpl\\\\external&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\nanht\\OneDrive\\Desktop\\MuseumDB\\frontend\\src\" />\r\n      <recent name=\"C:\\Users\\nanht\\OneDrive\\Desktop\\MuseumDB\\frontend\" />\r\n      <recent name=\"E:\\Projects\\MuseumDB\\frontend\\\" />\r\n      <recent name=\"E:\\Projects\\MuseumDB\\frontend\\src\\pages\\\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Node.js.server.js\">\r\n    <configuration default=\"true\" type=\"AZURE_FUNCTION_SUPPORT\" factoryName=\"Run Functions\">\r\n      <option name=\"appName\" />\r\n      <option name=\"appServicePlanName\" />\r\n      <option name=\"appServicePlanResourceGroup\" />\r\n      <option name=\"appSettingsKey\" value=\"3ac96a00-1fd8-4bfb-ab7b-e01d81a35e58\" />\r\n      <option name=\"artifact\" />\r\n      <option name=\"debugOptions\" />\r\n      <option name=\"deployment\" />\r\n      <option name=\"deploymentStagingDirectoryPath\" />\r\n      <option name=\"funcPath\" />\r\n      <option name=\"functionHostArguments\" />\r\n      <option name=\"hostJsonPath\" />\r\n      <option name=\"insightsName\" />\r\n      <option name=\"instrumentationKey\" />\r\n      <option name=\"javaVersion\" />\r\n      <option name=\"localSettingsJsonPath\" />\r\n      <option name=\"moduleName\" />\r\n      <option name=\"os\" />\r\n      <option name=\"pricingTier\" />\r\n      <option name=\"providerMap\">\r\n        <map />\r\n      </option>\r\n      <option name=\"region\" />\r\n      <option name=\"resourceGroup\" />\r\n      <option name=\"stagingFolder\" />\r\n      <option name=\"subscription\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"emailQueue.js\" type=\"NodeJSConfigurationType\" temporary=\"true\" nameIsGenerated=\"true\" path-to-js-file=\"$PROJECT_DIR$/frontend/src/emailQueue.js\" working-dir=\"$PROJECT_DIR$/frontend/src\">\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Compound.Run server + client\" />\r\n      <item itemvalue=\"Node.js.server.js\" />\r\n      <item itemvalue=\"Node.js.emailQueue.js\" />\r\n      <item itemvalue=\"npm.npm start\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Node.js.emailQueue.js\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-jdk-9823dce3aa75-28b599e66164-intellij.indexing.shared.core-IU-242.23339.11\" />\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-5c90d61e3bab-JavaScript-IU-242.23339.11\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"3f424dd9-3ec0-47f1-b65a-6f298c371623\" name=\"Changes\" comment=\"\" />\r\n      <created>1729390425622</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1729390425622</updated>\r\n      <workItem from=\"1729390431772\" duration=\"4928000\" />\r\n      <workItem from=\"1729721588846\" duration=\"1031000\" />\r\n      <workItem from=\"1729981775513\" duration=\"30000\" />\r\n      <workItem from=\"1729981831779\" duration=\"6833000\" />\r\n      <workItem from=\"1730013036729\" duration=\"4227000\" />\r\n      <workItem from=\"1730064938056\" duration=\"16596000\" />\r\n      <workItem from=\"1730154909867\" duration=\"2462000\" />\r\n      <workItem from=\"1730173828488\" duration=\"12189000\" />\r\n      <workItem from=\"1730232149375\" duration=\"3398000\" />\r\n      <workItem from=\"1730257006877\" duration=\"4239000\" />\r\n      <workItem from=\"1730329647832\" duration=\"1764000\" />\r\n      <workItem from=\"1730412608407\" duration=\"145000\" />\r\n      <workItem from=\"1730606829651\" duration=\"1712000\" />\r\n      <workItem from=\"1730609990511\" duration=\"13250000\" />\r\n      <workItem from=\"1730696054431\" duration=\"3950000\" />\r\n      <workItem from=\"1730761207686\" duration=\"896000\" />\r\n      <workItem from=\"1730781467559\" duration=\"11615000\" />\r\n      <workItem from=\"1730794665528\" duration=\"489000\" />\r\n      <workItem from=\"1730835007512\" duration=\"6818000\" />\r\n      <workItem from=\"1730848420240\" duration=\"76000\" />\r\n      <workItem from=\"1730849013073\" duration=\"7000\" />\r\n      <workItem from=\"1730930113416\" duration=\"13575000\" />\r\n      <workItem from=\"1731022247236\" duration=\"416000\" />\r\n      <workItem from=\"1731083407018\" duration=\"8756000\" />\r\n      <workItem from=\"1731153847838\" duration=\"1137000\" />\r\n      <workItem from=\"1731216326690\" duration=\"16466000\" />\r\n      <workItem from=\"1731235644586\" duration=\"2106000\" />\r\n      <workItem from=\"1731240526189\" duration=\"1466000\" />\r\n      <workItem from=\"1731243416991\" duration=\"5382000\" />\r\n      <workItem from=\"1731275400128\" duration=\"31000\" />\r\n      <workItem from=\"1731363371517\" duration=\"4448000\" />\r\n      <workItem from=\"1731370029114\" duration=\"16142000\" />\r\n      <workItem from=\"1731436885415\" duration=\"5229000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Updated server.js\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730190575521</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730190575521</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Update api url\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730261657195</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730261657195</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"3\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Updated server.js\" />\r\n    <MESSAGE value=\"Update api url\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Update api url\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" type=\"javascript\">\r\n          <url>file://$PROJECT_DIR$/frontend/src/components/Logout.jsx</url>\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"javascript\">\r\n          <url>file://$PROJECT_DIR$/frontend/src/components/GiftShopForm.jsx</url>\r\n          <line>2</line>\r\n          <option name=\"timeStamp\" value=\"2\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"javascript\">\r\n          <url>file://$PROJECT_DIR$/frontend/src/server.js</url>\r\n          <line>2589</line>\r\n          <properties lambdaOrdinal=\"-1\" />\r\n          <option name=\"timeStamp\" value=\"3\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision d3acca75f5b262396eed806fab6b317a26cdab5f)
+++ b/.idea/workspace.xml	(date 1731864572000)
@@ -6,36 +6,7 @@
   <component name="ChangeListManager">
     <list default="true" id="3f424dd9-3ec0-47f1-b65a-6f298c371623" name="Changes" comment="Update api url">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/App.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/App.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/components/AdminResetPasswordModal.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/components/AdminResetPasswordModal.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/components/AnnouncementDisplay.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/components/AnnouncementDisplay.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/components/AnnouncementFormModal.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/components/AnnouncementFormModal.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/components/ArtLookUp.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/components/ArtLookUp.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/components/ArtworkCard.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/components/ArtworkCard.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/components/ChangePasswordModal.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/components/ChangePasswordModal.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/components/GiftShopAdmin.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/components/GiftShopAdmin.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/components/GiftShopForm.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/components/GiftShopForm.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/components/HomeNavBar.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/components/HomeNavBar.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/components/Login.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/components/Login.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/components/MFAShopCard.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/components/MFAShopCard.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/components/MFAShopModalUser.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/components/MFAShopModalUser.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/components/ManageUsers.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/components/ManageUsers.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/components/Register.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/components/Register.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/components/UserFormModal.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/components/UserFormModal.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/components/Verify.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/components/Verify.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/css/AdminDashBoard.module.css" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/css/AdminDashBoard.module.css" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/pages/Art.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/pages/Art.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/pages/BecomeAMember.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/pages/BecomeAMember.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/pages/Checkout.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/pages/Checkout.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/pages/Dashboards/AdminDashboard.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/pages/Dashboards/AdminDashboard.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/pages/Dashboards/CurateArt.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/pages/Dashboards/CurateArt.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/pages/Dashboards/CurateExhibitions.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/pages/Dashboards/CurateExhibitions.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/pages/Dashboards/EventDashboard.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/pages/Dashboards/EventDashboard.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/pages/ExhibitionsAndEvents.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/pages/ExhibitionsAndEvents.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/pages/MFAShop.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/pages/MFAShop.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/pages/ProfilePage.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/pages/ProfilePage.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/pages/Report.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/pages/Report.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/server.js" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/server.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/package-lock.json" beforeDir="false" afterPath="$PROJECT_DIR$/package-lock.json" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -93,36 +64,37 @@
 }</component>
   <component name="ProjectId" id="2ngMmHmv86bcVYIUFLyKS9H1wUv" />
   <component name="ProjectLevelVcsManager">
+    <OptionsSetting value="false" id="Update" />
     <ConfirmationsSetting value="2" id="Add" />
   </component>
   <component name="ProjectViewState">
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">{
-  &quot;keyToString&quot;: {
-    &quot;ASKED_SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
-    &quot;Node.js.HomeNavBar.jsx.executor&quot;: &quot;Run&quot;,
-    &quot;Node.js.Register.jsx.executor&quot;: &quot;Run&quot;,
-    &quot;Node.js.emailQueue.js.executor&quot;: &quot;Run&quot;,
-    &quot;Node.js.server.js.executor&quot;: &quot;Run&quot;,
-    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
-    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,
-    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
-    &quot;last_opened_file_path&quot;: &quot;E:/MuseumDB-Clone/frontend/package.json&quot;,
-    &quot;list.type.of.created.stylesheet&quot;: &quot;CSS&quot;,
-    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
-    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
-    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
-    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
-    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
-    &quot;npm.npm start.executor&quot;: &quot;Run&quot;,
-    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.lookFeel&quot;,
-    &quot;ts.external.directory.path&quot;: &quot;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2023.2.2\\plugins\\javascript-plugin\\jsLanguageServicesImpl\\external&quot;,
-    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "ASKED_SHARE_PROJECT_CONFIGURATION_FILES": "true",
+    "Node.js.HomeNavBar.jsx.executor": "Run",
+    "Node.js.Register.jsx.executor": "Run",
+    "Node.js.emailQueue.js.executor": "Run",
+    "Node.js.server.js.executor": "Run",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "git-widget-placeholder": "Anh",
+    "ignore.virus.scanning.warn.message": "true",
+    "kotlin-language-version-configured": "true",
+    "last_opened_file_path": "E:/MuseumDB-Clone/frontend/package.json",
+    "list.type.of.created.stylesheet": "CSS",
+    "node.js.detected.package.eslint": "true",
+    "node.js.detected.package.tslint": "true",
+    "node.js.selected.package.eslint": "(autodetect)",
+    "node.js.selected.package.tslint": "(autodetect)",
+    "nodejs_package_manager_path": "npm",
+    "npm.npm start.executor": "Run",
+    "settings.editor.selected.configurable": "preferences.lookFeel",
+    "ts.external.directory.path": "C:\\Program Files\\JetBrains\\IntelliJ IDEA 2023.2.2\\plugins\\javascript-plugin\\jsLanguageServicesImpl\\external",
+    "vue.rearranger.settings.migration": "true"
   }
-}</component>
+}]]></component>
   <component name="RecentsManager">
     <key name="MoveFile.RECENT_KEYS">
       <recent name="C:\Users\nanht\OneDrive\Desktop\MuseumDB\frontend\src" />
@@ -269,7 +241,6 @@
         <line-breakpoint enabled="true" type="javascript">
           <url>file://$PROJECT_DIR$/frontend/src/server.js</url>
           <line>2589</line>
-          <properties lambdaOrdinal="-1" />
           <option name="timeStamp" value="3" />
         </line-breakpoint>
       </breakpoints>
Index: frontend/src/components/MFAShopModalUser.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/components/MFAShopModalUser.jsx\r\nimport React, { useState, useContext } from 'react';\r\nimport { Modal, Box, Typography, Button, TextField, InputLabel, Select, MenuItem } from '@mui/material';\r\nimport { styled } from '@mui/system';\r\nimport { CartContext } from './CartContext';\r\nimport axios from 'axios';\r\n\r\nconst StyledButton = styled(Button)({\r\n    padding: '8px 12px',\r\n    marginRight: '5px',\r\n    fontSize: '14px',\r\n    color: '#FFFFFF',\r\n    background: 'linear-gradient(90deg, #BD2859 0%, #D22D36 100%)',\r\n    border: 'none',\r\n    borderRadius: '5px',\r\n    cursor: 'pointer',\r\n    transition: 'background 0.3s ease',\r\n    '&:hover': {\r\n        background: 'linear-gradient(90deg, #D22D36 0%, #BD2859 100%)',\r\n    },\r\n});\r\n\r\nconst MFAShopModalUser = ({ item, onClose, isEditing }) => {\r\n    const { addToCart } = useContext(CartContext);\r\n    const [itemData, setItemData] = useState({\r\n        name_: item ? item.name_ : '',\r\n        category: item ? item.category : '',\r\n        price: item ? item.price : '',\r\n        quantity: item ? item.quantity : '',\r\n    });\r\n    const [imageFile, setImageFile] = useState(null);\r\n\r\n    const getImageUrl = (itemId) => {\r\n        return `${process.env.REACT_APP_API_URL}/giftshopitems/${itemId}/image`;\r\n    };\r\n\r\n    const handleInputChange = (e) => {\r\n        setItemData({ ...itemData, [e.target.name]: e.target.value });\r\n    };\r\n\r\n    const handleFileChange = (e) => {\r\n        setImageFile(e.target.files[0]);\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        // Create a FormData object to send form data including the file\r\n        const formData = new FormData();\r\n        formData.append('name_', itemData.name_);\r\n        formData.append('category', itemData.category);\r\n        formData.append('price', itemData.price);\r\n        formData.append('quantity', itemData.quantity);\r\n        if (imageFile) {\r\n            formData.append('image', imageFile);\r\n        }\r\n\r\n        try {\r\n            if (item && isEditing) {\r\n                // Update existing item\r\n                await axios.put(`${process.env.REACT_APP_API_URL}/giftshopitems/${item.item_id}`, formData, {\r\n                    headers: {\r\n                        'Content-Type': 'multipart/form-data',\r\n                    },\r\n                });\r\n            } else {\r\n                // Create new item\r\n                await axios.post(`${process.env.REACT_APP_API_URL}/giftshopitems`, formData, {\r\n                    headers: {\r\n                        'Content-Type': 'multipart/form-data',\r\n                    },\r\n                });\r\n            }\r\n            // Handle success (e.g., show a success message, refresh items)\r\n            onClose();\r\n        } catch (error) {\r\n            console.error('Error uploading item:', error);\r\n            // Handle error (e.g., show an error message)\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Modal open={true} onClose={onClose}>\r\n            <Box sx={modalStyle}>\r\n                {isEditing ? (\r\n                    <form onSubmit={handleSubmit}>\r\n                        <Typography variant=\"h5\" gutterBottom>\r\n                            {item ? 'Edit Item' : 'Add New Item'}\r\n                        </Typography>\r\n\r\n                        <TextField\r\n                            fullWidth\r\n                            label=\"Item Name\"\r\n                            name=\"name_\"\r\n                            value={itemData.name_}\r\n                            onChange={handleInputChange}\r\n                            required\r\n                            sx={{ mt: 2 }}\r\n                        />\r\n\r\n                        <TextField\r\n                            fullWidth\r\n                            label=\"Category\"\r\n                            name=\"category\"\r\n                            value={itemData.category}\r\n                            onChange={handleInputChange}\r\n                            required\r\n                            sx={{ mt: 2 }}\r\n                        />\r\n\r\n                        <TextField\r\n                            fullWidth\r\n                            label=\"Price\"\r\n                            name=\"price\"\r\n                            type=\"number\"\r\n                            value={itemData.price}\r\n                            onChange={handleInputChange}\r\n                            required\r\n                            inputProps={{ step: '0.01' }}\r\n                            sx={{ mt: 2 }}\r\n                        />\r\n\r\n                        <TextField\r\n                            fullWidth\r\n                            label=\"Quantity\"\r\n                            name=\"quantity\"\r\n                            type=\"number\"\r\n                            value={itemData.quantity}\r\n                            onChange={handleInputChange}\r\n                            required\r\n                            sx={{ mt: 2 }}\r\n                        />\r\n\r\n                        <InputLabel sx={{ mt: 2 }}>Upload Image</InputLabel>\r\n                        <input type=\"file\" name=\"image\" onChange={handleFileChange} accept=\"image/*\" />\r\n\r\n                        {item && (\r\n                            <img\r\n                                src={getImageUrl(item.item_id)}\r\n                                alt={item.name_}\r\n                                style={{ width: '100%', borderRadius: '10px', marginTop: '20px' }}\r\n                            />\r\n                        )}\r\n\r\n                        <Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end' }}>\r\n                            <StyledButton onClick={onClose}>Cancel</StyledButton>\r\n                            <StyledButton type=\"submit\">{item ? 'Update Item' : 'Add Item'}</StyledButton>\r\n                        </Box>\r\n                    </form>\r\n                ) : (\r\n                    <>\r\n                        <img\r\n                            src={getImageUrl(item.item_id)}\r\n                            alt={item.name_}\r\n                            style={{ width: '100%', borderRadius: '10px', marginBottom: '20px' }}\r\n                        />\r\n                        <Typography variant=\"h5\" gutterBottom>\r\n                            {item.name_}\r\n                        </Typography>\r\n                        <Typography variant=\"body1\" gutterBottom>\r\n                            <strong>Price:</strong> ${parseFloat(item.price).toFixed(2)}\r\n                        </Typography>\r\n                        <Typography variant=\"body1\" gutterBottom>\r\n                            <strong>Category:</strong> {item.category || 'N/A'}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" gutterBottom>\r\n                            {item.description || 'No description available.'}\r\n                        </Typography>\r\n                        <StyledButton onClick={() => addToCart(item)} sx={{ marginTop: '20px' }}>\r\n                            Add to Cart\r\n                        </StyledButton>\r\n                    </>\r\n                )}\r\n            </Box>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nconst modalStyle = {\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: '90%',\r\n    maxWidth: 450,\r\n    bgcolor: 'background.paper',\r\n    borderRadius: '10px',\r\n    boxShadow: 24,\r\n    p: 4,\r\n    textAlign: 'center',\r\n};\r\n\r\nexport default MFAShopModalUser;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/MFAShopModalUser.jsx b/frontend/src/components/MFAShopModalUser.jsx
--- a/frontend/src/components/MFAShopModalUser.jsx	(revision d3acca75f5b262396eed806fab6b317a26cdab5f)
+++ b/frontend/src/components/MFAShopModalUser.jsx	(date 1731864596000)
@@ -31,7 +31,7 @@
     const [imageFile, setImageFile] = useState(null);
 
     const getImageUrl = (itemId) => {
-        return `${process.env.REACT_APP_API_URL}/giftshopitems/${itemId}/image`;
+        return `http://localhost:5000/giftshopitems/${itemId}/image`;
     };
 
     const handleInputChange = (e) => {
@@ -58,14 +58,14 @@
         try {
             if (item && isEditing) {
                 // Update existing item
-                await axios.put(`${process.env.REACT_APP_API_URL}/giftshopitems/${item.item_id}`, formData, {
+                await axios.put(`http://localhost:5000/giftshopitems/${item.item_id}`, formData, {
                     headers: {
                         'Content-Type': 'multipart/form-data',
                     },
                 });
             } else {
                 // Create new item
-                await axios.post(`${process.env.REACT_APP_API_URL}/giftshopitems`, formData, {
+                await axios.post(`http://localhost:5000/giftshopitems`, formData, {
                     headers: {
                         'Content-Type': 'multipart/form-data',
                     },
Index: frontend/src/components/MFAShopCard.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/components/MFAShopCard.jsx\r\nimport React, { useContext } from 'react';\r\nimport {\r\n    Card,\r\n    CardActionArea,\r\n    CardMedia,\r\n    CardContent,\r\n    Typography,\r\n    Button,\r\n    CardActions,\r\n    Box,\r\n    Tooltip,\r\n} from '@mui/material';\r\nimport { styled } from '@mui/system';\r\nimport { CartContext } from './CartContext';\r\n\r\nconst LOW_STOCK_THRESHOLD = 10;\r\n\r\nconst StyledButton = styled(Button)(({ disabled }) => ({\r\n    padding: '8px 12px',\r\n    marginRight: '5px',\r\n    fontSize: '14px',\r\n    color: '#FFFFFF',\r\n    background: 'linear-gradient(90deg, #BD2859 0%, #D22D36 100%)',\r\n    border: 'none',\r\n    borderRadius: '5px',\r\n    cursor: disabled ? 'not-allowed' : 'pointer',\r\n    transition: 'background 0.3s ease, opacity 0.3s ease',\r\n    opacity: disabled ? 0.6 : 1,\r\n    width: '100%',\r\n    '&:hover': {\r\n        background: disabled\r\n            ? 'linear-gradient(90deg, #BD2859 0%, #D22D36 100%)'\r\n            : 'linear-gradient(90deg, #D22D36 0%, #BD2859 100%)',\r\n    },\r\n}));\r\n\r\nconst StyledCard = styled(Card)(({ isOutOfStock }) => ({\r\n    opacity: isOutOfStock ? 0.6 : 1,\r\n    filter: isOutOfStock ? 'grayscale(100%)' : 'none',\r\n    transition: 'opacity 0.3s ease, filter 0.3s ease',\r\n    height: '100%',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n}));\r\n\r\nconst MFAShopCard = ({ item, onCardClick }) => {\r\n    const { addToCart } = useContext(CartContext);\r\n\r\n    const getImageUrl = (itemId) => {\r\n        return `${process.env.REACT_APP_API_URL}/giftshopitems/${itemId}/image`;\r\n    };\r\n\r\n    const isOutOfStock = item.quantity === 0;\r\n    const isLowStock = item.quantity > 0 && item.quantity < LOW_STOCK_THRESHOLD;\r\n\r\n    return (\r\n        <StyledCard isOutOfStock={isOutOfStock}>\r\n            <CardActionArea\r\n                onClick={() => onCardClick(item)}\r\n                sx={{\r\n                    flexGrow: 1,\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                    position: 'relative',\r\n                }}\r\n            >\r\n                {isOutOfStock && (\r\n                    <Box\r\n                        sx={{\r\n                            position: 'absolute',\r\n                            top: 0,\r\n                            left: 0,\r\n                            width: '100%',\r\n                            height: '100%',\r\n                            backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            justifyContent: 'center',\r\n                            color: '#FFFFFF',\r\n                            fontSize: '1.2rem',\r\n                            borderRadius: '4px',\r\n                            zIndex: 1,\r\n                        }}\r\n                    >\r\n                        Out of Stock\r\n                    </Box>\r\n                )}\r\n                <Box sx={{ width: '100%', aspectRatio: '1 / 1', overflow: 'hidden' }}>\r\n                    <CardMedia\r\n                        component=\"img\"\r\n                        image={getImageUrl(item.item_id)}\r\n                        alt={item.name_}\r\n                        sx={{\r\n                            width: '100%',\r\n                            height: '100%',\r\n                            objectFit: 'cover',\r\n                            borderRadius: '4px 4px 0 0',\r\n                        }}\r\n                    />\r\n                </Box>\r\n                <CardContent\r\n                    sx={{\r\n                        flexGrow: 1,\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        alignItems: 'stretch',\r\n                        justifyContent: 'flex-start',\r\n                        padding: '16px',\r\n                    }}\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            width: '100%',\r\n                            minHeight: '50px',\r\n                            marginBottom: '8px',\r\n                            display: 'flex',\r\n                            flexDirection: 'column',\r\n                            justifyContent: 'flex-start',\r\n                        }}\r\n                    >\r\n                        <Typography\r\n                            variant=\"h6\"\r\n                            component=\"div\"\r\n                            sx={{\r\n                                textAlign: 'left',\r\n                                display: '-webkit-box',\r\n                                WebkitLineClamp: 2,\r\n                                WebkitBoxOrient: 'vertical',\r\n                                overflow: 'hidden',\r\n                            }}\r\n                        >\r\n                            {item.name_}\r\n                        </Typography>\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            width: '100%',\r\n                            minHeight: '20px',\r\n                            marginBottom: '8px',\r\n                            display: 'flex',\r\n                            flexDirection: 'column',\r\n                            justifyContent: 'flex-start',\r\n                        }}\r\n                    >\r\n                        <Typography\r\n                            variant=\"body2\"\r\n                            color=\"text.secondary\"\r\n                            sx={{ textAlign: 'left' }}\r\n                        >\r\n                            ${parseFloat(item.price).toFixed(2)}\r\n                        </Typography>\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            width: '100%',\r\n                            display: 'flex',\r\n                            flexDirection: 'column',\r\n                            justifyContent: 'flex-start',\r\n                        }}\r\n                    >\r\n                        {isLowStock && (\r\n                            <Typography\r\n                                variant=\"body2\"\r\n                                sx={{\r\n                                    color: '#dc3545',\r\n                                    fontWeight: 'bold',\r\n                                    textAlign: 'left',\r\n                                }}\r\n                            >\r\n                                Only {item.quantity} left in stock!\r\n                            </Typography>\r\n                        )}\r\n                        {isOutOfStock && (\r\n                            <Typography\r\n                                variant=\"body2\"\r\n                                sx={{\r\n                                    color: '#dc3545',\r\n                                    fontWeight: 'bold',\r\n                                    textAlign: 'left',\r\n                                }}\r\n                            >\r\n                                Out of Stock\r\n                            </Typography>\r\n                        )}\r\n                    </Box>\r\n                </CardContent>\r\n            </CardActionArea>\r\n            <CardActions>\r\n                <Tooltip\r\n                    title={\r\n                        isOutOfStock\r\n                            ? 'This item is currently out of stock.'\r\n                            : 'Add this item to your cart.'\r\n                    }\r\n                    placement=\"top\"\r\n                    arrow\r\n                >\r\n                    <span style={{ width: '100%' }}>\r\n                        <StyledButton\r\n                            fullWidth\r\n                            disabled={isOutOfStock}\r\n                            onClick={(e) => {\r\n                                e.stopPropagation();\r\n                                if (!isOutOfStock) {\r\n                                    addToCart(item);\r\n                                }\r\n                            }}\r\n                        >\r\n                            Add to Cart\r\n                        </StyledButton>\r\n                    </span>\r\n                </Tooltip>\r\n            </CardActions>\r\n        </StyledCard>\r\n    );\r\n};\r\n\r\nexport default MFAShopCard;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/MFAShopCard.jsx b/frontend/src/components/MFAShopCard.jsx
--- a/frontend/src/components/MFAShopCard.jsx	(revision d3acca75f5b262396eed806fab6b317a26cdab5f)
+++ b/frontend/src/components/MFAShopCard.jsx	(date 1731864596000)
@@ -48,7 +48,7 @@
     const { addToCart } = useContext(CartContext);
 
     const getImageUrl = (itemId) => {
-        return `${process.env.REACT_APP_API_URL}/giftshopitems/${itemId}/image`;
+        return `http://localhost:5000/giftshopitems/${itemId}/image`;
     };
 
     const isOutOfStock = item.quantity === 0;
Index: frontend/src/components/ArtworkCard.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, {useState, useEffect, useRef} from 'react'\r\nimport { useLocation } from 'react-router-dom';\r\nimport styles from '../css/ArtworkCard.module.css';\r\nimport axios from 'axios';\r\n\r\nconst ArtworkCard = ({ artwork_, onCardClick, artworkImages }) => {\r\n  return (\r\n      <div className={styles.cards}>\r\n        {artwork_.map((art) => (\r\n            <div\r\n                key={art.ArtworkID}\r\n                className={styles.card}\r\n                onClick={() => onCardClick(art)}\r\n            >\r\n              <img src={artworkImages[art.ArtworkID]} alt={art.Title} className={styles.image} />\r\n              <h1>{art.Title}</h1>\r\n              <p>{art.artist_name || 'Unknown Artist'}</p>\r\n              <p>{art.CreationYear}</p>\r\n            </div>\r\n        ))}\r\n      </div>\r\n  );\r\n};\r\n\r\nconst ArtworkModalUser = ({ artwork_, onClose, onRefresh, artworkPreviewImages, handlePreviewImageChange, isDeletedView }) => {\r\n  const location = useLocation();\r\n  const role = localStorage.getItem('role');\r\n  const [isEditMode, setIsEditMode] = useState(false);\r\n  const [showConfirmDelete, setShowConfirmDelete] = useState(false);\r\n  const [artwork, setArtwork] = useState(artwork_);\r\n  const [imageUrl, setImageUrl] = useState(null);\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n  const openEditMode = () => setIsEditMode(true);\r\n  const openConfirmDelete = () => setShowConfirmDelete(true);\r\n  const closeConfirmDelete = () => setShowConfirmDelete(false);\r\n\r\n  console.log(\"isDeletedView in ArtworkModalUser:\", isDeletedView);\r\n\r\n  const fetchArtworkImage = async () => {\r\n    try {\r\n      const response = await axios.get(`${process.env.REACT_APP_API_URL}/artwork/${artwork.ArtworkID}/image`, {responseType: 'blob', });\r\n      setImageUrl(URL.createObjectURL(response.data));\r\n    } catch (error) {\r\n      console.error('Error fetching artwork image:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchArtworkImage();\r\n  }, [artwork.ArtworkID]); // Re-fetch the image when artwork ID changes\r\n\r\n  const handleDelete = async () => {\r\n    try {\r\n      await axios.delete(`${process.env.REACT_APP_API_URL}/artwork/${artwork.ArtworkID}`);\r\n      console.log(\"Artwork deleted successfully\");\r\n      onRefresh(); // Refresh the artwork list\r\n      onClose(); // Close the modal\r\n    } catch (error) {\r\n      console.error(\"Error deleting artwork:\", error);\r\n    }\r\n  };\r\n\r\n  const handleModalRefresh = async () => {\r\n    try {\r\n      const response = await axios.get(`${process.env.REACT_APP_API_URL}/artwork/${artwork.ArtworkID}`);\r\n      setArtwork(response.data);\r\n      fetchArtworkImage();\r\n    } catch (error) {\r\n      console.error('Error fetching updated artwork data:', error);\r\n    }\r\n  };\r\n\r\n  const handleOverlayClick = (e) => {\r\n    if (!isEditMode && e.target === e.currentTarget) {\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  const handleRestore = async (artistId, departmentId) => {\r\n    try {\r\n      // Fetch both the artist and department information in parallel\r\n      const [artistResponse, departmentResponse] = await Promise.all([\r\n        axios.get(`${process.env.REACT_APP_API_URL}/artist/${artistId}`),\r\n        axios.get(`${process.env.REACT_APP_API_URL}/department/${departmentId}`)\r\n      ]);\r\n\r\n      const artistData = artistResponse.data;\r\n      const departmentData = departmentResponse.data[0]; // Access the first element if response is an array\r\n\r\n      let errorMessages = [];\r\n\r\n      // Check artist deletion status\r\n      if (artistData.is_deleted === 1) {\r\n        errorMessages.push(\"Cannot restore this artwork because the assigned artist is deleted. Please restore the artist first.\");\r\n      }\r\n\r\n      // Check department deletion status\r\n      if (departmentData.is_deleted === 1) {\r\n        console.log(\"Department is marked as deleted.\"); // Debug log\r\n        errorMessages.push(\"Cannot restore this artwork because the assigned department is deleted. Please restore the department first.\");\r\n      } else {\r\n        console.log(\"Department is not deleted or missing is_deleted field.\"); // Debug log\r\n      }\r\n\r\n      // If there are error messages, show them and stop here\r\n      if (errorMessages.length > 0) {\r\n        setErrorMessage(errorMessages.join(\" \"));\r\n        return;\r\n      }\r\n\r\n      // Proceed with restoring the artwork if the artist and department are active\r\n      await axios.patch(`${process.env.REACT_APP_API_URL}/artwork/${artwork.ArtworkID}/restore`);\r\n      console.log(\"Artwork restored successfully\");\r\n      onRefresh(); // Refresh the artwork list\r\n      onClose(); // Close the modal\r\n    } catch (error) {\r\n      console.error(\"Error restoring artwork:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n      <div className={styles.modal} onClick={handleOverlayClick}>\r\n        <div className={styles.modal_content}>\r\n          {!isEditMode && (\r\n              <span className={styles.close_button} onClick={onClose}>\r\n            &times;\r\n          </span>\r\n          )}\r\n\r\n          {artwork_ && !isEditMode ? (\r\n              <>\r\n                <img src={artworkPreviewImages?.[artwork_.ArtworkID] || imageUrl} alt={artwork.Title} className={styles.image} />\r\n                <h2>{artwork.Title}</h2>\r\n                <p><strong>Artist:</strong> {artwork.artist_name || 'Unknown Artist'}</p>\r\n                <p><strong>Year:</strong> {artwork.CreationYear}</p>\r\n                <p><strong>Department:</strong> {artwork.department_name || 'Unknown Department'}</p>\r\n                <p><strong>Medium:</strong> {artwork.Medium}</p>\r\n                <p><strong>Height:</strong> {artwork.height} inches</p>\r\n                <p><strong>Width:</strong> {artwork.width} inches</p>\r\n                <p><strong>Depth:</strong> {artwork.depth || 'N/A'} inches</p>\r\n                <p><strong>Acquisition Date:</strong> {artwork.acquisition_date ? new Date(artwork.acquisition_date).toLocaleDateString('en-US', {\r\n                  year: 'numeric',\r\n                  month: 'long',\r\n                  day: 'numeric'\r\n                }) : 'N/A'}</p>\r\n                <p><strong>Condition:</strong> {artwork.ArtworkCondition}</p>\r\n                <p><strong>Location:</strong> {artwork.location || 'Not Specified'}</p>\r\n                <p><strong>Price:</strong> {artwork.price ? `$${artwork.price}` : 'N/A'}</p>\r\n                <p><strong>Description:</strong> {artwork.Description}</p>\r\n                {(role === 'admin' || role === 'staff') && location.pathname !== '/Art' && (\r\n                    <>\r\n                      {!isDeletedView ? (\r\n                          <>\r\n                            <button onClick={openEditMode}>Edit Artwork</button>\r\n                            <button onClick={openConfirmDelete}>Delete Artwork</button>\r\n                          </>\r\n                      ) : (\r\n                          <>\r\n                            {errorMessage && <p style={{ color: 'red' }}>{errorMessage}</p>}\r\n                            <button onClick={() => handleRestore(artwork.artist_id, artwork.department_id)}>Restore</button>\r\n                          </>\r\n                      )}\r\n                    </>\r\n                )}\r\n              </>\r\n          ) : (\r\n              <EditArtworkModal\r\n                  artwork={artwork}\r\n                  onClose={() => setIsEditMode(false)}\r\n                  onRefresh={onRefresh}\r\n                  onModalRefresh={handleModalRefresh}\r\n                  setModalImagePreview={(previewUrl) => handlePreviewImageChange(artwork_.ArtworkID, previewUrl)}\r\n              />\r\n          )}\r\n          {showConfirmDelete && (\r\n              <ConfirmDeleteArtworkModal\r\n                  onConfirm={handleDelete}\r\n                  onCancel={closeConfirmDelete}\r\n              />\r\n          )}\r\n        </div>\r\n      </div>\r\n  );\r\n};\r\n\r\nconst EditArtworkModal = ({ artwork, onClose, onRefresh, onModalRefresh, setModalImagePreview }) => {\r\n  const [Title, setTitle] = useState(artwork.Title || '');\r\n  const [artistId, setArtistId] = useState(artwork.artist_id || '');\r\n  const [departmentId, setDepartmentId] = useState(artwork.department_id || '');\r\n  const [CreationYear, setCreationYear] = useState(artwork.CreationYear !== null ? artwork.CreationYear : '');\r\n  const [medium, setMedium] = useState(artwork.Medium || '');\r\n  const [customMedium, setCustomMedium] = useState('');\r\n  const [height, setHeight] = useState(artwork.height !== null ? artwork.height : '');\r\n  const [width, setWidth] = useState(artwork.width !== null ? artwork.width : '');\r\n  const [depth, setDepth] = useState(artwork.depth !== null ? artwork.depth : '');\r\n  const [acquisitionDate, setAcquisitionDate] = useState(artwork.acquisition_date ? artwork.acquisition_date.split(\"T\")[0] : '');\r\n  const [condition, setCondition] = useState(artwork.ArtworkCondition || '');\r\n  const [customCondition, setCustomCondition] = useState('');\r\n  const [location, setLocation] = useState(artwork.location || '');\r\n  const [price, setPrice] = useState(artwork.price !== null ? artwork.price : '');\r\n  const [description, setDescription] = useState(artwork.Description || '');\r\n  const [image, setImage] = useState(null);\r\n  const [previewUrl, setPreviewUrl] = useState(artwork.imageUrl || '');\r\n  const [error, setError] = useState(null);\r\n  const [errors, setErrors] = useState({});\r\n  const [hasChanges, setHasChanges] = useState(false);\r\n  const [isSaving, setIsSaving] = useState(false); // Loading state\r\n\r\n  const [artists, setArtists] = useState([]);\r\n  const [departments, setDepartments] = useState([]);\r\n  const [mediums, setMediums] = useState([]);\r\n  const [conditions, setConditions] = useState([]);\r\n\r\n  // Fetch artists, departments, mediums, and conditions\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const [artistRes, departmentsRes, mediumsRes, conditionsRes] = await Promise.all([\r\n          axios.get(`${process.env.REACT_APP_API_URL}/artist`),\r\n          axios.get(`${process.env.REACT_APP_API_URL}/department`),\r\n          axios.get(`${process.env.REACT_APP_API_URL}/mediums`),\r\n          axios.get(`${process.env.REACT_APP_API_URL}/artworkconditions`)\r\n        ]);\r\n        const validArtists = Array.isArray(artistRes.data)\r\n            ? artistRes.data.flat().filter(artist => artist.ArtistID)\r\n            : [];\r\n        const validDepartments = Array.isArray(departmentsRes.data)\r\n            ? departmentsRes.data.flat().filter(department => department.DepartmentID)\r\n            : [];\r\n        setArtists(validArtists);\r\n        setDepartments(validDepartments);\r\n        setMediums(mediumsRes.data);\r\n        setConditions(conditionsRes.data);\r\n      } catch (error) {\r\n        console.error('Error fetching dropdown options:', error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Image preview handling\r\n  const handleImageChange = (e) => {\r\n    const file = e.target.files[0];\r\n    if (file) {\r\n      setImage(file);\r\n      const previewUrl = URL.createObjectURL(file);\r\n      setPreviewUrl(previewUrl);\r\n      //setModalImagePreview(previewUrl); // Pass the preview URL to ArtworkModalUser through ArtLookUp\r\n    }\r\n  };\r\n\r\n  // Function to check if any field has changed from the original artwork values\r\n  const checkIfChanged = () => {\r\n    const originalDate = artwork.acquisition_date ? artwork.acquisition_date.split(\"T\")[0] : '';\r\n    return (\r\n        Title !== artwork.Title ||\r\n        artistId !== artwork.artist_id ||\r\n        departmentId !== artwork.department_id ||\r\n        CreationYear !== artwork.CreationYear ||\r\n        medium !== artwork.Medium ||\r\n        height !== artwork.height ||\r\n        width !== artwork.width ||\r\n        (depth || '') !== (artwork.depth || '') ||  // Normalize depth comparison\r\n        acquisitionDate !== originalDate ||\r\n        condition !== artwork.ArtworkCondition ||\r\n        (location || '') !== (artwork.location || '') ||  // Normalize location comparison\r\n        (price || '') !== (artwork.price || '') ||  // Normalize price comparison\r\n        description !== artwork.Description ||\r\n        image !== null\r\n    );\r\n  };\r\n\r\n  // Update hasChanges whenever any field is changed\r\n  useEffect(() => {\r\n    setHasChanges(checkIfChanged());\r\n  }, [Title, artistId, departmentId, CreationYear, medium, height, width, depth, acquisitionDate, condition, location, price, description, image]);\r\n\r\n  // Validate all required fields\r\n  const validateFields = () => {\r\n    const newErrors = {};\r\n    if (!Title) newErrors.Title = \"Title is required.\";\r\n    if (!artistId) newErrors.artistId = \"Please select an artist.\";\r\n    if (!departmentId) newErrors.departmentId = \"Please select a department.\";\r\n    if (!CreationYear) newErrors.CreationYear = \"Creation year is required.\";\r\n    if (!medium) newErrors.medium = \"Please select a medium.\";\r\n    if (!height) newErrors.height = \"Height is required.\";\r\n    if (!width) newErrors.width = \"Width is required.\";\r\n    if (!acquisitionDate) newErrors.acquisitionDate = \"Acquisition date is required.\";\r\n    if (!condition) newErrors.condition = \"Please select a condition.\";\r\n    if (!description) newErrors.description = \"Description is required.\";\r\n\r\n    // Additional validation for custom fields\r\n    if (medium === \"Other\") {\r\n      if (!customMedium) {\r\n        newErrors.customMedium = \"Please specify the medium.\";\r\n      } else if (mediums.includes(customMedium)) {\r\n        newErrors.customMedium = \"This medium already exists in the list. Please select it from the dropdown.\";\r\n      }\r\n    }\r\n    if (condition === \"Other\") {\r\n      if (!customCondition) {\r\n        newErrors.customCondition = \"Please specify the artwork condition.\";\r\n      } else if (conditions.includes(customCondition)) {\r\n        newErrors.customCondition = \"This condition already exists in the list. Please select it from the dropdown.\";\r\n      }\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    if (!validateFields()) return;\r\n    setIsSaving(true);\r\n\r\n    const formData = new FormData();\r\n    formData.append('Title', Title);\r\n    formData.append('artist_id', artistId);\r\n    formData.append('department_id', departmentId);\r\n    formData.append('CreationYear', CreationYear);\r\n    formData.append('Medium', medium === 'Other' ? customMedium : medium);\r\n    formData.append('height', height);\r\n    formData.append('width', width);\r\n    formData.append('depth', depth);\r\n    formData.append('acquisition_date', acquisitionDate);\r\n    formData.append('ArtworkCondition', condition === 'Other' ? customCondition : condition);\r\n    formData.append('location', location);\r\n    formData.append('price', price);\r\n    formData.append('Description', description);\r\n    if (image) formData.append('image', image);\r\n\r\n    try {\r\n      await axios.patch(`${process.env.REACT_APP_API_URL}/artwork/${artwork.ArtworkID}`, formData, {\r\n        headers: { 'Content-Type': 'multipart/form-data' }\r\n      });\r\n      onRefresh();\r\n      onModalRefresh();\r\n      onClose();\r\n    } catch (error) {\r\n      console.error('Error updating artwork:', error);\r\n      setError('Failed to update artwork');\r\n    } finally {\r\n      setIsSaving(false); // Reset saving state\r\n    }\r\n  };\r\n\r\n  return (\r\n      <div>\r\n        <h2>Edit Artwork</h2>\r\n        {error && <p style={{ color: 'red' }}>{error}</p>}\r\n\r\n        <label>Image\r\n          <input type=\"file\" accept=\"image/*\" onChange={handleImageChange} />\r\n          {previewUrl && <img src={previewUrl} alt=\"Preview\" style={{ maxWidth: '200px', marginTop: '10px' }} />}\r\n        </label>\r\n\r\n        <label>Title *\r\n          <input type=\"text\" value={Title} onChange={(e) => setTitle(e.target.value)} />\r\n          {errors.Title && <p style={{ color: 'red' }}>{errors.Title}</p>}\r\n        </label>\r\n\r\n        <label>Artist *\r\n          <select value={artistId} onChange={(e) => setArtistId(e.target.value)}>\r\n            <option value=\"\">Select Artist</option>\r\n            {artists.map((artist) => (\r\n                <option key={artist.ArtistID} value={artist.ArtistID}>{artist.name_}</option>\r\n            ))}\r\n          </select>\r\n          {errors.artistId && <p style={{ color: 'red' }}>{errors.artistId}</p>}\r\n        </label>\r\n\r\n        <label>Department *\r\n          <select value={departmentId} onChange={(e) => setDepartmentId(e.target.value)}>\r\n            <option value=\"\">Select Department</option>\r\n            {departments.map((department) => (\r\n                <option key={department.DepartmentID} value={department.DepartmentID}>{department.Name}</option>\r\n            ))}\r\n          </select>\r\n          {errors.departmentId && <p style={{ color: 'red' }}>{errors.departmentId}</p>}\r\n        </label>\r\n\r\n        <label>Creation Year *\r\n          <input type=\"number\" value={CreationYear} onChange={(e) => setCreationYear(e.target.value)} />\r\n          {errors.CreationYear && <p style={{ color: 'red' }}>{errors.CreationYear}</p>}\r\n        </label>\r\n\r\n        <label>Medium *\r\n          <select value={medium} onChange={(e) => setMedium(e.target.value)}>\r\n            <option value=\"\">Select Medium</option>\r\n            {mediums.map((med) => <option key={med} value={med}>{med}</option>)}\r\n            <option value=\"Other\">Other</option>\r\n          </select>\r\n          {medium === 'Other' && (\r\n              <input type=\"text\" placeholder=\"Specify medium\" value={customMedium} onChange={(e) => setCustomMedium(e.target.value)} />\r\n          )}\r\n          {errors.medium && <p style={{ color: 'red' }}>{errors.medium}</p>}\r\n          {errors.customMedium && <p style={{ color: 'red' }}>{errors.customMedium}</p>}\r\n        </label>\r\n\r\n        <label>Height (inches) *\r\n          <input type=\"number\" value={height} onChange={(e) => setHeight(e.target.value)} />\r\n          {errors.height && <p style={{ color: 'red' }}>{errors.height}</p>}\r\n        </label>\r\n\r\n        <label>Width (inches) *\r\n          <input type=\"number\" value={width} onChange={(e) => setWidth(e.target.value)} />\r\n          {errors.width && <p style={{ color: 'red' }}>{errors.width}</p>}\r\n        </label>\r\n\r\n        <label>Depth (inches)\r\n          <input type=\"number\" value={depth} onChange={(e) => setDepth(e.target.value)} />\r\n        </label>\r\n\r\n        <label>Acquisition Date *\r\n          <input type=\"date\" value={acquisitionDate} onChange={(e) => setAcquisitionDate(e.target.value)} />\r\n          {errors.acquisitionDate && <p style={{ color: 'red' }}>{errors.acquisitionDate}</p>}\r\n        </label>\r\n\r\n        <label>Condition *\r\n          <select value={condition} onChange={(e) => setCondition(e.target.value)}>\r\n            <option value=\"\">Select Condition</option>\r\n            {conditions.map((cond) => <option key={cond} value={cond}>{cond}</option>)}\r\n            <option value=\"Other\">Other</option>\r\n          </select>\r\n          {condition === 'Other' && (\r\n              <input type=\"text\" placeholder=\"Specify condition\" value={customCondition} onChange={(e) => setCustomCondition(e.target.value)} />\r\n          )}\r\n          {errors.condition && <p style={{ color: 'red' }}>{errors.condition}</p>}\r\n          {errors.customCondition && <p style={{ color: 'red' }}>{errors.customCondition}</p>}\r\n        </label>\r\n\r\n        <label>Location\r\n          <input type=\"text\" value={location} onChange={(e) => setLocation(e.target.value)} />\r\n        </label>\r\n\r\n        <label>Price\r\n          <input type=\"number\" value={price} onChange={(e) => setPrice(e.target.value)} />\r\n        </label>\r\n\r\n        <label>Description *\r\n          <textarea value={description} onChange={(e) => setDescription(e.target.value)} />\r\n          {errors.description && <p style={{ color: 'red' }}>{errors.description}</p>}\r\n        </label>\r\n\r\n        <button onClick={onClose}>Cancel</button>\r\n        <button onClick={handleSave} disabled={!hasChanges || isSaving}>\r\n          {isSaving ? 'Saving...' : 'Save'}\r\n        </button>\r\n      </div>\r\n  );\r\n};\r\n\r\nconst ConfirmDeleteArtworkModal = ({ onConfirm, onCancel }) => {\r\n  return (\r\n      <div className={styles.modalOverlay}>\r\n        <div className={styles.modalContent}>\r\n          <h2>Are you sure you want to delete this artwork?</h2>\r\n          <p>This action can be undone. Go to 'View Deleted' to restore.</p>\r\n          <div className={styles.buttonContainer}>\r\n            <button onClick={onCancel}>Cancel</button>\r\n            <button onClick={onConfirm} style={{ color: \"red\" }}>Delete</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  );\r\n};\r\n\r\nconst ArtistCard = ({ artist_, onCardClick, artistImages }) => {\r\n  useEffect(() => {\r\n    console.log(\"Rendering ArtistCard with images:\", artistImages);\r\n  }, [artistImages]);\r\n  return (\r\n      <div className={styles.cards}>\r\n        {artist_.map((artist) => (\r\n            <div\r\n                key={artist.ArtistID}\r\n                className={styles.card}\r\n                onClick={() => onCardClick(artist)}\r\n            >\r\n              <img src={artistImages[artist.ArtistID]} alt={artist.name_} className={styles.image} />\r\n              <h1>{artist.name_}</h1>\r\n              <p>{artist.nationality}</p>\r\n              <p>{artist.birth_year} - {artist.death_year || 'Present'}</p>\r\n            </div>\r\n        ))}\r\n      </div>\r\n  );\r\n};\r\n\r\nconst ArtistModalUser = ({ artist_, onClose, onRefresh, artistPreviewImages, handlePreviewArtistImageChange, isDeletedView }) => {\r\n  const location = useLocation();\r\n  const role = localStorage.getItem('role');\r\n  const [isEditMode, setIsEditMode] = useState(false);\r\n  const [showConfirmDelete, setShowConfirmDelete] = useState(false);\r\n  const [artist, setArtist] = useState(artist_);\r\n  const [imageUrl, setImageUrl] = useState(null);\r\n\r\n  const openEditMode = () => setIsEditMode(true);\r\n  const openConfirmDelete = () => setShowConfirmDelete(true);\r\n  const closeConfirmDelete = () => setShowConfirmDelete(false);\r\n\r\n  const fetchArtistImage = async () => {\r\n    try {\r\n      const response = await axios.get(`${process.env.REACT_APP_API_URL}/artist/${artist.ArtistID}/image`, { responseType: 'blob' });\r\n      setImageUrl(URL.createObjectURL(response.data));\r\n    } catch (error) {\r\n      console.error('Error fetching artist image:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchArtistImage();\r\n  }, [artist.ArtistID]);\r\n\r\n  const handleDelete = async () => {\r\n    try {\r\n      await axios.delete(`${process.env.REACT_APP_API_URL}/artist/${artist.ArtistID}`);\r\n      console.log(\"Artist deleted successfully\");\r\n      onClose(); // Close the modal first to prevent further rendering issues\r\n      onRefresh(); // Then refresh the artist list after closing the modal\r\n    } catch (error) {\r\n      console.error(\"Error deleting artist:\", error);\r\n    }\r\n  };\r\n\r\n  const handleModalRefresh = async () => {\r\n    try {\r\n      const response = await axios.get(`${process.env.REACT_APP_API_URL}/artist/${artist.ArtistID}`);\r\n      setArtist(response.data);\r\n      fetchArtistImage();\r\n    } catch (error) {\r\n      console.error('Error fetching updated artist data:', error);\r\n    }\r\n  };\r\n\r\n  const handleOverlayClick = (e) => {\r\n    if (!isEditMode && e.target === e.currentTarget) {\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  const handleRestoreArtist = async (artistId) => {\r\n    try {\r\n      await axios.patch(`${process.env.REACT_APP_API_URL}/artist/${artistId}/restore`);\r\n\r\n      onRefresh();\r\n      onClose();\r\n    } catch (error) {\r\n      console.error('Error restoring artist:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n      <div className={styles.modal} onClick={handleOverlayClick}>\r\n        <div className={styles.modal_content}>\r\n          {!isEditMode && (\r\n              <span className={styles.close_button} onClick={onClose}>\r\n            &times;\r\n          </span>\r\n          )}\r\n\r\n          {artist_ && !isEditMode ? (\r\n              <>\r\n                <img src={artistPreviewImages?.[artist_.ArtistID] || imageUrl} alt={artist.name_} className={styles.image} />\r\n                <h2>{artist.name_}</h2>\r\n                <p><strong>Gender:</strong> {artist.gender}</p>\r\n                <p><strong>Nationality:</strong> {artist.nationality || 'Not specified'}</p>\r\n                <p><strong>Birth Year:</strong> {artist.birth_year || 'Not specified'}</p>\r\n                <p><strong>Death Year:</strong> {artist.death_year || 'N/A'}</p>\r\n                <p><strong>Description:</strong> {artist.description || 'No description provided'}</p>\r\n                {(role === 'admin' || role === 'staff') && location.pathname !== '/Art' && (\r\n                    <>\r\n                      {!isDeletedView ? (\r\n                          <>\r\n                            <button onClick={openEditMode}>Edit Artist</button>\r\n                            <button onClick={openConfirmDelete}>Delete Artist</button>\r\n                          </>\r\n                      ) : (\r\n                          <button onClick={() => handleRestoreArtist(artist.ArtistID)}>Restore</button>\r\n                      )}\r\n                    </>\r\n                )}\r\n              </>\r\n          ) : (\r\n              <EditArtistModal\r\n                  artist={artist}\r\n                  onClose={() => setIsEditMode(false)}\r\n                  onRefresh={onRefresh}\r\n                  onModalRefresh={handleModalRefresh}\r\n                  setModalArtistImagePreview={(previewUrl) => handlePreviewArtistImageChange(artist_.ArtistID, previewUrl)}\r\n              />\r\n          )}\r\n          {showConfirmDelete && (\r\n              <ConfirmDeleteArtistModal\r\n                  onConfirm={handleDelete}\r\n                  onCancel={closeConfirmDelete}\r\n              />\r\n          )}\r\n        </div>\r\n      </div>\r\n  );\r\n};\r\n\r\nconst EditArtistModal = ({ artist, onClose, onRefresh, onModalRefresh, setModalArtistImagePreview }) => {\r\n  const [nationalities, setNationalities] = useState([]);\r\n  const [name, setName] = useState(artist.name_);\r\n  const [gender, setGender] = useState(artist.gender);\r\n  const [nationality, setNationality] = useState(artist.nationality);\r\n  const [birthYear, setBirthYear] = useState(artist.birth_year || '');\r\n  const [deathYear, setDeathYear] = useState(artist.death_year || '');\r\n  const [description, setDescription] = useState(artist.description || '');\r\n  const [image, setImage] = useState(null);\r\n  const [previewUrl, setPreviewUrl] = useState(artist.imageUrl || '');\r\n  const [originalPreviewUrl, setOriginalPreviewUrl] = useState(previewUrl);\r\n  const [error, setError] = useState(null);\r\n  const [errors, setErrors] = useState({});\r\n  const [hasChanges, setHasChanges] = useState(false);\r\n  const [isSaving, setIsSaving] = useState(false); // Loading state\r\n\r\n  useEffect(() => {\r\n    const fetchNationalities = async () => {\r\n      try {\r\n        const response = await axios.get(`${process.env.REACT_APP_API_URL}/nationalities`);\r\n        setNationalities(response.data);\r\n      } catch (error) {\r\n        console.error('Error fetching nationalities:', error);\r\n      }\r\n    };\r\n    fetchNationalities();\r\n  }, []);\r\n\r\n  // Image preview handling\r\n  const handleImageChange = (e) => {\r\n    const file = e.target.files[0];\r\n    if (file) {\r\n      setImage(file);\r\n      const previewUrl = URL.createObjectURL(file);\r\n      setPreviewUrl(previewUrl);\r\n      console.log(\"Setting preview URL in EditArtistModal:\", previewUrl);\r\n      //setModalArtistImagePreview(previewUrl); // Pass the preview URL to ArtworkModalUser through ArtLookUp\r\n    }\r\n  };\r\n\r\n  // Function to check if any field has changed from the original artwork values\r\n  const checkIfChanged = () => {\r\n    return (\r\n        name !== artist.name_ ||\r\n        gender !== artist.gender ||\r\n        nationality !== artist.nationality ||\r\n        birthYear !== artist.birth_year ||\r\n        deathYear !== artist.death_year ||\r\n        description !== artist.description ||\r\n        image !== null\r\n    );\r\n  };\r\n\r\n  // Update hasChanges whenever any field is changed\r\n  useEffect(() => {\r\n    setHasChanges(checkIfChanged());\r\n  }, [name, gender, nationality, birthYear, deathYear, description, image]);\r\n\r\n  // Validate all required fields\r\n  const validateFields = () => {\r\n    const newErrors = {};\r\n    if (!name) newErrors.name = \"Name is required.\";\r\n    if (!gender) newErrors.gender = \"Gender is required.\";\r\n    if (!nationality) newErrors.nationality = \"Nationality is required.\";\r\n    if (!birthYear) newErrors.birthYear = \"Birth year is required.\";\r\n    if (!description) newErrors.description = \"Description is required.\";\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    if (!validateFields()) return;\r\n    setIsSaving(true);\r\n\r\n    const formData = new FormData();\r\n    formData.append('name', name);\r\n    formData.append('gender', gender);\r\n    formData.append('nationality', nationality);\r\n    formData.append('birthYear', birthYear);\r\n    formData.append('deathYear', deathYear || '');\r\n    formData.append('description', description);\r\n    if (image) formData.append('image', image); // Append the file only if it's selected\r\n\r\n    // Log all form data keys and values\r\n    for (let pair of formData.entries()) {\r\n      console.log(`${pair[0]}: ${pair[1]}`);\r\n    }\r\n\r\n    try {\r\n      const response = await axios.patch(`${process.env.REACT_APP_API_URL}/artist/${artist.ArtistID}`, formData, {\r\n        headers: { 'Content-Type': 'multipart/form-data' }\r\n      });\r\n      console.log(\"Response from backend:\", response.data);\r\n      onRefresh();\r\n      onModalRefresh();\r\n      onClose();\r\n    } catch (error) {\r\n      console.error('Error updating artwork:', error);\r\n      setError('Failed to update artwork');\r\n    } finally {\r\n      setIsSaving(false); // Reset saving state\r\n    }\r\n  };\r\n\r\n  return (\r\n      <div>\r\n        <h2>Edit Artist</h2>\r\n        {error && <p style={{ color: 'red' }}>{error}</p>}\r\n        <label>Change Image\r\n          <input type=\"file\" onChange={handleImageChange}/></label>\r\n        {previewUrl && <img src={previewUrl} alt=\"Preview\" style={{ maxWidth: '200px', marginTop: '10px' }} />}\r\n        <label>Name *\r\n          <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} required/></label>\r\n        {errors.name && <p style={{ color: 'red' }}>{errors.name}</p>}\r\n        <label>Gender *\r\n          <select value={gender} onChange={(e) => setGender(e.target.value)} required>\r\n            <option value=\"Male\">Male</option>\r\n            <option value=\"Female\">Female</option>\r\n            <option value=\"Other\">Other</option>\r\n          </select>\r\n          {errors.gender && <p style={{ color: 'red' }}>{errors.gender}</p>}\r\n        </label>\r\n        <label>Nationality *\r\n          <select value={nationality} onChange={(e) => setNationality(e.target.value)} required>\r\n            {nationalities.map((nat) => (\r\n                <option key={nat} value={nat}>{nat}</option>\r\n            ))}\r\n          </select>\r\n          {errors.nationality && <p style={{ color: 'red' }}>{errors.nationality}</p>}\r\n        </label>\r\n        <label>Birth Year *\r\n          <input type=\"number\" value={birthYear} onChange={(e) => setBirthYear(e.target.value)} required/>\r\n          {errors.birthYear && <p style={{ color: 'red' }}>{errors.birthYear}</p>}\r\n        </label>\r\n        <label>Death Year\r\n          <input type=\"number\" value={deathYear} onChange={(e) => setDeathYear(e.target.value)}/>\r\n        </label>\r\n        <label>Description *\r\n          <textarea value={description} onChange={(e) => setDescription(e.target.value)}/>\r\n          {errors.description && <p style={{ color: 'red' }}>{errors.description}</p>}\r\n        </label>\r\n        <button onClick={onClose}>Cancel</button>\r\n        <button onClick={handleSave} disabled={!hasChanges || isSaving}>\r\n          {isSaving ? 'Saving...' : 'Save'}\r\n        </button>\r\n      </div>\r\n  );\r\n};\r\n\r\nconst ConfirmDeleteArtistModal = ({ onConfirm, onCancel }) => {\r\n  return (\r\n      <div className={styles.modalOverlay}>\r\n        <div className={styles.modalContent}>\r\n          <h2>Are you sure you want to delete this artist?</h2>\r\n          <p>WARNING: All artwork from this artist WILL be removed from the collection</p>\r\n          <p>This action can be undone. Go to 'View Deleted' to restore.</p>\r\n          <div className={styles.buttonContainer}>\r\n            <button onClick={onCancel}>Cancel</button>\r\n            <button onClick={onConfirm} style={{ color: \"red\" }}>Delete</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  );\r\n};\r\n\r\nconst DepartmentCard = ({ department_, onRefresh, onEditClick, onDeleteClick, isDepartmentDeletedOpen }) => {\r\n\r\n  const handleRestoreClick = async (departmentId) => {\r\n    try {\r\n      await axios.patch(`${process.env.REACT_APP_API_URL}/department/${departmentId}/restore`);\r\n      onRefresh();\r\n    } catch (error) {\r\n      console.error('Error restoring department:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n      <div className={styles.cards}>\r\n        {department_.map((department) => (\r\n            <div key={department.DepartmentID} className={styles.card}>\r\n              <h1>{department.Name}</h1>\r\n              <p>{department.Description}</p>\r\n              <p>{department.Location}</p>\r\n              {!isDepartmentDeletedOpen ? (\r\n                  <>\r\n                    <button onClick={(e) => { e.stopPropagation(); onEditClick(department); }}>Edit</button>\r\n                    <button onClick={(e) => { e.stopPropagation(); onDeleteClick(department.DepartmentID); }}>Delete</button>\r\n                  </>\r\n              ) : (\r\n                  <button onClick={(e) => { e.stopPropagation(); handleRestoreClick(department.DepartmentID); }}>Restore</button>\r\n              )}\r\n            </div>\r\n        ))}\r\n      </div>\r\n  );\r\n};\r\n\r\nconst EditDepartmentModal = ({ department, onClose, onRefresh }) => {\r\n  const [name, setName] = useState(department.Name || '');\r\n  const [location, setLocation] = useState(department.Location || '');\r\n  const [description, setDescription] = useState(department.Description || '');\r\n  const [errors, setErrors] = useState({});\r\n  const [isSaving, setIsSaving] = useState(false);\r\n\r\n  // Function to validate fields\r\n  const validateFields = () => {\r\n    const newErrors = {};\r\n    if (!name) newErrors.name = \"Department name is required.\";\r\n    if (!description) newErrors.description = \"Description is required.\";\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    if (!validateFields()) return;\r\n    setIsSaving(true);\r\n\r\n    const updatedDepartmentData = {\r\n      name,\r\n      location,\r\n      description\r\n    };\r\n\r\n    try {\r\n      await axios.patch(`${process.env.REACT_APP_API_URL}/department/${department.DepartmentID}`, updatedDepartmentData);\r\n      onRefresh();\r\n      onClose();\r\n    } catch (error) {\r\n      console.error(\"Error updating department:\", error);\r\n    } finally {\r\n      setIsSaving(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n      <div className={styles.modal}>\r\n        <div className={styles.modal_content}>\r\n          <h2>Edit Department</h2>\r\n          <label>Department Name *\r\n            <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} />\r\n            {errors.name && <p style={{ color: 'red' }}>{errors.name}</p>}\r\n          </label>\r\n          <label>Location\r\n            <input type=\"text\" value={location} onChange={(e) => setLocation(e.target.value)} />\r\n            {errors.location && <p style={{ color: 'red' }}>{errors.location}</p>}\r\n          </label>\r\n          <label>Description *\r\n            <textarea value={description} onChange={(e) => setDescription(e.target.value)} />\r\n            {errors.description && <p style={{ color: 'red' }}>{errors.description}</p>}\r\n          </label>\r\n          <button onClick={onClose}>Cancel</button>\r\n          <button onClick={handleSave} disabled={isSaving}>{isSaving ? 'Saving...' : 'Save'}</button>\r\n        </div>\r\n      </div>\r\n  );\r\n};\r\n\r\nconst ConfirmDeleteDepartmentModal = ({ onConfirm, onCancel }) => {\r\n  return (\r\n      <div className={styles.modal}>\r\n        <div className={styles.modal_content}>\r\n          <h2>Are you sure you want to delete this department? This will also delete the artwork associated with this department</h2>\r\n          <p>This action can be undone. Go to 'View Deleted' to restore.</p>\r\n          <div className={styles.buttonContainer}>\r\n            <button onClick={onCancel}>Cancel</button>\r\n            <button onClick={onConfirm} style={{ color: \"red\" }}>Delete</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  );\r\n};\r\n\r\n\r\nexport {ArtworkCard, ArtworkModalUser, ArtistCard, ArtistModalUser, DepartmentCard, EditDepartmentModal, ConfirmDeleteDepartmentModal};\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/ArtworkCard.jsx b/frontend/src/components/ArtworkCard.jsx
--- a/frontend/src/components/ArtworkCard.jsx	(revision d3acca75f5b262396eed806fab6b317a26cdab5f)
+++ b/frontend/src/components/ArtworkCard.jsx	(date 1731864596000)
@@ -39,7 +39,7 @@
 
   const fetchArtworkImage = async () => {
     try {
-      const response = await axios.get(`${process.env.REACT_APP_API_URL}/artwork/${artwork.ArtworkID}/image`, {responseType: 'blob', });
+      const response = await axios.get(`http://localhost:5000/artwork/${artwork.ArtworkID}/image`, {responseType: 'blob', });
       setImageUrl(URL.createObjectURL(response.data));
     } catch (error) {
       console.error('Error fetching artwork image:', error);
@@ -52,7 +52,7 @@
 
   const handleDelete = async () => {
     try {
-      await axios.delete(`${process.env.REACT_APP_API_URL}/artwork/${artwork.ArtworkID}`);
+      await axios.delete(`http://localhost:5000/artwork/${artwork.ArtworkID}`);
       console.log("Artwork deleted successfully");
       onRefresh(); // Refresh the artwork list
       onClose(); // Close the modal
@@ -63,7 +63,7 @@
 
   const handleModalRefresh = async () => {
     try {
-      const response = await axios.get(`${process.env.REACT_APP_API_URL}/artwork/${artwork.ArtworkID}`);
+      const response = await axios.get(`http://localhost:5000/artwork/${artwork.ArtworkID}`);
       setArtwork(response.data);
       fetchArtworkImage();
     } catch (error) {
@@ -81,8 +81,8 @@
     try {
       // Fetch both the artist and department information in parallel
       const [artistResponse, departmentResponse] = await Promise.all([
-        axios.get(`${process.env.REACT_APP_API_URL}/artist/${artistId}`),
-        axios.get(`${process.env.REACT_APP_API_URL}/department/${departmentId}`)
+        axios.get(`http://localhost:5000/artist/${artistId}`),
+        axios.get(`http://localhost:5000/department/${departmentId}`)
       ]);
 
       const artistData = artistResponse.data;
@@ -110,7 +110,7 @@
       }
 
       // Proceed with restoring the artwork if the artist and department are active
-      await axios.patch(`${process.env.REACT_APP_API_URL}/artwork/${artwork.ArtworkID}/restore`);
+      await axios.patch(`http://localhost:5000/artwork/${artwork.ArtworkID}/restore`);
       console.log("Artwork restored successfully");
       onRefresh(); // Refresh the artwork list
       onClose(); // Close the modal
@@ -217,10 +217,10 @@
     const fetchData = async () => {
       try {
         const [artistRes, departmentsRes, mediumsRes, conditionsRes] = await Promise.all([
-          axios.get(`${process.env.REACT_APP_API_URL}/artist`),
-          axios.get(`${process.env.REACT_APP_API_URL}/department`),
-          axios.get(`${process.env.REACT_APP_API_URL}/mediums`),
-          axios.get(`${process.env.REACT_APP_API_URL}/artworkconditions`)
+          axios.get(`http://localhost:5000/artist`),
+          axios.get(`http://localhost:5000/department`),
+          axios.get(`http://localhost:5000/mediums`),
+          axios.get(`http://localhost:5000/artworkconditions`)
         ]);
         const validArtists = Array.isArray(artistRes.data)
             ? artistRes.data.flat().filter(artist => artist.ArtistID)
@@ -331,7 +331,7 @@
     if (image) formData.append('image', image);
 
     try {
-      await axios.patch(`${process.env.REACT_APP_API_URL}/artwork/${artwork.ArtworkID}`, formData, {
+      await axios.patch(`http://localhost:5000/artwork/${artwork.ArtworkID}`, formData, {
         headers: { 'Content-Type': 'multipart/form-data' }
       });
       onRefresh();
@@ -502,7 +502,7 @@
 
   const fetchArtistImage = async () => {
     try {
-      const response = await axios.get(`${process.env.REACT_APP_API_URL}/artist/${artist.ArtistID}/image`, { responseType: 'blob' });
+      const response = await axios.get(`http://localhost:5000/artist/${artist.ArtistID}/image`, { responseType: 'blob' });
       setImageUrl(URL.createObjectURL(response.data));
     } catch (error) {
       console.error('Error fetching artist image:', error);
@@ -515,7 +515,7 @@
 
   const handleDelete = async () => {
     try {
-      await axios.delete(`${process.env.REACT_APP_API_URL}/artist/${artist.ArtistID}`);
+      await axios.delete(`http://localhost:5000/artist/${artist.ArtistID}`);
       console.log("Artist deleted successfully");
       onClose(); // Close the modal first to prevent further rendering issues
       onRefresh(); // Then refresh the artist list after closing the modal
@@ -526,7 +526,7 @@
 
   const handleModalRefresh = async () => {
     try {
-      const response = await axios.get(`${process.env.REACT_APP_API_URL}/artist/${artist.ArtistID}`);
+      const response = await axios.get(`http://localhost:5000/artist/${artist.ArtistID}`);
       setArtist(response.data);
       fetchArtistImage();
     } catch (error) {
@@ -542,7 +542,7 @@
 
   const handleRestoreArtist = async (artistId) => {
     try {
-      await axios.patch(`${process.env.REACT_APP_API_URL}/artist/${artistId}/restore`);
+      await axios.patch(`http://localhost:5000/artist/${artistId}/restore`);
 
       onRefresh();
       onClose();
@@ -621,7 +621,7 @@
   useEffect(() => {
     const fetchNationalities = async () => {
       try {
-        const response = await axios.get(`${process.env.REACT_APP_API_URL}/nationalities`);
+        const response = await axios.get(`http://localhost:5000/nationalities`);
         setNationalities(response.data);
       } catch (error) {
         console.error('Error fetching nationalities:', error);
@@ -692,7 +692,7 @@
     }
 
     try {
-      const response = await axios.patch(`${process.env.REACT_APP_API_URL}/artist/${artist.ArtistID}`, formData, {
+      const response = await axios.patch(`http://localhost:5000/artist/${artist.ArtistID}`, formData, {
         headers: { 'Content-Type': 'multipart/form-data' }
       });
       console.log("Response from backend:", response.data);
@@ -772,7 +772,7 @@
 
   const handleRestoreClick = async (departmentId) => {
     try {
-      await axios.patch(`${process.env.REACT_APP_API_URL}/department/${departmentId}/restore`);
+      await axios.patch(`http://localhost:5000/department/${departmentId}/restore`);
       onRefresh();
     } catch (error) {
       console.error('Error restoring department:', error);
@@ -828,7 +828,7 @@
     };
 
     try {
-      await axios.patch(`${process.env.REACT_APP_API_URL}/department/${department.DepartmentID}`, updatedDepartmentData);
+      await axios.patch(`http://localhost:5000/department/${department.DepartmentID}`, updatedDepartmentData);
       onRefresh();
       onClose();
     } catch (error) {
Index: frontend/src/components/UserFormModal.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport styles from '../css/UserFormModal.module.css';\r\nimport ChangePasswordModal from './ChangePasswordModal';\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst UserFormModal = ({ user, onClose }) => {\r\n    // Initialize form data with camelCase field names\r\n    const [formData, setFormData] = useState({\r\n        firstName: '',\r\n        lastName: '',\r\n        dateOfBirth: '',\r\n        username: '',\r\n        email: '',\r\n        roleId: 3, // Default to 'Customer'\r\n        password: '',\r\n        confirmPassword: '',\r\n    });\r\n\r\n    const [isPasswordModalOpen, setIsPasswordModalOpen] = useState(false);\r\n    const [error, setError] = useState('');\r\n\r\n    // Retrieve role and userId from localStorage\r\n    const role = localStorage.getItem('role');\r\n    const userId = localStorage.getItem('userId');\r\n\r\n    useEffect(() => {\r\n        if (user) {\r\n            setFormData({\r\n                firstName: user.first_name || '',\r\n                lastName: user.last_name || '',\r\n                dateOfBirth: user.date_of_birth || '',\r\n                username: user.username || '',\r\n                email: user.email || '',\r\n                roleId: user.role_id || 3,\r\n                password: '', // Reset password fields when editing\r\n                confirmPassword: '',\r\n            });\r\n        }\r\n    }, [user]);\r\n\r\n    // Handle input changes\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n\r\n        setFormData((prevFormData) => ({\r\n            ...prevFormData,\r\n            [name]: name === 'roleId' ? parseInt(value, 10) : value,\r\n        }));\r\n    };\r\n\r\n    // Handle form submission\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setError(''); // Reset error state\r\n\r\n        // Password validation when creating a new user\r\n        if (!user || !user.user_id) {\r\n            if (!formData.password || !formData.confirmPassword) {\r\n                const errorMessage = 'Please enter and confirm the password.';\r\n                setError(errorMessage);\r\n                toast.error(errorMessage);\r\n                return;\r\n            }\r\n            if (formData.password !== formData.confirmPassword) {\r\n                const errorMessage = 'Passwords do not match.';\r\n                setError(errorMessage);\r\n                toast.error(errorMessage);\r\n                return;\r\n            }\r\n            if (formData.password.length < 6) {\r\n                const errorMessage = 'Password must be at least 6 characters long.';\r\n                setError(errorMessage);\r\n                toast.error(errorMessage);\r\n                return;\r\n            }\r\n        }\r\n\r\n        // Prepare payload with camelCase field names\r\n        const payload = {\r\n            firstName: formData.firstName,\r\n            lastName: formData.lastName,\r\n            dateOfBirth: formData.dateOfBirth,\r\n            username: formData.username,\r\n            email: formData.email,\r\n            roleId: formData.roleId,\r\n            password: formData.password, // Include password in payload when creating new user\r\n        };\r\n\r\n        try {\r\n            if (user && user.user_id) {\r\n                // Update existing user\r\n                await axios.put(`${process.env.REACT_APP_API_URL}/users/${user.user_id}`, payload, {\r\n                    headers: {\r\n                        role: role,\r\n                        'user-id': userId,\r\n                    },\r\n                });\r\n                toast.success('User updated successfully');\r\n            } else {\r\n                // Create new user via admin endpoint\r\n                await axios.post(`${process.env.REACT_APP_API_URL}/users`, payload, {\r\n                    headers: {\r\n                        role: role,\r\n                        'user-id': userId,\r\n                    },\r\n                });\r\n                toast.success('User created successfully');\r\n            }\r\n            onClose(); // Close the modal upon successful submission\r\n        } catch (error) {\r\n            console.error('Error submitting form:', error);\r\n            // Display error message from server or a generic message\r\n            const errorMessage =\r\n                error.response?.data?.message || 'An error occurred while submitting the form.';\r\n            setError(errorMessage);\r\n            toast.error(errorMessage);\r\n        }\r\n    };\r\n\r\n    // Open the Change Password Modal\r\n    const openPasswordModal = () => {\r\n        setIsPasswordModalOpen(true);\r\n    };\r\n\r\n    // Close the Change Password Modal\r\n    const closePasswordModal = () => {\r\n        setIsPasswordModalOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div className={styles.modal}>\r\n            <div className={styles.modalContent}>\r\n                <span className={styles.closeButton} onClick={onClose}>\r\n                    &times;\r\n                </span>\r\n                <form onSubmit={handleSubmit} className={styles.formContainer}>\r\n                    <h2>{user && user.user_id ? 'Edit User' : 'Add New User'}</h2>\r\n                    {error && <div className={styles.error}>{error}</div>}\r\n                    <label>\r\n                        First Name:\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"firstName\"\r\n                            value={formData.firstName}\r\n                            onChange={handleChange}\r\n                            required\r\n                        />\r\n                    </label>\r\n                    <label>\r\n                        Last Name:\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"lastName\"\r\n                            value={formData.lastName}\r\n                            onChange={handleChange}\r\n                            required\r\n                        />\r\n                    </label>\r\n                    <label>\r\n                        Date of Birth:\r\n                        <input\r\n                            type=\"date\"\r\n                            name=\"dateOfBirth\"\r\n                            value={formData.dateOfBirth}\r\n                            onChange={handleChange}\r\n                            required\r\n                        />\r\n                    </label>\r\n                    <label>\r\n                        Username:\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"username\"\r\n                            value={formData.username}\r\n                            onChange={handleChange}\r\n                            required\r\n                            disabled={user && user.user_id} // Disable if editing\r\n                        />\r\n                    </label>\r\n                    <label>\r\n                        Email:\r\n                        <input\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                            value={formData.email}\r\n                            onChange={handleChange}\r\n                            required\r\n                        />\r\n                    </label>\r\n                    {role === 'admin' && (\r\n                        <label>\r\n                            Role:\r\n                            <select name=\"roleId\" value={formData.roleId} onChange={handleChange}>\r\n                                <option value={1}>Admin</option>\r\n                                <option value={2}>Staff</option>\r\n                                <option value={3}>Customer</option>\r\n                                <option value={4}>Member</option>\r\n                            </select>\r\n                        </label>\r\n                    )}\r\n                    {/* Only show password fields when creating a new user */}\r\n                    {(!user || !user.user_id) && (\r\n                        <>\r\n                            <label>\r\n                                Password:\r\n                                <input\r\n                                    type=\"password\"\r\n                                    name=\"password\"\r\n                                    value={formData.password}\r\n                                    onChange={handleChange}\r\n                                    required\r\n                                />\r\n                            </label>\r\n                            <label>\r\n                                Confirm Password:\r\n                                <input\r\n                                    type=\"password\"\r\n                                    name=\"confirmPassword\"\r\n                                    value={formData.confirmPassword}\r\n                                    onChange={handleChange}\r\n                                    required\r\n                                />\r\n                            </label>\r\n                        </>\r\n                    )}\r\n                    <div className={styles.buttonGroup}>\r\n                        <button type=\"submit\" className={styles.formButton}>\r\n                            {user && user.user_id ? 'Update' : 'Create'}\r\n                        </button>\r\n                        <button type=\"button\" className={styles.formButton} onClick={onClose}>\r\n                            Cancel\r\n                        </button>\r\n                        {user && user.user_id && (\r\n                            <button\r\n                                type=\"button\"\r\n                                className={styles.formButton}\r\n                                onClick={openPasswordModal}\r\n                            >\r\n                                Change Password\r\n                            </button>\r\n                        )}\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            {/* Add ToastContainer */}\r\n            <ToastContainer />\r\n            {/* Change Password Modal */}\r\n            {isPasswordModalOpen && (\r\n                <ChangePasswordModal\r\n                    open={isPasswordModalOpen}\r\n                    onClose={closePasswordModal}\r\n                    userId={user.user_id}\r\n                    role={role}\r\n                    isAdmin={true}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UserFormModal;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/UserFormModal.jsx b/frontend/src/components/UserFormModal.jsx
--- a/frontend/src/components/UserFormModal.jsx	(revision d3acca75f5b262396eed806fab6b317a26cdab5f)
+++ b/frontend/src/components/UserFormModal.jsx	(date 1731864596000)
@@ -91,7 +91,7 @@
         try {
             if (user && user.user_id) {
                 // Update existing user
-                await axios.put(`${process.env.REACT_APP_API_URL}/users/${user.user_id}`, payload, {
+                await axios.put(`http://localhost:5000/users/${user.user_id}`, payload, {
                     headers: {
                         role: role,
                         'user-id': userId,
@@ -100,7 +100,7 @@
                 toast.success('User updated successfully');
             } else {
                 // Create new user via admin endpoint
-                await axios.post(`${process.env.REACT_APP_API_URL}/users`, payload, {
+                await axios.post(`http://localhost:5000/users`, payload, {
                     headers: {
                         role: role,
                         'user-id': userId,
